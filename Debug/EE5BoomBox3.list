
EE5BoomBox3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b54  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08005d34  08005d34  00015d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e04  08005e04  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005e04  08005e04  00015e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e0c  08005e0c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e0c  08005e0c  00015e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e10  08005e10  00015e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005e14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a4c  20000010  08005e24  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a5c  08005e24  00021a5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c0fa  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000332f  00000000  00000000  0003c13a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001738  00000000  00000000  0003f470  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015c0  00000000  00000000  00040ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f725  00000000  00000000  00042168  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000128bf  00000000  00000000  0006188d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce61d  00000000  00000000  0007414c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00142769  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006218  00000000  00000000  001427e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005d1c 	.word	0x08005d1c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	08005d1c 	.word	0x08005d1c

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <init_app>:

int volume = 0;

/* Execute all configuration protocols */
void init_app()
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	lcd_init ();
 8000524:	f000 f914 	bl	8000750 <lcd_init>
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}

0800052c <tick_app>:

void tick_app()
{
 800052c:	b5b0      	push	{r4, r5, r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af00      	add	r7, sp, #0
	osDelay(30);
 8000532:	201e      	movs	r0, #30
 8000534:	f002 ff8a 	bl	800344c <osDelay>
	lcd_clear();
 8000538:	f000 f900 	bl	800073c <lcd_clear>
	char vol[] = "                "; // 16 spaces
 800053c:	4b13      	ldr	r3, [pc, #76]	; (800058c <tick_app+0x60>)
 800053e:	463c      	mov	r4, r7
 8000540:	461d      	mov	r5, r3
 8000542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000546:	682b      	ldr	r3, [r5, #0]
 8000548:	7023      	strb	r3, [r4, #0]
	for(int i=0;i<16;i++)
 800054a:	2300      	movs	r3, #0
 800054c:	617b      	str	r3, [r7, #20]
 800054e:	e012      	b.n	8000576 <tick_app+0x4a>
	{
		if(i * 20 < volume * 16 ) vol[i] = '\xff';
 8000550:	697a      	ldr	r2, [r7, #20]
 8000552:	4613      	mov	r3, r2
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	4413      	add	r3, r2
 8000558:	009b      	lsls	r3, r3, #2
 800055a:	461a      	mov	r2, r3
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <tick_app+0x64>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	011b      	lsls	r3, r3, #4
 8000562:	429a      	cmp	r2, r3
 8000564:	da04      	bge.n	8000570 <tick_app+0x44>
 8000566:	463a      	mov	r2, r7
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	4413      	add	r3, r2
 800056c:	22ff      	movs	r2, #255	; 0xff
 800056e:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<16;i++)
 8000570:	697b      	ldr	r3, [r7, #20]
 8000572:	3301      	adds	r3, #1
 8000574:	617b      	str	r3, [r7, #20]
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	dde9      	ble.n	8000550 <tick_app+0x24>
	}
	lcd_send_string(vol);
 800057c:	463b      	mov	r3, r7
 800057e:	4618      	mov	r0, r3
 8000580:	f000 f923 	bl	80007ca <lcd_send_string>
}
 8000584:	bf00      	nop
 8000586:	3718      	adds	r7, #24
 8000588:	46bd      	mov	sp, r7
 800058a:	bdb0      	pop	{r4, r5, r7, pc}
 800058c:	08005d34 	.word	0x08005d34
 8000590:	2000002c 	.word	0x2000002c

08000594 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	80fb      	strh	r3, [r7, #6]
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 1)
 800059e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a6:	f000 fecd 	bl	8001344 <HAL_GPIO_ReadPin>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d110      	bne.n	80005d2 <HAL_GPIO_EXTI_Callback+0x3e>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
 80005b0:	2201      	movs	r2, #1
 80005b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ba:	f000 fedb 	bl	8001374 <HAL_GPIO_WritePin>
		if(volume < 20) volume++;
 80005be:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <HAL_GPIO_EXTI_Callback+0x68>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2b13      	cmp	r3, #19
 80005c4:	dc15      	bgt.n	80005f2 <HAL_GPIO_EXTI_Callback+0x5e>
 80005c6:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <HAL_GPIO_EXTI_Callback+0x68>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	3301      	adds	r3, #1
 80005cc:	4a0b      	ldr	r2, [pc, #44]	; (80005fc <HAL_GPIO_EXTI_Callback+0x68>)
 80005ce:	6013      	str	r3, [r2, #0]
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
		if(volume > 0) volume--;
	}

}
 80005d0:	e00f      	b.n	80005f2 <HAL_GPIO_EXTI_Callback+0x5e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005dc:	f000 feca 	bl	8001374 <HAL_GPIO_WritePin>
		if(volume > 0) volume--;
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <HAL_GPIO_EXTI_Callback+0x68>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	dd04      	ble.n	80005f2 <HAL_GPIO_EXTI_Callback+0x5e>
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <HAL_GPIO_EXTI_Callback+0x68>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3b01      	subs	r3, #1
 80005ee:	4a03      	ldr	r2, [pc, #12]	; (80005fc <HAL_GPIO_EXTI_Callback+0x68>)
 80005f0:	6013      	str	r3, [r2, #0]
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	2000002c 	.word	0x2000002c

08000600 <delay>:
#define timer htim6


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 800060a:	4b08      	ldr	r3, [pc, #32]	; (800062c <delay+0x2c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2200      	movs	r2, #0
 8000610:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8000612:	bf00      	nop
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <delay+0x2c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800061a:	88fb      	ldrh	r3, [r7, #6]
 800061c:	429a      	cmp	r2, r3
 800061e:	d3f9      	bcc.n	8000614 <delay+0x14>
}
 8000620:	bf00      	nop
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	20001940 	.word	0x20001940

08000630 <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	6039      	str	r1, [r7, #0]
 800063a:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	b2db      	uxtb	r3, r3
 8000640:	461a      	mov	r2, r3
 8000642:	2101      	movs	r1, #1
 8000644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000648:	f000 fe94 	bl	8001374 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	08db      	lsrs	r3, r3, #3
 8000650:	b2db      	uxtb	r3, r3
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	b2db      	uxtb	r3, r3
 8000658:	461a      	mov	r2, r3
 800065a:	2180      	movs	r1, #128	; 0x80
 800065c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000660:	f000 fe88 	bl	8001374 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	089b      	lsrs	r3, r3, #2
 8000668:	b2db      	uxtb	r3, r3
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	b2db      	uxtb	r3, r3
 8000670:	461a      	mov	r2, r3
 8000672:	2140      	movs	r1, #64	; 0x40
 8000674:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000678:	f000 fe7c 	bl	8001374 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	085b      	lsrs	r3, r3, #1
 8000680:	b2db      	uxtb	r3, r3
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	b2db      	uxtb	r3, r3
 8000688:	461a      	mov	r2, r3
 800068a:	2120      	movs	r1, #32
 800068c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000690:	f000 fe70 	bl	8001374 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	b2db      	uxtb	r3, r3
 800069c:	461a      	mov	r2, r3
 800069e:	2110      	movs	r1, #16
 80006a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a4:	f000 fe66 	bl	8001374 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 80006a8:	2201      	movs	r2, #1
 80006aa:	2102      	movs	r1, #2
 80006ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b0:	f000 fe60 	bl	8001374 <HAL_GPIO_WritePin>
	delay (20);
 80006b4:	2014      	movs	r0, #20
 80006b6:	f7ff ffa3 	bl	8000600 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2102      	movs	r1, #2
 80006be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c2:	f000 fe57 	bl	8001374 <HAL_GPIO_WritePin>
	delay (20);
 80006c6:	2014      	movs	r0, #20
 80006c8:	f7ff ff9a 	bl	8000600 <delay>
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	091b      	lsrs	r3, r3, #4
 80006e2:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ffa1 	bl	8000630 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	f003 030f 	and.w	r3, r3, #15
 80006f4:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 80006f6:	7bfb      	ldrb	r3, [r7, #15]
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff ff98 	bl	8000630 <send_to_lcd>
}
 8000700:	bf00      	nop
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	091b      	lsrs	r3, r3, #4
 8000716:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	2101      	movs	r1, #1
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff ff87 	bl	8000630 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	f003 030f 	and.w	r3, r3, #15
 8000728:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 800072a:	7bfb      	ldrb	r3, [r7, #15]
 800072c:	2101      	movs	r1, #1
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff ff7e 	bl	8000630 <send_to_lcd>
}
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <lcd_clear>:

void lcd_clear (void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000740:	2001      	movs	r0, #1
 8000742:	f7ff ffc7 	bl	80006d4 <lcd_send_cmd>
	osDelay(2);
 8000746:	2002      	movs	r0, #2
 8000748:	f002 fe80 	bl	800344c <osDelay>
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <lcd_init>:
    lcd_send_cmd (col);
}


void lcd_init (void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	osDelay(50);  // wait for >40ms
 8000754:	2032      	movs	r0, #50	; 0x32
 8000756:	f002 fe79 	bl	800344c <osDelay>
	lcd_send_cmd (0x30);
 800075a:	2030      	movs	r0, #48	; 0x30
 800075c:	f7ff ffba 	bl	80006d4 <lcd_send_cmd>
	osDelay(5);  // wait for >4.1ms
 8000760:	2005      	movs	r0, #5
 8000762:	f002 fe73 	bl	800344c <osDelay>
	lcd_send_cmd (0x30);
 8000766:	2030      	movs	r0, #48	; 0x30
 8000768:	f7ff ffb4 	bl	80006d4 <lcd_send_cmd>
	osDelay(1);  // wait for >100us
 800076c:	2001      	movs	r0, #1
 800076e:	f002 fe6d 	bl	800344c <osDelay>
	lcd_send_cmd (0x30);
 8000772:	2030      	movs	r0, #48	; 0x30
 8000774:	f7ff ffae 	bl	80006d4 <lcd_send_cmd>
	osDelay(10);
 8000778:	200a      	movs	r0, #10
 800077a:	f002 fe67 	bl	800344c <osDelay>
	lcd_send_cmd (0x20);  // 4bit mode
 800077e:	2020      	movs	r0, #32
 8000780:	f7ff ffa8 	bl	80006d4 <lcd_send_cmd>
	osDelay(10);
 8000784:	200a      	movs	r0, #10
 8000786:	f002 fe61 	bl	800344c <osDelay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800078a:	2028      	movs	r0, #40	; 0x28
 800078c:	f7ff ffa2 	bl	80006d4 <lcd_send_cmd>
	osDelay(1);
 8000790:	2001      	movs	r0, #1
 8000792:	f002 fe5b 	bl	800344c <osDelay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000796:	2008      	movs	r0, #8
 8000798:	f7ff ff9c 	bl	80006d4 <lcd_send_cmd>
	osDelay(1);
 800079c:	2001      	movs	r0, #1
 800079e:	f002 fe55 	bl	800344c <osDelay>
	lcd_send_cmd (0x01);  // clear display
 80007a2:	2001      	movs	r0, #1
 80007a4:	f7ff ff96 	bl	80006d4 <lcd_send_cmd>
	osDelay(1);
 80007a8:	2001      	movs	r0, #1
 80007aa:	f002 fe4f 	bl	800344c <osDelay>
	osDelay(1);
 80007ae:	2001      	movs	r0, #1
 80007b0:	f002 fe4c 	bl	800344c <osDelay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80007b4:	2006      	movs	r0, #6
 80007b6:	f7ff ff8d 	bl	80006d4 <lcd_send_cmd>
	osDelay(1);
 80007ba:	2001      	movs	r0, #1
 80007bc:	f002 fe46 	bl	800344c <osDelay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80007c0:	200c      	movs	r0, #12
 80007c2:	f7ff ff87 	bl	80006d4 <lcd_send_cmd>
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}

080007ca <lcd_send_string>:

void lcd_send_string (char *str)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b082      	sub	sp, #8
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80007d2:	e006      	b.n	80007e2 <lcd_send_string+0x18>
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	1c5a      	adds	r2, r3, #1
 80007d8:	607a      	str	r2, [r7, #4]
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff93 	bl	8000708 <lcd_send_data>
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d1f4      	bne.n	80007d4 <lcd_send_string+0xa>
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f8:	f000 faa1 	bl	8000d3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fc:	f000 f82c 	bl	8000858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000800:	f000 f912 	bl	8000a28 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000804:	f000 f8c4 	bl	8000990 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000808:	f000 f88c 	bl	8000924 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 800080c:	480b      	ldr	r0, [pc, #44]	; (800083c <main+0x48>)
 800080e:	f001 fe11 	bl	8002434 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000812:	f002 fd0b 	bl	800322c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mainTask */
  mainTaskHandle = osThreadNew(StartMainTask, NULL, &mainTask_attributes);
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <main+0x4c>)
 8000818:	2100      	movs	r1, #0
 800081a:	480a      	ldr	r0, [pc, #40]	; (8000844 <main+0x50>)
 800081c:	f002 fd70 	bl	8003300 <osThreadNew>
 8000820:	4602      	mov	r2, r0
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <main+0x54>)
 8000824:	601a      	str	r2, [r3, #0]

  /* creation of InterfaceTask */
  InterfaceTaskHandle = osThreadNew(StartInterfaceTask, NULL, &InterfaceTask_attributes);
 8000826:	4a09      	ldr	r2, [pc, #36]	; (800084c <main+0x58>)
 8000828:	2100      	movs	r1, #0
 800082a:	4809      	ldr	r0, [pc, #36]	; (8000850 <main+0x5c>)
 800082c:	f002 fd68 	bl	8003300 <osThreadNew>
 8000830:	4602      	mov	r2, r0
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <main+0x60>)
 8000834:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000836:	f002 fd2d 	bl	8003294 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800083a:	e7fe      	b.n	800083a <main+0x46>
 800083c:	20001940 	.word	0x20001940
 8000840:	08005d8c 	.word	0x08005d8c
 8000844:	08000b25 	.word	0x08000b25
 8000848:	20001938 	.word	0x20001938
 800084c:	08005db0 	.word	0x08005db0
 8000850:	08000b37 	.word	0x08000b37
 8000854:	2000193c 	.word	0x2000193c

08000858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b0a4      	sub	sp, #144	; 0x90
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000862:	2238      	movs	r2, #56	; 0x38
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f005 fa4f 	bl	8005d0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800087c:	463b      	mov	r3, r7
 800087e:	2244      	movs	r2, #68	; 0x44
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f005 fa41 	bl	8005d0a <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000888:	2000      	movs	r0, #0
 800088a:	f000 fda3 	bl	80013d4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800088e:	2302      	movs	r3, #2
 8000890:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000892:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000896:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000898:	2340      	movs	r3, #64	; 0x40
 800089a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800089c:	2302      	movs	r3, #2
 800089e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008a0:	2302      	movs	r3, #2
 80008a2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80008a4:	2304      	movs	r3, #4
 80008a6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80008a8:	2355      	movs	r3, #85	; 0x55
 80008aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008ae:	2302      	movs	r3, #2
 80008b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008b4:	2302      	movs	r3, #2
 80008b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008ba:	2302      	movs	r3, #2
 80008bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008c4:	4618      	mov	r0, r3
 80008c6:	f000 fe39 	bl	800153c <HAL_RCC_OscConfig>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80008d0:	f000 f939 	bl	8000b46 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d4:	230f      	movs	r3, #15
 80008d6:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d8:	2303      	movs	r3, #3
 80008da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008e6:	2300      	movs	r3, #0
 80008e8:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008ea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80008ee:	2104      	movs	r1, #4
 80008f0:	4618      	mov	r0, r3
 80008f2:	f001 f93b 	bl	8001b6c <HAL_RCC_ClockConfig>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80008fc:	f000 f923 	bl	8000b46 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000900:	2302      	movs	r3, #2
 8000902:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000904:	2300      	movs	r3, #0
 8000906:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000908:	463b      	mov	r3, r7
 800090a:	4618      	mov	r0, r3
 800090c:	f001 fb4a 	bl	8001fa4 <HAL_RCCEx_PeriphCLKConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000916:	f000 f916 	bl	8000b46 <Error_Handler>
  }
}
 800091a:	bf00      	nop
 800091c:	3790      	adds	r7, #144	; 0x90
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000934:	4b14      	ldr	r3, [pc, #80]	; (8000988 <MX_TIM6_Init+0x64>)
 8000936:	4a15      	ldr	r2, [pc, #84]	; (800098c <MX_TIM6_Init+0x68>)
 8000938:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 170-1;
 800093a:	4b13      	ldr	r3, [pc, #76]	; (8000988 <MX_TIM6_Init+0x64>)
 800093c:	22a9      	movs	r2, #169	; 0xa9
 800093e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_TIM6_Init+0x64>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65534;
 8000946:	4b10      	ldr	r3, [pc, #64]	; (8000988 <MX_TIM6_Init+0x64>)
 8000948:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800094c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <MX_TIM6_Init+0x64>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000954:	480c      	ldr	r0, [pc, #48]	; (8000988 <MX_TIM6_Init+0x64>)
 8000956:	f001 fd15 	bl	8002384 <HAL_TIM_Base_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000960:	f000 f8f1 	bl	8000b46 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000964:	2300      	movs	r3, #0
 8000966:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	4619      	mov	r1, r3
 8000970:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_TIM6_Init+0x64>)
 8000972:	f001 fe51 	bl	8002618 <HAL_TIMEx_MasterConfigSynchronization>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800097c:	f000 f8e3 	bl	8000b46 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	3710      	adds	r7, #16
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20001940 	.word	0x20001940
 800098c:	40001000 	.word	0x40001000

08000990 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000994:	4b22      	ldr	r3, [pc, #136]	; (8000a20 <MX_USART2_UART_Init+0x90>)
 8000996:	4a23      	ldr	r2, [pc, #140]	; (8000a24 <MX_USART2_UART_Init+0x94>)
 8000998:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800099a:	4b21      	ldr	r3, [pc, #132]	; (8000a20 <MX_USART2_UART_Init+0x90>)
 800099c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009a2:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <MX_USART2_UART_Init+0x90>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009a8:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <MX_USART2_UART_Init+0x90>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ae:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <MX_USART2_UART_Init+0x90>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009b4:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <MX_USART2_UART_Init+0x90>)
 80009b6:	220c      	movs	r2, #12
 80009b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ba:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <MX_USART2_UART_Init+0x90>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c0:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <MX_USART2_UART_Init+0x90>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c6:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <MX_USART2_UART_Init+0x90>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009cc:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_USART2_UART_Init+0x90>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d2:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <MX_USART2_UART_Init+0x90>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009d8:	4811      	ldr	r0, [pc, #68]	; (8000a20 <MX_USART2_UART_Init+0x90>)
 80009da:	f001 fe9f 	bl	800271c <HAL_UART_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009e4:	f000 f8af 	bl	8000b46 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e8:	2100      	movs	r1, #0
 80009ea:	480d      	ldr	r0, [pc, #52]	; (8000a20 <MX_USART2_UART_Init+0x90>)
 80009ec:	f002 fb31 	bl	8003052 <HAL_UARTEx_SetTxFifoThreshold>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009f6:	f000 f8a6 	bl	8000b46 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009fa:	2100      	movs	r1, #0
 80009fc:	4808      	ldr	r0, [pc, #32]	; (8000a20 <MX_USART2_UART_Init+0x90>)
 80009fe:	f002 fb66 	bl	80030ce <HAL_UARTEx_SetRxFifoThreshold>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a08:	f000 f89d 	bl	8000b46 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a0c:	4804      	ldr	r0, [pc, #16]	; (8000a20 <MX_USART2_UART_Init+0x90>)
 8000a0e:	f002 fae7 	bl	8002fe0 <HAL_UARTEx_DisableFifoMode>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a18:	f000 f895 	bl	8000b46 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	2000198c 	.word	0x2000198c
 8000a24:	40004400 	.word	0x40004400

08000a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b088      	sub	sp, #32
 8000a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2e:	f107 030c 	add.w	r3, r7, #12
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
 8000a3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	4b36      	ldr	r3, [pc, #216]	; (8000b18 <MX_GPIO_Init+0xf0>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	4a35      	ldr	r2, [pc, #212]	; (8000b18 <MX_GPIO_Init+0xf0>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4a:	4b33      	ldr	r3, [pc, #204]	; (8000b18 <MX_GPIO_Init+0xf0>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a56:	4b30      	ldr	r3, [pc, #192]	; (8000b18 <MX_GPIO_Init+0xf0>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	4a2f      	ldr	r2, [pc, #188]	; (8000b18 <MX_GPIO_Init+0xf0>)
 8000a5c:	f043 0302 	orr.w	r3, r3, #2
 8000a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a62:	4b2d      	ldr	r3, [pc, #180]	; (8000b18 <MX_GPIO_Init+0xf0>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RS_Pin|LCD_E_Pin|LCD_D4_Pin|LCD_D5_Pin
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f241 01f3 	movw	r1, #4339	; 0x10f3
 8000a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a78:	f000 fc7c 	bl	8001374 <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a82:	4826      	ldr	r0, [pc, #152]	; (8000b1c <MX_GPIO_Init+0xf4>)
 8000a84:	f000 fc76 	bl	8001374 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RS_Pin LCD_E_Pin LCD_D4_Pin LCD_D5_Pin
                           LCD_D6_Pin LCD_D7_Pin PA12 */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_E_Pin|LCD_D4_Pin|LCD_D5_Pin
 8000a88:	f241 03f3 	movw	r3, #4339	; 0x10f3
 8000a8c:	60fb      	str	r3, [r7, #12]
                          |LCD_D6_Pin|LCD_D7_Pin|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9a:	f107 030c 	add.w	r3, r7, #12
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa4:	f000 facc 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : VOL_B_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = VOL_B_INTERRUPT_Pin;
 8000aa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aae:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <MX_GPIO_Init+0xf8>)
 8000ab0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(VOL_B_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 030c 	add.w	r3, r7, #12
 8000aba:	4619      	mov	r1, r3
 8000abc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac0:	f000 fabe 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : VOL_A_READ_Pin */
  GPIO_InitStruct.Pin = VOL_A_READ_Pin;
 8000ac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ac8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aca:	2300      	movs	r3, #0
 8000acc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(VOL_A_READ_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 030c 	add.w	r3, r7, #12
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000adc:	f000 fab0 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ae0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ae4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000af2:	f107 030c 	add.w	r3, r7, #12
 8000af6:	4619      	mov	r1, r3
 8000af8:	4808      	ldr	r0, [pc, #32]	; (8000b1c <MX_GPIO_Init+0xf4>)
 8000afa:	f000 faa1 	bl	8001040 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2105      	movs	r1, #5
 8000b02:	2017      	movs	r0, #23
 8000b04:	f000 fa67 	bl	8000fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b08:	2017      	movs	r0, #23
 8000b0a:	f000 fa7e 	bl	800100a <HAL_NVIC_EnableIRQ>

}
 8000b0e:	bf00      	nop
 8000b10:	3720      	adds	r7, #32
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	48000400 	.word	0x48000400
 8000b20:	10110000 	.word	0x10110000

08000b24 <StartMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void *argument)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	init_app();
 8000b2c:	f7ff fcf8 	bl	8000520 <init_app>
	for(;;)
	{
		tick_app();
 8000b30:	f7ff fcfc 	bl	800052c <tick_app>
 8000b34:	e7fc      	b.n	8000b30 <StartMainTask+0xc>

08000b36 <StartInterfaceTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartInterfaceTask */
void StartInterfaceTask(void *argument)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b082      	sub	sp, #8
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartInterfaceTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b3e:	2001      	movs	r0, #1
 8000b40:	f002 fc84 	bl	800344c <osDelay>
 8000b44:	e7fb      	b.n	8000b3e <StartInterfaceTask+0x8>

08000b46 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4a:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <Error_Handler+0x6>
	...

08000b50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b56:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <HAL_MspInit+0x50>)
 8000b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b5a:	4a11      	ldr	r2, [pc, #68]	; (8000ba0 <HAL_MspInit+0x50>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6613      	str	r3, [r2, #96]	; 0x60
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <HAL_MspInit+0x50>)
 8000b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <HAL_MspInit+0x50>)
 8000b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b72:	4a0b      	ldr	r2, [pc, #44]	; (8000ba0 <HAL_MspInit+0x50>)
 8000b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b78:	6593      	str	r3, [r2, #88]	; 0x58
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <HAL_MspInit+0x50>)
 8000b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	210f      	movs	r1, #15
 8000b8a:	f06f 0001 	mvn.w	r0, #1
 8000b8e:	f000 fa22 	bl	8000fd6 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b92:	f000 fcc3 	bl	800151c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <HAL_TIM_Base_MspInit+0x38>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d10b      	bne.n	8000bce <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <HAL_TIM_Base_MspInit+0x3c>)
 8000bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bba:	4a09      	ldr	r2, [pc, #36]	; (8000be0 <HAL_TIM_Base_MspInit+0x3c>)
 8000bbc:	f043 0310 	orr.w	r3, r3, #16
 8000bc0:	6593      	str	r3, [r2, #88]	; 0x58
 8000bc2:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <HAL_TIM_Base_MspInit+0x3c>)
 8000bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bc6:	f003 0310 	and.w	r3, r3, #16
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000bce:	bf00      	nop
 8000bd0:	3714      	adds	r7, #20
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	40001000 	.word	0x40001000
 8000be0:	40021000 	.word	0x40021000

08000be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a17      	ldr	r2, [pc, #92]	; (8000c60 <HAL_UART_MspInit+0x7c>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d128      	bne.n	8000c58 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c06:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <HAL_UART_MspInit+0x80>)
 8000c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0a:	4a16      	ldr	r2, [pc, #88]	; (8000c64 <HAL_UART_MspInit+0x80>)
 8000c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c10:	6593      	str	r3, [r2, #88]	; 0x58
 8000c12:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <HAL_UART_MspInit+0x80>)
 8000c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <HAL_UART_MspInit+0x80>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c22:	4a10      	ldr	r2, [pc, #64]	; (8000c64 <HAL_UART_MspInit+0x80>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <HAL_UART_MspInit+0x80>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000c36:	230c      	movs	r3, #12
 8000c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c46:	2307      	movs	r3, #7
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4619      	mov	r1, r3
 8000c50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c54:	f000 f9f4 	bl	8001040 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c58:	bf00      	nop
 8000c5a:	3728      	adds	r7, #40	; 0x28
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40004400 	.word	0x40004400
 8000c64:	40021000 	.word	0x40021000

08000c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <NMI_Handler+0x4>

08000c6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c72:	e7fe      	b.n	8000c72 <HardFault_Handler+0x4>

08000c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <MemManage_Handler+0x4>

08000c7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <BusFault_Handler+0x4>

08000c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <UsageFault_Handler+0x4>

08000c86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c98:	f000 f8a4 	bl	8000de4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c9c:	f003 ffc8 	bl	8004c30 <xTaskGetSchedulerState>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d001      	beq.n	8000caa <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000ca6:	f004 fd9f 	bl	80057e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}

08000cae <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000cb2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000cb6:	f000 fb75 	bl	80013a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <SystemInit+0x28>)
 8000cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cca:	4a07      	ldr	r2, [pc, #28]	; (8000ce8 <SystemInit+0x28>)
 8000ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cd4:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <SystemInit+0x28>)
 8000cd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cda:	609a      	str	r2, [r3, #8]
#endif
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cec:	480d      	ldr	r0, [pc, #52]	; (8000d24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cf0:	480d      	ldr	r0, [pc, #52]	; (8000d28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cf2:	490e      	ldr	r1, [pc, #56]	; (8000d2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cf4:	4a0e      	ldr	r2, [pc, #56]	; (8000d30 <LoopForever+0xe>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000cf8:	e002      	b.n	8000d00 <LoopCopyDataInit>

08000cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfe:	3304      	adds	r3, #4

08000d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d04:	d3f9      	bcc.n	8000cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d06:	4a0b      	ldr	r2, [pc, #44]	; (8000d34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d08:	4c0b      	ldr	r4, [pc, #44]	; (8000d38 <LoopForever+0x16>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d0c:	e001      	b.n	8000d12 <LoopFillZerobss>

08000d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d10:	3204      	adds	r2, #4

08000d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d14:	d3fb      	bcc.n	8000d0e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d16:	f7ff ffd3 	bl	8000cc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d1a:	f004 ffc7 	bl	8005cac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d1e:	f7ff fd69 	bl	80007f4 <main>

08000d22 <LoopForever>:

LoopForever:
    b LoopForever
 8000d22:	e7fe      	b.n	8000d22 <LoopForever>
  ldr   r0, =_estack
 8000d24:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d2c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d30:	08005e14 	.word	0x08005e14
  ldr r2, =_sbss
 8000d34:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d38:	20001a5c 	.word	0x20001a5c

08000d3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d3c:	e7fe      	b.n	8000d3c <ADC1_2_IRQHandler>

08000d3e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d44:	2300      	movs	r3, #0
 8000d46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d48:	2003      	movs	r0, #3
 8000d4a:	f000 f939 	bl	8000fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d4e:	200f      	movs	r0, #15
 8000d50:	f000 f80e 	bl	8000d70 <HAL_InitTick>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d002      	beq.n	8000d60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	71fb      	strb	r3, [r7, #7]
 8000d5e:	e001      	b.n	8000d64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d60:	f7ff fef6 	bl	8000b50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d64:	79fb      	ldrb	r3, [r7, #7]

}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d7c:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <HAL_InitTick+0x68>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d022      	beq.n	8000dca <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d84:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <HAL_InitTick+0x6c>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <HAL_InitTick+0x68>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d90:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f000 f944 	bl	8001026 <HAL_SYSTICK_Config>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d10f      	bne.n	8000dc4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b0f      	cmp	r3, #15
 8000da8:	d809      	bhi.n	8000dbe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000daa:	2200      	movs	r2, #0
 8000dac:	6879      	ldr	r1, [r7, #4]
 8000dae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000db2:	f000 f910 	bl	8000fd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000db6:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <HAL_InitTick+0x70>)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6013      	str	r3, [r2, #0]
 8000dbc:	e007      	b.n	8000dce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	73fb      	strb	r3, [r7, #15]
 8000dc2:	e004      	b.n	8000dce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	73fb      	strb	r3, [r7, #15]
 8000dc8:	e001      	b.n	8000dce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3710      	adds	r7, #16
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	20000000 	.word	0x20000000
 8000de0:	20000004 	.word	0x20000004

08000de4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <HAL_IncTick+0x1c>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <HAL_IncTick+0x20>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4413      	add	r3, r2
 8000df2:	4a03      	ldr	r2, [pc, #12]	; (8000e00 <HAL_IncTick+0x1c>)
 8000df4:	6013      	str	r3, [r2, #0]
}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	20001a18 	.word	0x20001a18
 8000e04:	20000008 	.word	0x20000008

08000e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e0c:	4b03      	ldr	r3, [pc, #12]	; (8000e1c <HAL_GetTick+0x14>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20001a18 	.word	0x20001a18

08000e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <__NVIC_SetPriorityGrouping+0x44>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e52:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <__NVIC_SetPriorityGrouping+0x44>)
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	60d3      	str	r3, [r2, #12]
}
 8000e58:	bf00      	nop
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e6c:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <__NVIC_GetPriorityGrouping+0x18>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	0a1b      	lsrs	r3, r3, #8
 8000e72:	f003 0307 	and.w	r3, r3, #7
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	db0b      	blt.n	8000eae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	f003 021f 	and.w	r2, r3, #31
 8000e9c:	4907      	ldr	r1, [pc, #28]	; (8000ebc <__NVIC_EnableIRQ+0x38>)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	095b      	lsrs	r3, r3, #5
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000e100 	.word	0xe000e100

08000ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	6039      	str	r1, [r7, #0]
 8000eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	db0a      	blt.n	8000eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	490c      	ldr	r1, [pc, #48]	; (8000f0c <__NVIC_SetPriority+0x4c>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	0112      	lsls	r2, r2, #4
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee8:	e00a      	b.n	8000f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4908      	ldr	r1, [pc, #32]	; (8000f10 <__NVIC_SetPriority+0x50>)
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	f003 030f 	and.w	r3, r3, #15
 8000ef6:	3b04      	subs	r3, #4
 8000ef8:	0112      	lsls	r2, r2, #4
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	440b      	add	r3, r1
 8000efe:	761a      	strb	r2, [r3, #24]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000e100 	.word	0xe000e100
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b089      	sub	sp, #36	; 0x24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f1c3 0307 	rsb	r3, r3, #7
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	bf28      	it	cs
 8000f32:	2304      	movcs	r3, #4
 8000f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3304      	adds	r3, #4
 8000f3a:	2b06      	cmp	r3, #6
 8000f3c:	d902      	bls.n	8000f44 <NVIC_EncodePriority+0x30>
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3b03      	subs	r3, #3
 8000f42:	e000      	b.n	8000f46 <NVIC_EncodePriority+0x32>
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43da      	mvns	r2, r3
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	401a      	ands	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa01 f303 	lsl.w	r3, r1, r3
 8000f66:	43d9      	mvns	r1, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	4313      	orrs	r3, r2
         );
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3724      	adds	r7, #36	; 0x24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f8c:	d301      	bcc.n	8000f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e00f      	b.n	8000fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f92:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <SysTick_Config+0x40>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9a:	210f      	movs	r1, #15
 8000f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fa0:	f7ff ff8e 	bl	8000ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <SysTick_Config+0x40>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000faa:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <SysTick_Config+0x40>)
 8000fac:	2207      	movs	r2, #7
 8000fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	e000e010 	.word	0xe000e010

08000fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff ff29 	bl	8000e20 <__NVIC_SetPriorityGrouping>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b086      	sub	sp, #24
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	4603      	mov	r3, r0
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
 8000fe2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe4:	f7ff ff40 	bl	8000e68 <__NVIC_GetPriorityGrouping>
 8000fe8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	68b9      	ldr	r1, [r7, #8]
 8000fee:	6978      	ldr	r0, [r7, #20]
 8000ff0:	f7ff ff90 	bl	8000f14 <NVIC_EncodePriority>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff5f 	bl	8000ec0 <__NVIC_SetPriority>
}
 8001002:	bf00      	nop
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	4603      	mov	r3, r0
 8001012:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff33 	bl	8000e84 <__NVIC_EnableIRQ>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff ffa4 	bl	8000f7c <SysTick_Config>
 8001034:	4603      	mov	r3, r0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001040:	b480      	push	{r7}
 8001042:	b087      	sub	sp, #28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800104e:	e15a      	b.n	8001306 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	2101      	movs	r1, #1
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	fa01 f303 	lsl.w	r3, r1, r3
 800105c:	4013      	ands	r3, r2
 800105e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2b00      	cmp	r3, #0
 8001064:	f000 814c 	beq.w	8001300 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d00b      	beq.n	8001088 <HAL_GPIO_Init+0x48>
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	2b02      	cmp	r3, #2
 8001076:	d007      	beq.n	8001088 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800107c:	2b11      	cmp	r3, #17
 800107e:	d003      	beq.n	8001088 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	2b12      	cmp	r3, #18
 8001086:	d130      	bne.n	80010ea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	2203      	movs	r2, #3
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4013      	ands	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	68da      	ldr	r2, [r3, #12]
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010be:	2201      	movs	r2, #1
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	091b      	lsrs	r3, r3, #4
 80010d4:	f003 0201 	and.w	r2, r3, #1
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	2203      	movs	r2, #3
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	689a      	ldr	r2, [r3, #8]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2b02      	cmp	r3, #2
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0xea>
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	2b12      	cmp	r3, #18
 8001128:	d123      	bne.n	8001172 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	08da      	lsrs	r2, r3, #3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3208      	adds	r2, #8
 8001132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001136:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	220f      	movs	r2, #15
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	691a      	ldr	r2, [r3, #16]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	08da      	lsrs	r2, r3, #3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3208      	adds	r2, #8
 800116c:	6939      	ldr	r1, [r7, #16]
 800116e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	2203      	movs	r2, #3
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4013      	ands	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f003 0203 	and.w	r2, r3, #3
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 80a6 	beq.w	8001300 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b4:	4b5b      	ldr	r3, [pc, #364]	; (8001324 <HAL_GPIO_Init+0x2e4>)
 80011b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011b8:	4a5a      	ldr	r2, [pc, #360]	; (8001324 <HAL_GPIO_Init+0x2e4>)
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	6613      	str	r3, [r2, #96]	; 0x60
 80011c0:	4b58      	ldr	r3, [pc, #352]	; (8001324 <HAL_GPIO_Init+0x2e4>)
 80011c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011cc:	4a56      	ldr	r2, [pc, #344]	; (8001328 <HAL_GPIO_Init+0x2e8>)
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	089b      	lsrs	r3, r3, #2
 80011d2:	3302      	adds	r3, #2
 80011d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	220f      	movs	r2, #15
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011f6:	d01f      	beq.n	8001238 <HAL_GPIO_Init+0x1f8>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a4c      	ldr	r2, [pc, #304]	; (800132c <HAL_GPIO_Init+0x2ec>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d019      	beq.n	8001234 <HAL_GPIO_Init+0x1f4>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a4b      	ldr	r2, [pc, #300]	; (8001330 <HAL_GPIO_Init+0x2f0>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d013      	beq.n	8001230 <HAL_GPIO_Init+0x1f0>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a4a      	ldr	r2, [pc, #296]	; (8001334 <HAL_GPIO_Init+0x2f4>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d00d      	beq.n	800122c <HAL_GPIO_Init+0x1ec>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a49      	ldr	r2, [pc, #292]	; (8001338 <HAL_GPIO_Init+0x2f8>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d007      	beq.n	8001228 <HAL_GPIO_Init+0x1e8>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a48      	ldr	r2, [pc, #288]	; (800133c <HAL_GPIO_Init+0x2fc>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d101      	bne.n	8001224 <HAL_GPIO_Init+0x1e4>
 8001220:	2305      	movs	r3, #5
 8001222:	e00a      	b.n	800123a <HAL_GPIO_Init+0x1fa>
 8001224:	2306      	movs	r3, #6
 8001226:	e008      	b.n	800123a <HAL_GPIO_Init+0x1fa>
 8001228:	2304      	movs	r3, #4
 800122a:	e006      	b.n	800123a <HAL_GPIO_Init+0x1fa>
 800122c:	2303      	movs	r3, #3
 800122e:	e004      	b.n	800123a <HAL_GPIO_Init+0x1fa>
 8001230:	2302      	movs	r3, #2
 8001232:	e002      	b.n	800123a <HAL_GPIO_Init+0x1fa>
 8001234:	2301      	movs	r3, #1
 8001236:	e000      	b.n	800123a <HAL_GPIO_Init+0x1fa>
 8001238:	2300      	movs	r3, #0
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	f002 0203 	and.w	r2, r2, #3
 8001240:	0092      	lsls	r2, r2, #2
 8001242:	4093      	lsls	r3, r2
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	4313      	orrs	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800124a:	4937      	ldr	r1, [pc, #220]	; (8001328 <HAL_GPIO_Init+0x2e8>)
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	089b      	lsrs	r3, r3, #2
 8001250:	3302      	adds	r3, #2
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001258:	4b39      	ldr	r3, [pc, #228]	; (8001340 <HAL_GPIO_Init+0x300>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	43db      	mvns	r3, r3
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800127c:	4a30      	ldr	r2, [pc, #192]	; (8001340 <HAL_GPIO_Init+0x300>)
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001282:	4b2f      	ldr	r3, [pc, #188]	; (8001340 <HAL_GPIO_Init+0x300>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	43db      	mvns	r3, r3
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012a6:	4a26      	ldr	r2, [pc, #152]	; (8001340 <HAL_GPIO_Init+0x300>)
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012ac:	4b24      	ldr	r3, [pc, #144]	; (8001340 <HAL_GPIO_Init+0x300>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012d0:	4a1b      	ldr	r2, [pc, #108]	; (8001340 <HAL_GPIO_Init+0x300>)
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012d6:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <HAL_GPIO_Init+0x300>)
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	43db      	mvns	r3, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4013      	ands	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012fa:	4a11      	ldr	r2, [pc, #68]	; (8001340 <HAL_GPIO_Init+0x300>)
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	3301      	adds	r3, #1
 8001304:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	fa22 f303 	lsr.w	r3, r2, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	f47f ae9d 	bne.w	8001050 <HAL_GPIO_Init+0x10>
  }
}
 8001316:	bf00      	nop
 8001318:	371c      	adds	r7, #28
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	40021000 	.word	0x40021000
 8001328:	40010000 	.word	0x40010000
 800132c:	48000400 	.word	0x48000400
 8001330:	48000800 	.word	0x48000800
 8001334:	48000c00 	.word	0x48000c00
 8001338:	48001000 	.word	0x48001000
 800133c:	48001400 	.word	0x48001400
 8001340:	40010400 	.word	0x40010400

08001344 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	460b      	mov	r3, r1
 800134e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	691a      	ldr	r2, [r3, #16]
 8001354:	887b      	ldrh	r3, [r7, #2]
 8001356:	4013      	ands	r3, r2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d002      	beq.n	8001362 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800135c:	2301      	movs	r3, #1
 800135e:	73fb      	strb	r3, [r7, #15]
 8001360:	e001      	b.n	8001366 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001362:	2300      	movs	r3, #0
 8001364:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001366:	7bfb      	ldrb	r3, [r7, #15]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	807b      	strh	r3, [r7, #2]
 8001380:	4613      	mov	r3, r2
 8001382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001384:	787b      	ldrb	r3, [r7, #1]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800138a:	887a      	ldrh	r2, [r7, #2]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001390:	e002      	b.n	8001398 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001392:	887a      	ldrh	r2, [r7, #2]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013ae:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013b0:	695a      	ldr	r2, [r3, #20]
 80013b2:	88fb      	ldrh	r3, [r7, #6]
 80013b4:	4013      	ands	r3, r2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d006      	beq.n	80013c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013ba:	4a05      	ldr	r2, [pc, #20]	; (80013d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013bc:	88fb      	ldrh	r3, [r7, #6]
 80013be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013c0:	88fb      	ldrh	r3, [r7, #6]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff f8e6 	bl	8000594 <HAL_GPIO_EXTI_Callback>
  }
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40010400 	.word	0x40010400

080013d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d141      	bne.n	8001466 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013e2:	4b4b      	ldr	r3, [pc, #300]	; (8001510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ee:	d131      	bne.n	8001454 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013f0:	4b47      	ldr	r3, [pc, #284]	; (8001510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013f6:	4a46      	ldr	r2, [pc, #280]	; (8001510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001400:	4b43      	ldr	r3, [pc, #268]	; (8001510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001408:	4a41      	ldr	r2, [pc, #260]	; (8001510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800140a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800140e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001410:	4b40      	ldr	r3, [pc, #256]	; (8001514 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2232      	movs	r2, #50	; 0x32
 8001416:	fb02 f303 	mul.w	r3, r2, r3
 800141a:	4a3f      	ldr	r2, [pc, #252]	; (8001518 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800141c:	fba2 2303 	umull	r2, r3, r2, r3
 8001420:	0c9b      	lsrs	r3, r3, #18
 8001422:	3301      	adds	r3, #1
 8001424:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001426:	e002      	b.n	800142e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	3b01      	subs	r3, #1
 800142c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800142e:	4b38      	ldr	r3, [pc, #224]	; (8001510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800143a:	d102      	bne.n	8001442 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f2      	bne.n	8001428 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001442:	4b33      	ldr	r3, [pc, #204]	; (8001510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800144a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800144e:	d158      	bne.n	8001502 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e057      	b.n	8001504 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001454:	4b2e      	ldr	r3, [pc, #184]	; (8001510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001456:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800145a:	4a2d      	ldr	r2, [pc, #180]	; (8001510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800145c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001460:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001464:	e04d      	b.n	8001502 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800146c:	d141      	bne.n	80014f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800146e:	4b28      	ldr	r3, [pc, #160]	; (8001510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800147a:	d131      	bne.n	80014e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800147c:	4b24      	ldr	r3, [pc, #144]	; (8001510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800147e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001482:	4a23      	ldr	r2, [pc, #140]	; (8001510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001488:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800148c:	4b20      	ldr	r3, [pc, #128]	; (8001510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001494:	4a1e      	ldr	r2, [pc, #120]	; (8001510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001496:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800149a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800149c:	4b1d      	ldr	r3, [pc, #116]	; (8001514 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2232      	movs	r2, #50	; 0x32
 80014a2:	fb02 f303 	mul.w	r3, r2, r3
 80014a6:	4a1c      	ldr	r2, [pc, #112]	; (8001518 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014a8:	fba2 2303 	umull	r2, r3, r2, r3
 80014ac:	0c9b      	lsrs	r3, r3, #18
 80014ae:	3301      	adds	r3, #1
 80014b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014b2:	e002      	b.n	80014ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014c6:	d102      	bne.n	80014ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1f2      	bne.n	80014b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014da:	d112      	bne.n	8001502 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e011      	b.n	8001504 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014e0:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014e6:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80014f0:	e007      	b.n	8001502 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014f2:	4b07      	ldr	r3, [pc, #28]	; (8001510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014fa:	4a05      	ldr	r2, [pc, #20]	; (8001510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001500:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	40007000 	.word	0x40007000
 8001514:	20000000 	.word	0x20000000
 8001518:	431bde83 	.word	0x431bde83

0800151c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	4a04      	ldr	r2, [pc, #16]	; (8001538 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001526:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800152a:	6093      	str	r3, [r2, #8]
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	40007000 	.word	0x40007000

0800153c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b088      	sub	sp, #32
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e308      	b.n	8001b60 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	2b00      	cmp	r3, #0
 8001558:	d075      	beq.n	8001646 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800155a:	4ba3      	ldr	r3, [pc, #652]	; (80017e8 <HAL_RCC_OscConfig+0x2ac>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 030c 	and.w	r3, r3, #12
 8001562:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001564:	4ba0      	ldr	r3, [pc, #640]	; (80017e8 <HAL_RCC_OscConfig+0x2ac>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	2b0c      	cmp	r3, #12
 8001572:	d102      	bne.n	800157a <HAL_RCC_OscConfig+0x3e>
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	2b03      	cmp	r3, #3
 8001578:	d002      	beq.n	8001580 <HAL_RCC_OscConfig+0x44>
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	2b08      	cmp	r3, #8
 800157e:	d10b      	bne.n	8001598 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001580:	4b99      	ldr	r3, [pc, #612]	; (80017e8 <HAL_RCC_OscConfig+0x2ac>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d05b      	beq.n	8001644 <HAL_RCC_OscConfig+0x108>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d157      	bne.n	8001644 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e2e3      	b.n	8001b60 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015a0:	d106      	bne.n	80015b0 <HAL_RCC_OscConfig+0x74>
 80015a2:	4b91      	ldr	r3, [pc, #580]	; (80017e8 <HAL_RCC_OscConfig+0x2ac>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a90      	ldr	r2, [pc, #576]	; (80017e8 <HAL_RCC_OscConfig+0x2ac>)
 80015a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	e01d      	b.n	80015ec <HAL_RCC_OscConfig+0xb0>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015b8:	d10c      	bne.n	80015d4 <HAL_RCC_OscConfig+0x98>
 80015ba:	4b8b      	ldr	r3, [pc, #556]	; (80017e8 <HAL_RCC_OscConfig+0x2ac>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a8a      	ldr	r2, [pc, #552]	; (80017e8 <HAL_RCC_OscConfig+0x2ac>)
 80015c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	4b88      	ldr	r3, [pc, #544]	; (80017e8 <HAL_RCC_OscConfig+0x2ac>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a87      	ldr	r2, [pc, #540]	; (80017e8 <HAL_RCC_OscConfig+0x2ac>)
 80015cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	e00b      	b.n	80015ec <HAL_RCC_OscConfig+0xb0>
 80015d4:	4b84      	ldr	r3, [pc, #528]	; (80017e8 <HAL_RCC_OscConfig+0x2ac>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a83      	ldr	r2, [pc, #524]	; (80017e8 <HAL_RCC_OscConfig+0x2ac>)
 80015da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015de:	6013      	str	r3, [r2, #0]
 80015e0:	4b81      	ldr	r3, [pc, #516]	; (80017e8 <HAL_RCC_OscConfig+0x2ac>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a80      	ldr	r2, [pc, #512]	; (80017e8 <HAL_RCC_OscConfig+0x2ac>)
 80015e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d013      	beq.n	800161c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f4:	f7ff fc08 	bl	8000e08 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015fc:	f7ff fc04 	bl	8000e08 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b64      	cmp	r3, #100	; 0x64
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e2a8      	b.n	8001b60 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800160e:	4b76      	ldr	r3, [pc, #472]	; (80017e8 <HAL_RCC_OscConfig+0x2ac>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0f0      	beq.n	80015fc <HAL_RCC_OscConfig+0xc0>
 800161a:	e014      	b.n	8001646 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161c:	f7ff fbf4 	bl	8000e08 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001624:	f7ff fbf0 	bl	8000e08 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b64      	cmp	r3, #100	; 0x64
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e294      	b.n	8001b60 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001636:	4b6c      	ldr	r3, [pc, #432]	; (80017e8 <HAL_RCC_OscConfig+0x2ac>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f0      	bne.n	8001624 <HAL_RCC_OscConfig+0xe8>
 8001642:	e000      	b.n	8001646 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d075      	beq.n	800173e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001652:	4b65      	ldr	r3, [pc, #404]	; (80017e8 <HAL_RCC_OscConfig+0x2ac>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 030c 	and.w	r3, r3, #12
 800165a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800165c:	4b62      	ldr	r3, [pc, #392]	; (80017e8 <HAL_RCC_OscConfig+0x2ac>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	2b0c      	cmp	r3, #12
 800166a:	d102      	bne.n	8001672 <HAL_RCC_OscConfig+0x136>
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	2b02      	cmp	r3, #2
 8001670:	d002      	beq.n	8001678 <HAL_RCC_OscConfig+0x13c>
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	2b04      	cmp	r3, #4
 8001676:	d11f      	bne.n	80016b8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001678:	4b5b      	ldr	r3, [pc, #364]	; (80017e8 <HAL_RCC_OscConfig+0x2ac>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001680:	2b00      	cmp	r3, #0
 8001682:	d005      	beq.n	8001690 <HAL_RCC_OscConfig+0x154>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e267      	b.n	8001b60 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001690:	4b55      	ldr	r3, [pc, #340]	; (80017e8 <HAL_RCC_OscConfig+0x2ac>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	061b      	lsls	r3, r3, #24
 800169e:	4952      	ldr	r1, [pc, #328]	; (80017e8 <HAL_RCC_OscConfig+0x2ac>)
 80016a0:	4313      	orrs	r3, r2
 80016a2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80016a4:	4b51      	ldr	r3, [pc, #324]	; (80017ec <HAL_RCC_OscConfig+0x2b0>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fb61 	bl	8000d70 <HAL_InitTick>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d043      	beq.n	800173c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e253      	b.n	8001b60 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d023      	beq.n	8001708 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016c0:	4b49      	ldr	r3, [pc, #292]	; (80017e8 <HAL_RCC_OscConfig+0x2ac>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a48      	ldr	r2, [pc, #288]	; (80017e8 <HAL_RCC_OscConfig+0x2ac>)
 80016c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016cc:	f7ff fb9c 	bl	8000e08 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d4:	f7ff fb98 	bl	8000e08 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e23c      	b.n	8001b60 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016e6:	4b40      	ldr	r3, [pc, #256]	; (80017e8 <HAL_RCC_OscConfig+0x2ac>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f0      	beq.n	80016d4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f2:	4b3d      	ldr	r3, [pc, #244]	; (80017e8 <HAL_RCC_OscConfig+0x2ac>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	061b      	lsls	r3, r3, #24
 8001700:	4939      	ldr	r1, [pc, #228]	; (80017e8 <HAL_RCC_OscConfig+0x2ac>)
 8001702:	4313      	orrs	r3, r2
 8001704:	604b      	str	r3, [r1, #4]
 8001706:	e01a      	b.n	800173e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001708:	4b37      	ldr	r3, [pc, #220]	; (80017e8 <HAL_RCC_OscConfig+0x2ac>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a36      	ldr	r2, [pc, #216]	; (80017e8 <HAL_RCC_OscConfig+0x2ac>)
 800170e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001712:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001714:	f7ff fb78 	bl	8000e08 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800171c:	f7ff fb74 	bl	8000e08 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e218      	b.n	8001b60 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800172e:	4b2e      	ldr	r3, [pc, #184]	; (80017e8 <HAL_RCC_OscConfig+0x2ac>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f0      	bne.n	800171c <HAL_RCC_OscConfig+0x1e0>
 800173a:	e000      	b.n	800173e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800173c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	2b00      	cmp	r3, #0
 8001748:	d03c      	beq.n	80017c4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d01c      	beq.n	800178c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001752:	4b25      	ldr	r3, [pc, #148]	; (80017e8 <HAL_RCC_OscConfig+0x2ac>)
 8001754:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001758:	4a23      	ldr	r2, [pc, #140]	; (80017e8 <HAL_RCC_OscConfig+0x2ac>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001762:	f7ff fb51 	bl	8000e08 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800176a:	f7ff fb4d 	bl	8000e08 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e1f1      	b.n	8001b60 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800177c:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <HAL_RCC_OscConfig+0x2ac>)
 800177e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0ef      	beq.n	800176a <HAL_RCC_OscConfig+0x22e>
 800178a:	e01b      	b.n	80017c4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800178c:	4b16      	ldr	r3, [pc, #88]	; (80017e8 <HAL_RCC_OscConfig+0x2ac>)
 800178e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001792:	4a15      	ldr	r2, [pc, #84]	; (80017e8 <HAL_RCC_OscConfig+0x2ac>)
 8001794:	f023 0301 	bic.w	r3, r3, #1
 8001798:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179c:	f7ff fb34 	bl	8000e08 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a4:	f7ff fb30 	bl	8000e08 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e1d4      	b.n	8001b60 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017b6:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <HAL_RCC_OscConfig+0x2ac>)
 80017b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1ef      	bne.n	80017a4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 80ab 	beq.w	8001928 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017d2:	2300      	movs	r3, #0
 80017d4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80017d6:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <HAL_RCC_OscConfig+0x2ac>)
 80017d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d106      	bne.n	80017f0 <HAL_RCC_OscConfig+0x2b4>
 80017e2:	2301      	movs	r3, #1
 80017e4:	e005      	b.n	80017f2 <HAL_RCC_OscConfig+0x2b6>
 80017e6:	bf00      	nop
 80017e8:	40021000 	.word	0x40021000
 80017ec:	20000004 	.word	0x20000004
 80017f0:	2300      	movs	r3, #0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00d      	beq.n	8001812 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017f6:	4baf      	ldr	r3, [pc, #700]	; (8001ab4 <HAL_RCC_OscConfig+0x578>)
 80017f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fa:	4aae      	ldr	r2, [pc, #696]	; (8001ab4 <HAL_RCC_OscConfig+0x578>)
 80017fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001800:	6593      	str	r3, [r2, #88]	; 0x58
 8001802:	4bac      	ldr	r3, [pc, #688]	; (8001ab4 <HAL_RCC_OscConfig+0x578>)
 8001804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800180e:	2301      	movs	r3, #1
 8001810:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001812:	4ba9      	ldr	r3, [pc, #676]	; (8001ab8 <HAL_RCC_OscConfig+0x57c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181a:	2b00      	cmp	r3, #0
 800181c:	d118      	bne.n	8001850 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800181e:	4ba6      	ldr	r3, [pc, #664]	; (8001ab8 <HAL_RCC_OscConfig+0x57c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4aa5      	ldr	r2, [pc, #660]	; (8001ab8 <HAL_RCC_OscConfig+0x57c>)
 8001824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001828:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800182a:	f7ff faed 	bl	8000e08 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001832:	f7ff fae9 	bl	8000e08 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e18d      	b.n	8001b60 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001844:	4b9c      	ldr	r3, [pc, #624]	; (8001ab8 <HAL_RCC_OscConfig+0x57c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0f0      	beq.n	8001832 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d108      	bne.n	800186a <HAL_RCC_OscConfig+0x32e>
 8001858:	4b96      	ldr	r3, [pc, #600]	; (8001ab4 <HAL_RCC_OscConfig+0x578>)
 800185a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800185e:	4a95      	ldr	r2, [pc, #596]	; (8001ab4 <HAL_RCC_OscConfig+0x578>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001868:	e024      	b.n	80018b4 <HAL_RCC_OscConfig+0x378>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	2b05      	cmp	r3, #5
 8001870:	d110      	bne.n	8001894 <HAL_RCC_OscConfig+0x358>
 8001872:	4b90      	ldr	r3, [pc, #576]	; (8001ab4 <HAL_RCC_OscConfig+0x578>)
 8001874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001878:	4a8e      	ldr	r2, [pc, #568]	; (8001ab4 <HAL_RCC_OscConfig+0x578>)
 800187a:	f043 0304 	orr.w	r3, r3, #4
 800187e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001882:	4b8c      	ldr	r3, [pc, #560]	; (8001ab4 <HAL_RCC_OscConfig+0x578>)
 8001884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001888:	4a8a      	ldr	r2, [pc, #552]	; (8001ab4 <HAL_RCC_OscConfig+0x578>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001892:	e00f      	b.n	80018b4 <HAL_RCC_OscConfig+0x378>
 8001894:	4b87      	ldr	r3, [pc, #540]	; (8001ab4 <HAL_RCC_OscConfig+0x578>)
 8001896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800189a:	4a86      	ldr	r2, [pc, #536]	; (8001ab4 <HAL_RCC_OscConfig+0x578>)
 800189c:	f023 0301 	bic.w	r3, r3, #1
 80018a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018a4:	4b83      	ldr	r3, [pc, #524]	; (8001ab4 <HAL_RCC_OscConfig+0x578>)
 80018a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018aa:	4a82      	ldr	r2, [pc, #520]	; (8001ab4 <HAL_RCC_OscConfig+0x578>)
 80018ac:	f023 0304 	bic.w	r3, r3, #4
 80018b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d016      	beq.n	80018ea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018bc:	f7ff faa4 	bl	8000e08 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018c2:	e00a      	b.n	80018da <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018c4:	f7ff faa0 	bl	8000e08 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e142      	b.n	8001b60 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018da:	4b76      	ldr	r3, [pc, #472]	; (8001ab4 <HAL_RCC_OscConfig+0x578>)
 80018dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0ed      	beq.n	80018c4 <HAL_RCC_OscConfig+0x388>
 80018e8:	e015      	b.n	8001916 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ea:	f7ff fa8d 	bl	8000e08 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018f0:	e00a      	b.n	8001908 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f2:	f7ff fa89 	bl	8000e08 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001900:	4293      	cmp	r3, r2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e12b      	b.n	8001b60 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001908:	4b6a      	ldr	r3, [pc, #424]	; (8001ab4 <HAL_RCC_OscConfig+0x578>)
 800190a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1ed      	bne.n	80018f2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001916:	7ffb      	ldrb	r3, [r7, #31]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d105      	bne.n	8001928 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800191c:	4b65      	ldr	r3, [pc, #404]	; (8001ab4 <HAL_RCC_OscConfig+0x578>)
 800191e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001920:	4a64      	ldr	r2, [pc, #400]	; (8001ab4 <HAL_RCC_OscConfig+0x578>)
 8001922:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001926:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0320 	and.w	r3, r3, #32
 8001930:	2b00      	cmp	r3, #0
 8001932:	d03c      	beq.n	80019ae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d01c      	beq.n	8001976 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800193c:	4b5d      	ldr	r3, [pc, #372]	; (8001ab4 <HAL_RCC_OscConfig+0x578>)
 800193e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001942:	4a5c      	ldr	r2, [pc, #368]	; (8001ab4 <HAL_RCC_OscConfig+0x578>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194c:	f7ff fa5c 	bl	8000e08 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001954:	f7ff fa58 	bl	8000e08 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e0fc      	b.n	8001b60 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001966:	4b53      	ldr	r3, [pc, #332]	; (8001ab4 <HAL_RCC_OscConfig+0x578>)
 8001968:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d0ef      	beq.n	8001954 <HAL_RCC_OscConfig+0x418>
 8001974:	e01b      	b.n	80019ae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001976:	4b4f      	ldr	r3, [pc, #316]	; (8001ab4 <HAL_RCC_OscConfig+0x578>)
 8001978:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800197c:	4a4d      	ldr	r2, [pc, #308]	; (8001ab4 <HAL_RCC_OscConfig+0x578>)
 800197e:	f023 0301 	bic.w	r3, r3, #1
 8001982:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001986:	f7ff fa3f 	bl	8000e08 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800198e:	f7ff fa3b 	bl	8000e08 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e0df      	b.n	8001b60 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019a0:	4b44      	ldr	r3, [pc, #272]	; (8001ab4 <HAL_RCC_OscConfig+0x578>)
 80019a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1ef      	bne.n	800198e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 80d3 	beq.w	8001b5e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019b8:	4b3e      	ldr	r3, [pc, #248]	; (8001ab4 <HAL_RCC_OscConfig+0x578>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f003 030c 	and.w	r3, r3, #12
 80019c0:	2b0c      	cmp	r3, #12
 80019c2:	f000 808d 	beq.w	8001ae0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d15a      	bne.n	8001a84 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ce:	4b39      	ldr	r3, [pc, #228]	; (8001ab4 <HAL_RCC_OscConfig+0x578>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a38      	ldr	r2, [pc, #224]	; (8001ab4 <HAL_RCC_OscConfig+0x578>)
 80019d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019da:	f7ff fa15 	bl	8000e08 <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e2:	f7ff fa11 	bl	8000e08 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e0b5      	b.n	8001b60 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019f4:	4b2f      	ldr	r3, [pc, #188]	; (8001ab4 <HAL_RCC_OscConfig+0x578>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1f0      	bne.n	80019e2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a00:	4b2c      	ldr	r3, [pc, #176]	; (8001ab4 <HAL_RCC_OscConfig+0x578>)
 8001a02:	68da      	ldr	r2, [r3, #12]
 8001a04:	4b2d      	ldr	r3, [pc, #180]	; (8001abc <HAL_RCC_OscConfig+0x580>)
 8001a06:	4013      	ands	r3, r2
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	6a11      	ldr	r1, [r2, #32]
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a10:	3a01      	subs	r2, #1
 8001a12:	0112      	lsls	r2, r2, #4
 8001a14:	4311      	orrs	r1, r2
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001a1a:	0212      	lsls	r2, r2, #8
 8001a1c:	4311      	orrs	r1, r2
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a22:	0852      	lsrs	r2, r2, #1
 8001a24:	3a01      	subs	r2, #1
 8001a26:	0552      	lsls	r2, r2, #21
 8001a28:	4311      	orrs	r1, r2
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a2e:	0852      	lsrs	r2, r2, #1
 8001a30:	3a01      	subs	r2, #1
 8001a32:	0652      	lsls	r2, r2, #25
 8001a34:	4311      	orrs	r1, r2
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a3a:	06d2      	lsls	r2, r2, #27
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	491d      	ldr	r1, [pc, #116]	; (8001ab4 <HAL_RCC_OscConfig+0x578>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a44:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <HAL_RCC_OscConfig+0x578>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a1a      	ldr	r2, [pc, #104]	; (8001ab4 <HAL_RCC_OscConfig+0x578>)
 8001a4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a4e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a50:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <HAL_RCC_OscConfig+0x578>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	4a17      	ldr	r2, [pc, #92]	; (8001ab4 <HAL_RCC_OscConfig+0x578>)
 8001a56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a5a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5c:	f7ff f9d4 	bl	8000e08 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a64:	f7ff f9d0 	bl	8000e08 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e074      	b.n	8001b60 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a76:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <HAL_RCC_OscConfig+0x578>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0x528>
 8001a82:	e06c      	b.n	8001b5e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a84:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <HAL_RCC_OscConfig+0x578>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <HAL_RCC_OscConfig+0x578>)
 8001a8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a8e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a90:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <HAL_RCC_OscConfig+0x578>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	4a07      	ldr	r2, [pc, #28]	; (8001ab4 <HAL_RCC_OscConfig+0x578>)
 8001a96:	f023 0303 	bic.w	r3, r3, #3
 8001a9a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001a9c:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <HAL_RCC_OscConfig+0x578>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	4a04      	ldr	r2, [pc, #16]	; (8001ab4 <HAL_RCC_OscConfig+0x578>)
 8001aa2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001aa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aaa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aac:	f7ff f9ac 	bl	8000e08 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ab2:	e00e      	b.n	8001ad2 <HAL_RCC_OscConfig+0x596>
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40007000 	.word	0x40007000
 8001abc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac0:	f7ff f9a2 	bl	8000e08 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e046      	b.n	8001b60 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ad2:	4b25      	ldr	r3, [pc, #148]	; (8001b68 <HAL_RCC_OscConfig+0x62c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1f0      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x584>
 8001ade:	e03e      	b.n	8001b5e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d101      	bne.n	8001aec <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e039      	b.n	8001b60 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001aec:	4b1e      	ldr	r3, [pc, #120]	; (8001b68 <HAL_RCC_OscConfig+0x62c>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	f003 0203 	and.w	r2, r3, #3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d12c      	bne.n	8001b5a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d123      	bne.n	8001b5a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d11b      	bne.n	8001b5a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d113      	bne.n	8001b5a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3c:	085b      	lsrs	r3, r3, #1
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d109      	bne.n	8001b5a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b50:	085b      	lsrs	r3, r3, #1
 8001b52:	3b01      	subs	r3, #1
 8001b54:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d001      	beq.n	8001b5e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e000      	b.n	8001b60 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3720      	adds	r7, #32
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40021000 	.word	0x40021000

08001b6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e11e      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b84:	4b91      	ldr	r3, [pc, #580]	; (8001dcc <HAL_RCC_ClockConfig+0x260>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 030f 	and.w	r3, r3, #15
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d910      	bls.n	8001bb4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b92:	4b8e      	ldr	r3, [pc, #568]	; (8001dcc <HAL_RCC_ClockConfig+0x260>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f023 020f 	bic.w	r2, r3, #15
 8001b9a:	498c      	ldr	r1, [pc, #560]	; (8001dcc <HAL_RCC_ClockConfig+0x260>)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba2:	4b8a      	ldr	r3, [pc, #552]	; (8001dcc <HAL_RCC_ClockConfig+0x260>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d001      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e106      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d073      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b03      	cmp	r3, #3
 8001bc6:	d129      	bne.n	8001c1c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bc8:	4b81      	ldr	r3, [pc, #516]	; (8001dd0 <HAL_RCC_ClockConfig+0x264>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e0f4      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001bd8:	f000 f99e 	bl	8001f18 <RCC_GetSysClockFreqFromPLLSource>
 8001bdc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	4a7c      	ldr	r2, [pc, #496]	; (8001dd4 <HAL_RCC_ClockConfig+0x268>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d93f      	bls.n	8001c66 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001be6:	4b7a      	ldr	r3, [pc, #488]	; (8001dd0 <HAL_RCC_ClockConfig+0x264>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d009      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d033      	beq.n	8001c66 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d12f      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c06:	4b72      	ldr	r3, [pc, #456]	; (8001dd0 <HAL_RCC_ClockConfig+0x264>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c0e:	4a70      	ldr	r2, [pc, #448]	; (8001dd0 <HAL_RCC_ClockConfig+0x264>)
 8001c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c14:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c16:	2380      	movs	r3, #128	; 0x80
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	e024      	b.n	8001c66 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d107      	bne.n	8001c34 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c24:	4b6a      	ldr	r3, [pc, #424]	; (8001dd0 <HAL_RCC_ClockConfig+0x264>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d109      	bne.n	8001c44 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e0c6      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c34:	4b66      	ldr	r3, [pc, #408]	; (8001dd0 <HAL_RCC_ClockConfig+0x264>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e0be      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001c44:	f000 f8ce 	bl	8001de4 <HAL_RCC_GetSysClockFreq>
 8001c48:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	4a61      	ldr	r2, [pc, #388]	; (8001dd4 <HAL_RCC_ClockConfig+0x268>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d909      	bls.n	8001c66 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c52:	4b5f      	ldr	r3, [pc, #380]	; (8001dd0 <HAL_RCC_ClockConfig+0x264>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c5a:	4a5d      	ldr	r2, [pc, #372]	; (8001dd0 <HAL_RCC_ClockConfig+0x264>)
 8001c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c60:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001c62:	2380      	movs	r3, #128	; 0x80
 8001c64:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c66:	4b5a      	ldr	r3, [pc, #360]	; (8001dd0 <HAL_RCC_ClockConfig+0x264>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f023 0203 	bic.w	r2, r3, #3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	4957      	ldr	r1, [pc, #348]	; (8001dd0 <HAL_RCC_ClockConfig+0x264>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c78:	f7ff f8c6 	bl	8000e08 <HAL_GetTick>
 8001c7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7e:	e00a      	b.n	8001c96 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c80:	f7ff f8c2 	bl	8000e08 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e095      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c96:	4b4e      	ldr	r3, [pc, #312]	; (8001dd0 <HAL_RCC_ClockConfig+0x264>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 020c 	and.w	r2, r3, #12
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d1eb      	bne.n	8001c80 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d023      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d005      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cc0:	4b43      	ldr	r3, [pc, #268]	; (8001dd0 <HAL_RCC_ClockConfig+0x264>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	4a42      	ldr	r2, [pc, #264]	; (8001dd0 <HAL_RCC_ClockConfig+0x264>)
 8001cc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cca:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0308 	and.w	r3, r3, #8
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d007      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001cd8:	4b3d      	ldr	r3, [pc, #244]	; (8001dd0 <HAL_RCC_ClockConfig+0x264>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001ce0:	4a3b      	ldr	r2, [pc, #236]	; (8001dd0 <HAL_RCC_ClockConfig+0x264>)
 8001ce2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ce6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ce8:	4b39      	ldr	r3, [pc, #228]	; (8001dd0 <HAL_RCC_ClockConfig+0x264>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	4936      	ldr	r1, [pc, #216]	; (8001dd0 <HAL_RCC_ClockConfig+0x264>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	608b      	str	r3, [r1, #8]
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	2b80      	cmp	r3, #128	; 0x80
 8001d00:	d105      	bne.n	8001d0e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001d02:	4b33      	ldr	r3, [pc, #204]	; (8001dd0 <HAL_RCC_ClockConfig+0x264>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	4a32      	ldr	r2, [pc, #200]	; (8001dd0 <HAL_RCC_ClockConfig+0x264>)
 8001d08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d0c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d0e:	4b2f      	ldr	r3, [pc, #188]	; (8001dcc <HAL_RCC_ClockConfig+0x260>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d21d      	bcs.n	8001d58 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1c:	4b2b      	ldr	r3, [pc, #172]	; (8001dcc <HAL_RCC_ClockConfig+0x260>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f023 020f 	bic.w	r2, r3, #15
 8001d24:	4929      	ldr	r1, [pc, #164]	; (8001dcc <HAL_RCC_ClockConfig+0x260>)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d2c:	f7ff f86c 	bl	8000e08 <HAL_GetTick>
 8001d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d32:	e00a      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d34:	f7ff f868 	bl	8000e08 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e03b      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4a:	4b20      	ldr	r3, [pc, #128]	; (8001dcc <HAL_RCC_ClockConfig+0x260>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d1ed      	bne.n	8001d34 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d008      	beq.n	8001d76 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d64:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <HAL_RCC_ClockConfig+0x264>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	4917      	ldr	r1, [pc, #92]	; (8001dd0 <HAL_RCC_ClockConfig+0x264>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d009      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d82:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <HAL_RCC_ClockConfig+0x264>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	490f      	ldr	r1, [pc, #60]	; (8001dd0 <HAL_RCC_ClockConfig+0x264>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d96:	f000 f825 	bl	8001de4 <HAL_RCC_GetSysClockFreq>
 8001d9a:	4601      	mov	r1, r0
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <HAL_RCC_ClockConfig+0x264>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	091b      	lsrs	r3, r3, #4
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	4a0c      	ldr	r2, [pc, #48]	; (8001dd8 <HAL_RCC_ClockConfig+0x26c>)
 8001da8:	5cd3      	ldrb	r3, [r2, r3]
 8001daa:	f003 031f 	and.w	r3, r3, #31
 8001dae:	fa21 f303 	lsr.w	r3, r1, r3
 8001db2:	4a0a      	ldr	r2, [pc, #40]	; (8001ddc <HAL_RCC_ClockConfig+0x270>)
 8001db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001db6:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <HAL_RCC_ClockConfig+0x274>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe ffd8 	bl	8000d70 <HAL_InitTick>
 8001dc0:	4603      	mov	r3, r0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40022000 	.word	0x40022000
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	04c4b400 	.word	0x04c4b400
 8001dd8:	08005dd4 	.word	0x08005dd4
 8001ddc:	20000000 	.word	0x20000000
 8001de0:	20000004 	.word	0x20000004

08001de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b087      	sub	sp, #28
 8001de8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001dea:	4b2c      	ldr	r3, [pc, #176]	; (8001e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 030c 	and.w	r3, r3, #12
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d102      	bne.n	8001dfc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001df6:	4b2a      	ldr	r3, [pc, #168]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	e047      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001dfc:	4b27      	ldr	r3, [pc, #156]	; (8001e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 030c 	and.w	r3, r3, #12
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	d102      	bne.n	8001e0e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e08:	4b26      	ldr	r3, [pc, #152]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e0a:	613b      	str	r3, [r7, #16]
 8001e0c:	e03e      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001e0e:	4b23      	ldr	r3, [pc, #140]	; (8001e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 030c 	and.w	r3, r3, #12
 8001e16:	2b0c      	cmp	r3, #12
 8001e18:	d136      	bne.n	8001e88 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e1a:	4b20      	ldr	r3, [pc, #128]	; (8001e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e24:	4b1d      	ldr	r3, [pc, #116]	; (8001e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	091b      	lsrs	r3, r3, #4
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	3301      	adds	r3, #1
 8001e30:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2b03      	cmp	r3, #3
 8001e36:	d10c      	bne.n	8001e52 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e38:	4a1a      	ldr	r2, [pc, #104]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e40:	4a16      	ldr	r2, [pc, #88]	; (8001e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e42:	68d2      	ldr	r2, [r2, #12]
 8001e44:	0a12      	lsrs	r2, r2, #8
 8001e46:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e4a:	fb02 f303 	mul.w	r3, r2, r3
 8001e4e:	617b      	str	r3, [r7, #20]
      break;
 8001e50:	e00c      	b.n	8001e6c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e52:	4a13      	ldr	r2, [pc, #76]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5a:	4a10      	ldr	r2, [pc, #64]	; (8001e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e5c:	68d2      	ldr	r2, [r2, #12]
 8001e5e:	0a12      	lsrs	r2, r2, #8
 8001e60:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e64:	fb02 f303 	mul.w	r3, r2, r3
 8001e68:	617b      	str	r3, [r7, #20]
      break;
 8001e6a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	0e5b      	lsrs	r3, r3, #25
 8001e72:	f003 0303 	and.w	r3, r3, #3
 8001e76:	3301      	adds	r3, #1
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e84:	613b      	str	r3, [r7, #16]
 8001e86:	e001      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e8c:	693b      	ldr	r3, [r7, #16]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	371c      	adds	r7, #28
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	00f42400 	.word	0x00f42400
 8001ea4:	007a1200 	.word	0x007a1200

08001ea8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eac:	4b03      	ldr	r3, [pc, #12]	; (8001ebc <HAL_RCC_GetHCLKFreq+0x14>)
 8001eae:	681b      	ldr	r3, [r3, #0]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	20000000 	.word	0x20000000

08001ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ec4:	f7ff fff0 	bl	8001ea8 <HAL_RCC_GetHCLKFreq>
 8001ec8:	4601      	mov	r1, r0
 8001eca:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	0a1b      	lsrs	r3, r3, #8
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	4a04      	ldr	r2, [pc, #16]	; (8001ee8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ed6:	5cd3      	ldrb	r3, [r2, r3]
 8001ed8:	f003 031f 	and.w	r3, r3, #31
 8001edc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	08005de4 	.word	0x08005de4

08001eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ef0:	f7ff ffda 	bl	8001ea8 <HAL_RCC_GetHCLKFreq>
 8001ef4:	4601      	mov	r1, r0
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	0adb      	lsrs	r3, r3, #11
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f02:	5cd3      	ldrb	r3, [r2, r3]
 8001f04:	f003 031f 	and.w	r3, r3, #31
 8001f08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40021000 	.word	0x40021000
 8001f14:	08005de4 	.word	0x08005de4

08001f18 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b087      	sub	sp, #28
 8001f1c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f1e:	4b1e      	ldr	r3, [pc, #120]	; (8001f98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f28:	4b1b      	ldr	r3, [pc, #108]	; (8001f98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	091b      	lsrs	r3, r3, #4
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	3301      	adds	r3, #1
 8001f34:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	2b03      	cmp	r3, #3
 8001f3a:	d10c      	bne.n	8001f56 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f3c:	4a17      	ldr	r2, [pc, #92]	; (8001f9c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f44:	4a14      	ldr	r2, [pc, #80]	; (8001f98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f46:	68d2      	ldr	r2, [r2, #12]
 8001f48:	0a12      	lsrs	r2, r2, #8
 8001f4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f4e:	fb02 f303 	mul.w	r3, r2, r3
 8001f52:	617b      	str	r3, [r7, #20]
    break;
 8001f54:	e00c      	b.n	8001f70 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f56:	4a12      	ldr	r2, [pc, #72]	; (8001fa0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5e:	4a0e      	ldr	r2, [pc, #56]	; (8001f98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f60:	68d2      	ldr	r2, [r2, #12]
 8001f62:	0a12      	lsrs	r2, r2, #8
 8001f64:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f68:	fb02 f303 	mul.w	r3, r2, r3
 8001f6c:	617b      	str	r3, [r7, #20]
    break;
 8001f6e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f70:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	0e5b      	lsrs	r3, r3, #25
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f88:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001f8a:	687b      	ldr	r3, [r7, #4]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	371c      	adds	r7, #28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	007a1200 	.word	0x007a1200
 8001fa0:	00f42400 	.word	0x00f42400

08001fa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fac:	2300      	movs	r3, #0
 8001fae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 8098 	beq.w	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fc6:	4b43      	ldr	r3, [pc, #268]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10d      	bne.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fd2:	4b40      	ldr	r3, [pc, #256]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd6:	4a3f      	ldr	r2, [pc, #252]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fdc:	6593      	str	r3, [r2, #88]	; 0x58
 8001fde:	4b3d      	ldr	r3, [pc, #244]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe6:	60bb      	str	r3, [r7, #8]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fea:	2301      	movs	r3, #1
 8001fec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fee:	4b3a      	ldr	r3, [pc, #232]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a39      	ldr	r2, [pc, #228]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ffa:	f7fe ff05 	bl	8000e08 <HAL_GetTick>
 8001ffe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002000:	e009      	b.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002002:	f7fe ff01 	bl	8000e08 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d902      	bls.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	74fb      	strb	r3, [r7, #19]
        break;
 8002014:	e005      	b.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002016:	4b30      	ldr	r3, [pc, #192]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0ef      	beq.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002022:	7cfb      	ldrb	r3, [r7, #19]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d159      	bne.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002028:	4b2a      	ldr	r3, [pc, #168]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800202a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800202e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002032:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d01e      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	429a      	cmp	r2, r3
 8002042:	d019      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002044:	4b23      	ldr	r3, [pc, #140]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800204e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002050:	4b20      	ldr	r3, [pc, #128]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002056:	4a1f      	ldr	r2, [pc, #124]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800205c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002060:	4b1c      	ldr	r3, [pc, #112]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002066:	4a1b      	ldr	r2, [pc, #108]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002068:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800206c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002070:	4a18      	ldr	r2, [pc, #96]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	d016      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002082:	f7fe fec1 	bl	8000e08 <HAL_GetTick>
 8002086:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002088:	e00b      	b.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208a:	f7fe febd 	bl	8000e08 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	f241 3288 	movw	r2, #5000	; 0x1388
 8002098:	4293      	cmp	r3, r2
 800209a:	d902      	bls.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	74fb      	strb	r3, [r7, #19]
            break;
 80020a0:	e006      	b.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020a2:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0ec      	beq.n	800208a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80020b0:	7cfb      	ldrb	r3, [r7, #19]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10b      	bne.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020b6:	4b07      	ldr	r3, [pc, #28]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	4903      	ldr	r1, [pc, #12]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80020cc:	e008      	b.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020ce:	7cfb      	ldrb	r3, [r7, #19]
 80020d0:	74bb      	strb	r3, [r7, #18]
 80020d2:	e005      	b.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020dc:	7cfb      	ldrb	r3, [r7, #19]
 80020de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020e0:	7c7b      	ldrb	r3, [r7, #17]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d105      	bne.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e6:	4ba6      	ldr	r3, [pc, #664]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ea:	4aa5      	ldr	r2, [pc, #660]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00a      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020fe:	4ba0      	ldr	r3, [pc, #640]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002104:	f023 0203 	bic.w	r2, r3, #3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	499c      	ldr	r1, [pc, #624]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800210e:	4313      	orrs	r3, r2
 8002110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00a      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002120:	4b97      	ldr	r3, [pc, #604]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002126:	f023 020c 	bic.w	r2, r3, #12
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	4994      	ldr	r1, [pc, #592]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002130:	4313      	orrs	r3, r2
 8002132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00a      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002142:	4b8f      	ldr	r3, [pc, #572]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002148:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	498b      	ldr	r1, [pc, #556]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002152:	4313      	orrs	r3, r2
 8002154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0308 	and.w	r3, r3, #8
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00a      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002164:	4b86      	ldr	r3, [pc, #536]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	4983      	ldr	r1, [pc, #524]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002174:	4313      	orrs	r3, r2
 8002176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0320 	and.w	r3, r3, #32
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00a      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002186:	4b7e      	ldr	r3, [pc, #504]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	497a      	ldr	r1, [pc, #488]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002196:	4313      	orrs	r3, r2
 8002198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00a      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021a8:	4b75      	ldr	r3, [pc, #468]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	4972      	ldr	r1, [pc, #456]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00a      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021ca:	4b6d      	ldr	r3, [pc, #436]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	4969      	ldr	r1, [pc, #420]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00a      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021ec:	4b64      	ldr	r3, [pc, #400]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	4961      	ldr	r1, [pc, #388]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00a      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800220e:	4b5c      	ldr	r3, [pc, #368]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002214:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	4958      	ldr	r1, [pc, #352]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800221e:	4313      	orrs	r3, r2
 8002220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800222c:	2b00      	cmp	r3, #0
 800222e:	d015      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002230:	4b53      	ldr	r3, [pc, #332]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002236:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223e:	4950      	ldr	r1, [pc, #320]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002240:	4313      	orrs	r3, r2
 8002242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800224e:	d105      	bne.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002250:	4b4b      	ldr	r3, [pc, #300]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4a4a      	ldr	r2, [pc, #296]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002256:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800225a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002264:	2b00      	cmp	r3, #0
 8002266:	d015      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002268:	4b45      	ldr	r3, [pc, #276]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800226a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002276:	4942      	ldr	r1, [pc, #264]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002278:	4313      	orrs	r3, r2
 800227a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002282:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002286:	d105      	bne.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002288:	4b3d      	ldr	r3, [pc, #244]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	4a3c      	ldr	r2, [pc, #240]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800228e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002292:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d015      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80022a0:	4b37      	ldr	r3, [pc, #220]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	4934      	ldr	r1, [pc, #208]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022be:	d105      	bne.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022c0:	4b2f      	ldr	r3, [pc, #188]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	4a2e      	ldr	r2, [pc, #184]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022ca:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d015      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022d8:	4b29      	ldr	r3, [pc, #164]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e6:	4926      	ldr	r1, [pc, #152]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022f6:	d105      	bne.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022f8:	4b21      	ldr	r3, [pc, #132]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	4a20      	ldr	r2, [pc, #128]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002302:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d015      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002310:	4b1b      	ldr	r3, [pc, #108]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002316:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800231e:	4918      	ldr	r1, [pc, #96]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002320:	4313      	orrs	r3, r2
 8002322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800232e:	d105      	bne.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002330:	4b13      	ldr	r3, [pc, #76]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	4a12      	ldr	r2, [pc, #72]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002336:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800233a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d015      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002348:	4b0d      	ldr	r3, [pc, #52]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800234a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002356:	490a      	ldr	r1, [pc, #40]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002362:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002366:	d105      	bne.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002368:	4b05      	ldr	r3, [pc, #20]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	4a04      	ldr	r2, [pc, #16]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800236e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002372:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002374:	7cbb      	ldrb	r3, [r7, #18]
}
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40021000 	.word	0x40021000

08002384 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e049      	b.n	800242a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d106      	bne.n	80023b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7fe fbfa 	bl	8000ba4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2202      	movs	r2, #2
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3304      	adds	r3, #4
 80023c0:	4619      	mov	r1, r3
 80023c2:	4610      	mov	r0, r2
 80023c4:	f000 f898 	bl	80024f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b01      	cmp	r3, #1
 8002446:	d001      	beq.n	800244c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e042      	b.n	80024d2 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a21      	ldr	r2, [pc, #132]	; (80024e0 <HAL_TIM_Base_Start+0xac>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d018      	beq.n	8002490 <HAL_TIM_Base_Start+0x5c>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002466:	d013      	beq.n	8002490 <HAL_TIM_Base_Start+0x5c>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a1d      	ldr	r2, [pc, #116]	; (80024e4 <HAL_TIM_Base_Start+0xb0>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d00e      	beq.n	8002490 <HAL_TIM_Base_Start+0x5c>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a1c      	ldr	r2, [pc, #112]	; (80024e8 <HAL_TIM_Base_Start+0xb4>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d009      	beq.n	8002490 <HAL_TIM_Base_Start+0x5c>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a1a      	ldr	r2, [pc, #104]	; (80024ec <HAL_TIM_Base_Start+0xb8>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d004      	beq.n	8002490 <HAL_TIM_Base_Start+0x5c>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a19      	ldr	r2, [pc, #100]	; (80024f0 <HAL_TIM_Base_Start+0xbc>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d115      	bne.n	80024bc <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689a      	ldr	r2, [r3, #8]
 8002496:	4b17      	ldr	r3, [pc, #92]	; (80024f4 <HAL_TIM_Base_Start+0xc0>)
 8002498:	4013      	ands	r3, r2
 800249a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2b06      	cmp	r3, #6
 80024a0:	d015      	beq.n	80024ce <HAL_TIM_Base_Start+0x9a>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a8:	d011      	beq.n	80024ce <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f042 0201 	orr.w	r2, r2, #1
 80024b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ba:	e008      	b.n	80024ce <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 0201 	orr.w	r2, r2, #1
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	e000      	b.n	80024d0 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	40012c00 	.word	0x40012c00
 80024e4:	40000400 	.word	0x40000400
 80024e8:	40000800 	.word	0x40000800
 80024ec:	40013400 	.word	0x40013400
 80024f0:	40014000 	.word	0x40014000
 80024f4:	00010007 	.word	0x00010007

080024f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a3c      	ldr	r2, [pc, #240]	; (80025fc <TIM_Base_SetConfig+0x104>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d00f      	beq.n	8002530 <TIM_Base_SetConfig+0x38>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002516:	d00b      	beq.n	8002530 <TIM_Base_SetConfig+0x38>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a39      	ldr	r2, [pc, #228]	; (8002600 <TIM_Base_SetConfig+0x108>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d007      	beq.n	8002530 <TIM_Base_SetConfig+0x38>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a38      	ldr	r2, [pc, #224]	; (8002604 <TIM_Base_SetConfig+0x10c>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d003      	beq.n	8002530 <TIM_Base_SetConfig+0x38>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a37      	ldr	r2, [pc, #220]	; (8002608 <TIM_Base_SetConfig+0x110>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d108      	bne.n	8002542 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002536:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	4313      	orrs	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a2d      	ldr	r2, [pc, #180]	; (80025fc <TIM_Base_SetConfig+0x104>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d01b      	beq.n	8002582 <TIM_Base_SetConfig+0x8a>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002550:	d017      	beq.n	8002582 <TIM_Base_SetConfig+0x8a>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a2a      	ldr	r2, [pc, #168]	; (8002600 <TIM_Base_SetConfig+0x108>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d013      	beq.n	8002582 <TIM_Base_SetConfig+0x8a>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a29      	ldr	r2, [pc, #164]	; (8002604 <TIM_Base_SetConfig+0x10c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d00f      	beq.n	8002582 <TIM_Base_SetConfig+0x8a>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a28      	ldr	r2, [pc, #160]	; (8002608 <TIM_Base_SetConfig+0x110>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d00b      	beq.n	8002582 <TIM_Base_SetConfig+0x8a>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a27      	ldr	r2, [pc, #156]	; (800260c <TIM_Base_SetConfig+0x114>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d007      	beq.n	8002582 <TIM_Base_SetConfig+0x8a>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a26      	ldr	r2, [pc, #152]	; (8002610 <TIM_Base_SetConfig+0x118>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d003      	beq.n	8002582 <TIM_Base_SetConfig+0x8a>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a25      	ldr	r2, [pc, #148]	; (8002614 <TIM_Base_SetConfig+0x11c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d108      	bne.n	8002594 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002588:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	4313      	orrs	r3, r2
 8002592:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	4313      	orrs	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a10      	ldr	r2, [pc, #64]	; (80025fc <TIM_Base_SetConfig+0x104>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d00f      	beq.n	80025e0 <TIM_Base_SetConfig+0xe8>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a11      	ldr	r2, [pc, #68]	; (8002608 <TIM_Base_SetConfig+0x110>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d00b      	beq.n	80025e0 <TIM_Base_SetConfig+0xe8>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a10      	ldr	r2, [pc, #64]	; (800260c <TIM_Base_SetConfig+0x114>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d007      	beq.n	80025e0 <TIM_Base_SetConfig+0xe8>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a0f      	ldr	r2, [pc, #60]	; (8002610 <TIM_Base_SetConfig+0x118>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d003      	beq.n	80025e0 <TIM_Base_SetConfig+0xe8>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a0e      	ldr	r2, [pc, #56]	; (8002614 <TIM_Base_SetConfig+0x11c>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d103      	bne.n	80025e8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	691a      	ldr	r2, [r3, #16]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	615a      	str	r2, [r3, #20]
}
 80025ee:	bf00      	nop
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	40012c00 	.word	0x40012c00
 8002600:	40000400 	.word	0x40000400
 8002604:	40000800 	.word	0x40000800
 8002608:	40013400 	.word	0x40013400
 800260c:	40014000 	.word	0x40014000
 8002610:	40014400 	.word	0x40014400
 8002614:	40014800 	.word	0x40014800

08002618 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002628:	2b01      	cmp	r3, #1
 800262a:	d101      	bne.n	8002630 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800262c:	2302      	movs	r3, #2
 800262e:	e065      	b.n	80026fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2202      	movs	r2, #2
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a2c      	ldr	r2, [pc, #176]	; (8002708 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d004      	beq.n	8002664 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a2b      	ldr	r2, [pc, #172]	; (800270c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d108      	bne.n	8002676 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800266a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	4313      	orrs	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800267c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002680:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	4313      	orrs	r3, r2
 800268a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a1b      	ldr	r2, [pc, #108]	; (8002708 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d018      	beq.n	80026d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026a6:	d013      	beq.n	80026d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a18      	ldr	r2, [pc, #96]	; (8002710 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d00e      	beq.n	80026d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a17      	ldr	r2, [pc, #92]	; (8002714 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d009      	beq.n	80026d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a12      	ldr	r2, [pc, #72]	; (800270c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d004      	beq.n	80026d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a13      	ldr	r2, [pc, #76]	; (8002718 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d10c      	bne.n	80026ea <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	4313      	orrs	r3, r2
 80026e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	40012c00 	.word	0x40012c00
 800270c:	40013400 	.word	0x40013400
 8002710:	40000400 	.word	0x40000400
 8002714:	40000800 	.word	0x40000800
 8002718:	40014000 	.word	0x40014000

0800271c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e042      	b.n	80027b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002734:	2b00      	cmp	r3, #0
 8002736:	d106      	bne.n	8002746 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f7fe fa4f 	bl	8000be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2224      	movs	r2, #36	; 0x24
 800274a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0201 	bic.w	r2, r2, #1
 800275c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f82c 	bl	80027bc <UART_SetConfig>
 8002764:	4603      	mov	r3, r0
 8002766:	2b01      	cmp	r3, #1
 8002768:	d101      	bne.n	800276e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e022      	b.n	80027b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002772:	2b00      	cmp	r3, #0
 8002774:	d002      	beq.n	800277c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 fac8 	bl	8002d0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800278a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800279a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0201 	orr.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 fb4f 	bl	8002e50 <UART_CheckIdleState>
 80027b2:	4603      	mov	r3, r0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027bc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80027c0:	b088      	sub	sp, #32
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80027c6:	2300      	movs	r3, #0
 80027c8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	431a      	orrs	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027e6:	69fa      	ldr	r2, [r7, #28]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	4bb0      	ldr	r3, [pc, #704]	; (8002ab4 <UART_SetConfig+0x2f8>)
 80027f4:	4013      	ands	r3, r2
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	6812      	ldr	r2, [r2, #0]
 80027fa:	69f9      	ldr	r1, [r7, #28]
 80027fc:	430b      	orrs	r3, r1
 80027fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	430a      	orrs	r2, r1
 8002814:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4aa5      	ldr	r2, [pc, #660]	; (8002ab8 <UART_SetConfig+0x2fc>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d004      	beq.n	8002830 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	69fa      	ldr	r2, [r7, #28]
 800282c:	4313      	orrs	r3, r2
 800282e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800283a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6812      	ldr	r2, [r2, #0]
 8002842:	69f9      	ldr	r1, [r7, #28]
 8002844:	430b      	orrs	r3, r1
 8002846:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284e:	f023 010f 	bic.w	r1, r3, #15
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a96      	ldr	r2, [pc, #600]	; (8002abc <UART_SetConfig+0x300>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d121      	bne.n	80028ac <UART_SetConfig+0xf0>
 8002868:	4b95      	ldr	r3, [pc, #596]	; (8002ac0 <UART_SetConfig+0x304>)
 800286a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	2b03      	cmp	r3, #3
 8002874:	d816      	bhi.n	80028a4 <UART_SetConfig+0xe8>
 8002876:	a201      	add	r2, pc, #4	; (adr r2, 800287c <UART_SetConfig+0xc0>)
 8002878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800287c:	0800288d 	.word	0x0800288d
 8002880:	08002899 	.word	0x08002899
 8002884:	08002893 	.word	0x08002893
 8002888:	0800289f 	.word	0x0800289f
 800288c:	2301      	movs	r3, #1
 800288e:	76fb      	strb	r3, [r7, #27]
 8002890:	e0be      	b.n	8002a10 <UART_SetConfig+0x254>
 8002892:	2302      	movs	r3, #2
 8002894:	76fb      	strb	r3, [r7, #27]
 8002896:	e0bb      	b.n	8002a10 <UART_SetConfig+0x254>
 8002898:	2304      	movs	r3, #4
 800289a:	76fb      	strb	r3, [r7, #27]
 800289c:	e0b8      	b.n	8002a10 <UART_SetConfig+0x254>
 800289e:	2308      	movs	r3, #8
 80028a0:	76fb      	strb	r3, [r7, #27]
 80028a2:	e0b5      	b.n	8002a10 <UART_SetConfig+0x254>
 80028a4:	2310      	movs	r3, #16
 80028a6:	76fb      	strb	r3, [r7, #27]
 80028a8:	bf00      	nop
 80028aa:	e0b1      	b.n	8002a10 <UART_SetConfig+0x254>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a84      	ldr	r2, [pc, #528]	; (8002ac4 <UART_SetConfig+0x308>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d134      	bne.n	8002920 <UART_SetConfig+0x164>
 80028b6:	4b82      	ldr	r3, [pc, #520]	; (8002ac0 <UART_SetConfig+0x304>)
 80028b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028bc:	f003 030c 	and.w	r3, r3, #12
 80028c0:	2b0c      	cmp	r3, #12
 80028c2:	d829      	bhi.n	8002918 <UART_SetConfig+0x15c>
 80028c4:	a201      	add	r2, pc, #4	; (adr r2, 80028cc <UART_SetConfig+0x110>)
 80028c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ca:	bf00      	nop
 80028cc:	08002901 	.word	0x08002901
 80028d0:	08002919 	.word	0x08002919
 80028d4:	08002919 	.word	0x08002919
 80028d8:	08002919 	.word	0x08002919
 80028dc:	0800290d 	.word	0x0800290d
 80028e0:	08002919 	.word	0x08002919
 80028e4:	08002919 	.word	0x08002919
 80028e8:	08002919 	.word	0x08002919
 80028ec:	08002907 	.word	0x08002907
 80028f0:	08002919 	.word	0x08002919
 80028f4:	08002919 	.word	0x08002919
 80028f8:	08002919 	.word	0x08002919
 80028fc:	08002913 	.word	0x08002913
 8002900:	2300      	movs	r3, #0
 8002902:	76fb      	strb	r3, [r7, #27]
 8002904:	e084      	b.n	8002a10 <UART_SetConfig+0x254>
 8002906:	2302      	movs	r3, #2
 8002908:	76fb      	strb	r3, [r7, #27]
 800290a:	e081      	b.n	8002a10 <UART_SetConfig+0x254>
 800290c:	2304      	movs	r3, #4
 800290e:	76fb      	strb	r3, [r7, #27]
 8002910:	e07e      	b.n	8002a10 <UART_SetConfig+0x254>
 8002912:	2308      	movs	r3, #8
 8002914:	76fb      	strb	r3, [r7, #27]
 8002916:	e07b      	b.n	8002a10 <UART_SetConfig+0x254>
 8002918:	2310      	movs	r3, #16
 800291a:	76fb      	strb	r3, [r7, #27]
 800291c:	bf00      	nop
 800291e:	e077      	b.n	8002a10 <UART_SetConfig+0x254>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a68      	ldr	r2, [pc, #416]	; (8002ac8 <UART_SetConfig+0x30c>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d120      	bne.n	800296c <UART_SetConfig+0x1b0>
 800292a:	4b65      	ldr	r3, [pc, #404]	; (8002ac0 <UART_SetConfig+0x304>)
 800292c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002930:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002934:	2b10      	cmp	r3, #16
 8002936:	d00f      	beq.n	8002958 <UART_SetConfig+0x19c>
 8002938:	2b10      	cmp	r3, #16
 800293a:	d802      	bhi.n	8002942 <UART_SetConfig+0x186>
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <UART_SetConfig+0x190>
 8002940:	e010      	b.n	8002964 <UART_SetConfig+0x1a8>
 8002942:	2b20      	cmp	r3, #32
 8002944:	d005      	beq.n	8002952 <UART_SetConfig+0x196>
 8002946:	2b30      	cmp	r3, #48	; 0x30
 8002948:	d009      	beq.n	800295e <UART_SetConfig+0x1a2>
 800294a:	e00b      	b.n	8002964 <UART_SetConfig+0x1a8>
 800294c:	2300      	movs	r3, #0
 800294e:	76fb      	strb	r3, [r7, #27]
 8002950:	e05e      	b.n	8002a10 <UART_SetConfig+0x254>
 8002952:	2302      	movs	r3, #2
 8002954:	76fb      	strb	r3, [r7, #27]
 8002956:	e05b      	b.n	8002a10 <UART_SetConfig+0x254>
 8002958:	2304      	movs	r3, #4
 800295a:	76fb      	strb	r3, [r7, #27]
 800295c:	e058      	b.n	8002a10 <UART_SetConfig+0x254>
 800295e:	2308      	movs	r3, #8
 8002960:	76fb      	strb	r3, [r7, #27]
 8002962:	e055      	b.n	8002a10 <UART_SetConfig+0x254>
 8002964:	2310      	movs	r3, #16
 8002966:	76fb      	strb	r3, [r7, #27]
 8002968:	bf00      	nop
 800296a:	e051      	b.n	8002a10 <UART_SetConfig+0x254>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a56      	ldr	r2, [pc, #344]	; (8002acc <UART_SetConfig+0x310>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d120      	bne.n	80029b8 <UART_SetConfig+0x1fc>
 8002976:	4b52      	ldr	r3, [pc, #328]	; (8002ac0 <UART_SetConfig+0x304>)
 8002978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002980:	2b40      	cmp	r3, #64	; 0x40
 8002982:	d00f      	beq.n	80029a4 <UART_SetConfig+0x1e8>
 8002984:	2b40      	cmp	r3, #64	; 0x40
 8002986:	d802      	bhi.n	800298e <UART_SetConfig+0x1d2>
 8002988:	2b00      	cmp	r3, #0
 800298a:	d005      	beq.n	8002998 <UART_SetConfig+0x1dc>
 800298c:	e010      	b.n	80029b0 <UART_SetConfig+0x1f4>
 800298e:	2b80      	cmp	r3, #128	; 0x80
 8002990:	d005      	beq.n	800299e <UART_SetConfig+0x1e2>
 8002992:	2bc0      	cmp	r3, #192	; 0xc0
 8002994:	d009      	beq.n	80029aa <UART_SetConfig+0x1ee>
 8002996:	e00b      	b.n	80029b0 <UART_SetConfig+0x1f4>
 8002998:	2300      	movs	r3, #0
 800299a:	76fb      	strb	r3, [r7, #27]
 800299c:	e038      	b.n	8002a10 <UART_SetConfig+0x254>
 800299e:	2302      	movs	r3, #2
 80029a0:	76fb      	strb	r3, [r7, #27]
 80029a2:	e035      	b.n	8002a10 <UART_SetConfig+0x254>
 80029a4:	2304      	movs	r3, #4
 80029a6:	76fb      	strb	r3, [r7, #27]
 80029a8:	e032      	b.n	8002a10 <UART_SetConfig+0x254>
 80029aa:	2308      	movs	r3, #8
 80029ac:	76fb      	strb	r3, [r7, #27]
 80029ae:	e02f      	b.n	8002a10 <UART_SetConfig+0x254>
 80029b0:	2310      	movs	r3, #16
 80029b2:	76fb      	strb	r3, [r7, #27]
 80029b4:	bf00      	nop
 80029b6:	e02b      	b.n	8002a10 <UART_SetConfig+0x254>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a3e      	ldr	r2, [pc, #248]	; (8002ab8 <UART_SetConfig+0x2fc>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d124      	bne.n	8002a0c <UART_SetConfig+0x250>
 80029c2:	4b3f      	ldr	r3, [pc, #252]	; (8002ac0 <UART_SetConfig+0x304>)
 80029c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029d0:	d012      	beq.n	80029f8 <UART_SetConfig+0x23c>
 80029d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029d6:	d802      	bhi.n	80029de <UART_SetConfig+0x222>
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d007      	beq.n	80029ec <UART_SetConfig+0x230>
 80029dc:	e012      	b.n	8002a04 <UART_SetConfig+0x248>
 80029de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029e2:	d006      	beq.n	80029f2 <UART_SetConfig+0x236>
 80029e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80029e8:	d009      	beq.n	80029fe <UART_SetConfig+0x242>
 80029ea:	e00b      	b.n	8002a04 <UART_SetConfig+0x248>
 80029ec:	2300      	movs	r3, #0
 80029ee:	76fb      	strb	r3, [r7, #27]
 80029f0:	e00e      	b.n	8002a10 <UART_SetConfig+0x254>
 80029f2:	2302      	movs	r3, #2
 80029f4:	76fb      	strb	r3, [r7, #27]
 80029f6:	e00b      	b.n	8002a10 <UART_SetConfig+0x254>
 80029f8:	2304      	movs	r3, #4
 80029fa:	76fb      	strb	r3, [r7, #27]
 80029fc:	e008      	b.n	8002a10 <UART_SetConfig+0x254>
 80029fe:	2308      	movs	r3, #8
 8002a00:	76fb      	strb	r3, [r7, #27]
 8002a02:	e005      	b.n	8002a10 <UART_SetConfig+0x254>
 8002a04:	2310      	movs	r3, #16
 8002a06:	76fb      	strb	r3, [r7, #27]
 8002a08:	bf00      	nop
 8002a0a:	e001      	b.n	8002a10 <UART_SetConfig+0x254>
 8002a0c:	2310      	movs	r3, #16
 8002a0e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a28      	ldr	r2, [pc, #160]	; (8002ab8 <UART_SetConfig+0x2fc>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	f040 80a1 	bne.w	8002b5e <UART_SetConfig+0x3a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a1c:	7efb      	ldrb	r3, [r7, #27]
 8002a1e:	2b08      	cmp	r3, #8
 8002a20:	d823      	bhi.n	8002a6a <UART_SetConfig+0x2ae>
 8002a22:	a201      	add	r2, pc, #4	; (adr r2, 8002a28 <UART_SetConfig+0x26c>)
 8002a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a28:	08002a4d 	.word	0x08002a4d
 8002a2c:	08002a6b 	.word	0x08002a6b
 8002a30:	08002a55 	.word	0x08002a55
 8002a34:	08002a6b 	.word	0x08002a6b
 8002a38:	08002a5b 	.word	0x08002a5b
 8002a3c:	08002a6b 	.word	0x08002a6b
 8002a40:	08002a6b 	.word	0x08002a6b
 8002a44:	08002a6b 	.word	0x08002a6b
 8002a48:	08002a63 	.word	0x08002a63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a4c:	f7ff fa38 	bl	8001ec0 <HAL_RCC_GetPCLK1Freq>
 8002a50:	6178      	str	r0, [r7, #20]
        break;
 8002a52:	e00f      	b.n	8002a74 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a54:	4b1e      	ldr	r3, [pc, #120]	; (8002ad0 <UART_SetConfig+0x314>)
 8002a56:	617b      	str	r3, [r7, #20]
        break;
 8002a58:	e00c      	b.n	8002a74 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a5a:	f7ff f9c3 	bl	8001de4 <HAL_RCC_GetSysClockFreq>
 8002a5e:	6178      	str	r0, [r7, #20]
        break;
 8002a60:	e008      	b.n	8002a74 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a66:	617b      	str	r3, [r7, #20]
        break;
 8002a68:	e004      	b.n	8002a74 <UART_SetConfig+0x2b8>
      default:
        pclk = 0U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	76bb      	strb	r3, [r7, #26]
        break;
 8002a72:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 8130 	beq.w	8002cdc <UART_SetConfig+0x520>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	4a14      	ldr	r2, [pc, #80]	; (8002ad4 <UART_SetConfig+0x318>)
 8002a82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a86:	461a      	mov	r2, r3
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a8e:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	4413      	add	r3, r2
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d305      	bcc.n	8002aac <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d915      	bls.n	8002ad8 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	76bb      	strb	r3, [r7, #26]
 8002ab0:	e114      	b.n	8002cdc <UART_SetConfig+0x520>
 8002ab2:	bf00      	nop
 8002ab4:	cfff69f3 	.word	0xcfff69f3
 8002ab8:	40008000 	.word	0x40008000
 8002abc:	40013800 	.word	0x40013800
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	40004400 	.word	0x40004400
 8002ac8:	40004800 	.word	0x40004800
 8002acc:	40004c00 	.word	0x40004c00
 8002ad0:	00f42400 	.word	0x00f42400
 8002ad4:	08005dec 	.word	0x08005dec
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f04f 0100 	mov.w	r1, #0
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	4a87      	ldr	r2, [pc, #540]	; (8002d04 <UART_SetConfig+0x548>)
 8002ae6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	f04f 0400 	mov.w	r4, #0
 8002af0:	461a      	mov	r2, r3
 8002af2:	4623      	mov	r3, r4
 8002af4:	f7fd fb94 	bl	8000220 <__aeabi_uldivmod>
 8002af8:	4603      	mov	r3, r0
 8002afa:	460c      	mov	r4, r1
 8002afc:	4619      	mov	r1, r3
 8002afe:	4622      	mov	r2, r4
 8002b00:	f04f 0300 	mov.w	r3, #0
 8002b04:	f04f 0400 	mov.w	r4, #0
 8002b08:	0214      	lsls	r4, r2, #8
 8002b0a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002b0e:	020b      	lsls	r3, r1, #8
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	6852      	ldr	r2, [r2, #4]
 8002b14:	0852      	lsrs	r2, r2, #1
 8002b16:	4611      	mov	r1, r2
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	eb13 0b01 	adds.w	fp, r3, r1
 8002b20:	eb44 0c02 	adc.w	ip, r4, r2
 8002b24:	4658      	mov	r0, fp
 8002b26:	4661      	mov	r1, ip
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f04f 0400 	mov.w	r4, #0
 8002b30:	461a      	mov	r2, r3
 8002b32:	4623      	mov	r3, r4
 8002b34:	f7fd fb74 	bl	8000220 <__aeabi_uldivmod>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	460c      	mov	r4, r1
 8002b3c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b44:	d308      	bcc.n	8002b58 <UART_SetConfig+0x39c>
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b4c:	d204      	bcs.n	8002b58 <UART_SetConfig+0x39c>
        {
          huart->Instance->BRR = usartdiv;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	60da      	str	r2, [r3, #12]
 8002b56:	e0c1      	b.n	8002cdc <UART_SetConfig+0x520>
        }
        else
        {
          ret = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	76bb      	strb	r3, [r7, #26]
 8002b5c:	e0be      	b.n	8002cdc <UART_SetConfig+0x520>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b66:	d164      	bne.n	8002c32 <UART_SetConfig+0x476>
  {
    switch (clocksource)
 8002b68:	7efb      	ldrb	r3, [r7, #27]
 8002b6a:	2b08      	cmp	r3, #8
 8002b6c:	d827      	bhi.n	8002bbe <UART_SetConfig+0x402>
 8002b6e:	a201      	add	r2, pc, #4	; (adr r2, 8002b74 <UART_SetConfig+0x3b8>)
 8002b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b74:	08002b99 	.word	0x08002b99
 8002b78:	08002ba1 	.word	0x08002ba1
 8002b7c:	08002ba9 	.word	0x08002ba9
 8002b80:	08002bbf 	.word	0x08002bbf
 8002b84:	08002baf 	.word	0x08002baf
 8002b88:	08002bbf 	.word	0x08002bbf
 8002b8c:	08002bbf 	.word	0x08002bbf
 8002b90:	08002bbf 	.word	0x08002bbf
 8002b94:	08002bb7 	.word	0x08002bb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b98:	f7ff f992 	bl	8001ec0 <HAL_RCC_GetPCLK1Freq>
 8002b9c:	6178      	str	r0, [r7, #20]
        break;
 8002b9e:	e013      	b.n	8002bc8 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ba0:	f7ff f9a4 	bl	8001eec <HAL_RCC_GetPCLK2Freq>
 8002ba4:	6178      	str	r0, [r7, #20]
        break;
 8002ba6:	e00f      	b.n	8002bc8 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ba8:	4b57      	ldr	r3, [pc, #348]	; (8002d08 <UART_SetConfig+0x54c>)
 8002baa:	617b      	str	r3, [r7, #20]
        break;
 8002bac:	e00c      	b.n	8002bc8 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bae:	f7ff f919 	bl	8001de4 <HAL_RCC_GetSysClockFreq>
 8002bb2:	6178      	str	r0, [r7, #20]
        break;
 8002bb4:	e008      	b.n	8002bc8 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bba:	617b      	str	r3, [r7, #20]
        break;
 8002bbc:	e004      	b.n	8002bc8 <UART_SetConfig+0x40c>
      default:
        pclk = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	76bb      	strb	r3, [r7, #26]
        break;
 8002bc6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 8086 	beq.w	8002cdc <UART_SetConfig+0x520>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd4:	4a4b      	ldr	r2, [pc, #300]	; (8002d04 <UART_SetConfig+0x548>)
 8002bd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	fbb3 f3f2 	udiv	r3, r3, r2
 8002be2:	005a      	lsls	r2, r3, #1
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	085b      	lsrs	r3, r3, #1
 8002bea:	441a      	add	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	2b0f      	cmp	r3, #15
 8002bfc:	d916      	bls.n	8002c2c <UART_SetConfig+0x470>
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c04:	d212      	bcs.n	8002c2c <UART_SetConfig+0x470>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	f023 030f 	bic.w	r3, r3, #15
 8002c0e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	085b      	lsrs	r3, r3, #1
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	89fb      	ldrh	r3, [r7, #14]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	89fa      	ldrh	r2, [r7, #14]
 8002c28:	60da      	str	r2, [r3, #12]
 8002c2a:	e057      	b.n	8002cdc <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	76bb      	strb	r3, [r7, #26]
 8002c30:	e054      	b.n	8002cdc <UART_SetConfig+0x520>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c32:	7efb      	ldrb	r3, [r7, #27]
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d828      	bhi.n	8002c8a <UART_SetConfig+0x4ce>
 8002c38:	a201      	add	r2, pc, #4	; (adr r2, 8002c40 <UART_SetConfig+0x484>)
 8002c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3e:	bf00      	nop
 8002c40:	08002c65 	.word	0x08002c65
 8002c44:	08002c6d 	.word	0x08002c6d
 8002c48:	08002c75 	.word	0x08002c75
 8002c4c:	08002c8b 	.word	0x08002c8b
 8002c50:	08002c7b 	.word	0x08002c7b
 8002c54:	08002c8b 	.word	0x08002c8b
 8002c58:	08002c8b 	.word	0x08002c8b
 8002c5c:	08002c8b 	.word	0x08002c8b
 8002c60:	08002c83 	.word	0x08002c83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c64:	f7ff f92c 	bl	8001ec0 <HAL_RCC_GetPCLK1Freq>
 8002c68:	6178      	str	r0, [r7, #20]
        break;
 8002c6a:	e013      	b.n	8002c94 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c6c:	f7ff f93e 	bl	8001eec <HAL_RCC_GetPCLK2Freq>
 8002c70:	6178      	str	r0, [r7, #20]
        break;
 8002c72:	e00f      	b.n	8002c94 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c74:	4b24      	ldr	r3, [pc, #144]	; (8002d08 <UART_SetConfig+0x54c>)
 8002c76:	617b      	str	r3, [r7, #20]
        break;
 8002c78:	e00c      	b.n	8002c94 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c7a:	f7ff f8b3 	bl	8001de4 <HAL_RCC_GetSysClockFreq>
 8002c7e:	6178      	str	r0, [r7, #20]
        break;
 8002c80:	e008      	b.n	8002c94 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c86:	617b      	str	r3, [r7, #20]
        break;
 8002c88:	e004      	b.n	8002c94 <UART_SetConfig+0x4d8>
      default:
        pclk = 0U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	76bb      	strb	r3, [r7, #26]
        break;
 8002c92:	bf00      	nop
    }

    if (pclk != 0U)
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d020      	beq.n	8002cdc <UART_SetConfig+0x520>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	4a19      	ldr	r2, [pc, #100]	; (8002d04 <UART_SetConfig+0x548>)
 8002ca0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	fbb3 f2f2 	udiv	r2, r3, r2
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	085b      	lsrs	r3, r3, #1
 8002cb2:	441a      	add	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	2b0f      	cmp	r3, #15
 8002cc4:	d908      	bls.n	8002cd8 <UART_SetConfig+0x51c>
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ccc:	d204      	bcs.n	8002cd8 <UART_SetConfig+0x51c>
      {
        huart->Instance->BRR = usartdiv;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	60da      	str	r2, [r3, #12]
 8002cd6:	e001      	b.n	8002cdc <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8002cf8:	7ebb      	ldrb	r3, [r7, #26]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3720      	adds	r7, #32
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8002d04:	08005dec 	.word	0x08005dec
 8002d08:	00f42400 	.word	0x00f42400

08002d0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00a      	beq.n	8002d36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00a      	beq.n	8002d58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00a      	beq.n	8002d7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00a      	beq.n	8002d9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da0:	f003 0310 	and.w	r3, r3, #16
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00a      	beq.n	8002dbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc2:	f003 0320 	and.w	r3, r3, #32
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00a      	beq.n	8002de0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d01a      	beq.n	8002e22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e0a:	d10a      	bne.n	8002e22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00a      	beq.n	8002e44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	605a      	str	r2, [r3, #4]
  }
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af02      	add	r7, sp, #8
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e60:	f7fd ffd2 	bl	8000e08 <HAL_GetTick>
 8002e64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0308 	and.w	r3, r3, #8
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	d10e      	bne.n	8002e92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f82c 	bl	8002ee0 <UART_WaitOnFlagUntilTimeout>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e022      	b.n	8002ed8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b04      	cmp	r3, #4
 8002e9e:	d10e      	bne.n	8002ebe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ea0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 f816 	bl	8002ee0 <UART_WaitOnFlagUntilTimeout>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e00c      	b.n	8002ed8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2220      	movs	r2, #32
 8002eca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	603b      	str	r3, [r7, #0]
 8002eec:	4613      	mov	r3, r2
 8002eee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ef0:	e062      	b.n	8002fb8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ef8:	d05e      	beq.n	8002fb8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002efa:	f7fd ff85 	bl	8000e08 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d302      	bcc.n	8002f10 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d11d      	bne.n	8002f4c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f1e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0201 	bic.w	r2, r2, #1
 8002f2e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2220      	movs	r2, #32
 8002f34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e045      	b.n	8002fd8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0304 	and.w	r3, r3, #4
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d02e      	beq.n	8002fb8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	69db      	ldr	r3, [r3, #28]
 8002f60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f68:	d126      	bne.n	8002fb8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f72:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f82:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689a      	ldr	r2, [r3, #8]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 0201 	bic.w	r2, r2, #1
 8002f92:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2220      	movs	r2, #32
 8002f98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e00f      	b.n	8002fd8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	69da      	ldr	r2, [r3, #28]
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	bf0c      	ite	eq
 8002fc8:	2301      	moveq	r3, #1
 8002fca:	2300      	movne	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	461a      	mov	r2, r3
 8002fd0:	79fb      	ldrb	r3, [r7, #7]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d08d      	beq.n	8002ef2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d101      	bne.n	8002ff6 <HAL_UARTEx_DisableFifoMode+0x16>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	e027      	b.n	8003046 <HAL_UARTEx_DisableFifoMode+0x66>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2224      	movs	r2, #36	; 0x24
 8003002:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 0201 	bic.w	r2, r2, #1
 800301c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003024:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2220      	movs	r2, #32
 8003038:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3714      	adds	r7, #20
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b084      	sub	sp, #16
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
 800305a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003062:	2b01      	cmp	r3, #1
 8003064:	d101      	bne.n	800306a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003066:	2302      	movs	r3, #2
 8003068:	e02d      	b.n	80030c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2224      	movs	r2, #36	; 0x24
 8003076:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 0201 	bic.w	r2, r2, #1
 8003090:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f850 	bl	800314c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2220      	movs	r2, #32
 80030b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b084      	sub	sp, #16
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
 80030d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d101      	bne.n	80030e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e02d      	b.n	8003142 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2224      	movs	r2, #36	; 0x24
 80030f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0201 	bic.w	r2, r2, #1
 800310c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f812 	bl	800314c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2220      	movs	r2, #32
 8003134:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
	...

0800314c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800314c:	b480      	push	{r7}
 800314e:	b089      	sub	sp, #36	; 0x24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003154:	4a2f      	ldr	r2, [pc, #188]	; (8003214 <UARTEx_SetNbDataToProcess+0xc8>)
 8003156:	f107 0314 	add.w	r3, r7, #20
 800315a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800315e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003162:	4a2d      	ldr	r2, [pc, #180]	; (8003218 <UARTEx_SetNbDataToProcess+0xcc>)
 8003164:	f107 030c 	add.w	r3, r7, #12
 8003168:	e892 0003 	ldmia.w	r2, {r0, r1}
 800316c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003174:	2b00      	cmp	r3, #0
 8003176:	d108      	bne.n	800318a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003188:	e03d      	b.n	8003206 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800318a:	2308      	movs	r3, #8
 800318c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800318e:	2308      	movs	r3, #8
 8003190:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	0e5b      	lsrs	r3, r3, #25
 800319a:	b2db      	uxtb	r3, r3
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	0f5b      	lsrs	r3, r3, #29
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80031b2:	7fbb      	ldrb	r3, [r7, #30]
 80031b4:	7f3a      	ldrb	r2, [r7, #28]
 80031b6:	f107 0120 	add.w	r1, r7, #32
 80031ba:	440a      	add	r2, r1
 80031bc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80031c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80031c4:	7f3a      	ldrb	r2, [r7, #28]
 80031c6:	f107 0120 	add.w	r1, r7, #32
 80031ca:	440a      	add	r2, r1
 80031cc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80031d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80031dc:	7ffb      	ldrb	r3, [r7, #31]
 80031de:	7f7a      	ldrb	r2, [r7, #29]
 80031e0:	f107 0120 	add.w	r1, r7, #32
 80031e4:	440a      	add	r2, r1
 80031e6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80031ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80031ee:	7f7a      	ldrb	r2, [r7, #29]
 80031f0:	f107 0120 	add.w	r1, r7, #32
 80031f4:	440a      	add	r2, r1
 80031f6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80031fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80031fe:	b29a      	uxth	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003206:	bf00      	nop
 8003208:	3724      	adds	r7, #36	; 0x24
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	08005d64 	.word	0x08005d64
 8003218:	08005d6c 	.word	0x08005d6c

0800321c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003220:	bf00      	nop
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
	...

0800322c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003232:	f3ef 8305 	mrs	r3, IPSR
 8003236:	60bb      	str	r3, [r7, #8]
  return(result);
 8003238:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10f      	bne.n	800325e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800323e:	f3ef 8310 	mrs	r3, PRIMASK
 8003242:	607b      	str	r3, [r7, #4]
  return(result);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d105      	bne.n	8003256 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800324a:	f3ef 8311 	mrs	r3, BASEPRI
 800324e:	603b      	str	r3, [r7, #0]
  return(result);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d007      	beq.n	8003266 <osKernelInitialize+0x3a>
 8003256:	4b0e      	ldr	r3, [pc, #56]	; (8003290 <osKernelInitialize+0x64>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2b02      	cmp	r3, #2
 800325c:	d103      	bne.n	8003266 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800325e:	f06f 0305 	mvn.w	r3, #5
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	e00c      	b.n	8003280 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003266:	4b0a      	ldr	r3, [pc, #40]	; (8003290 <osKernelInitialize+0x64>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d105      	bne.n	800327a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800326e:	4b08      	ldr	r3, [pc, #32]	; (8003290 <osKernelInitialize+0x64>)
 8003270:	2201      	movs	r2, #1
 8003272:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003274:	2300      	movs	r3, #0
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	e002      	b.n	8003280 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800327a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800327e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003280:	68fb      	ldr	r3, [r7, #12]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	20000030 	.word	0x20000030

08003294 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800329a:	f3ef 8305 	mrs	r3, IPSR
 800329e:	60bb      	str	r3, [r7, #8]
  return(result);
 80032a0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10f      	bne.n	80032c6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032a6:	f3ef 8310 	mrs	r3, PRIMASK
 80032aa:	607b      	str	r3, [r7, #4]
  return(result);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d105      	bne.n	80032be <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80032b2:	f3ef 8311 	mrs	r3, BASEPRI
 80032b6:	603b      	str	r3, [r7, #0]
  return(result);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d007      	beq.n	80032ce <osKernelStart+0x3a>
 80032be:	4b0f      	ldr	r3, [pc, #60]	; (80032fc <osKernelStart+0x68>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d103      	bne.n	80032ce <osKernelStart+0x3a>
    stat = osErrorISR;
 80032c6:	f06f 0305 	mvn.w	r3, #5
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	e010      	b.n	80032f0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80032ce:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <osKernelStart+0x68>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d109      	bne.n	80032ea <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80032d6:	f7ff ffa1 	bl	800321c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80032da:	4b08      	ldr	r3, [pc, #32]	; (80032fc <osKernelStart+0x68>)
 80032dc:	2202      	movs	r2, #2
 80032de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80032e0:	f001 f870 	bl	80043c4 <vTaskStartScheduler>
      stat = osOK;
 80032e4:	2300      	movs	r3, #0
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	e002      	b.n	80032f0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80032ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80032f0:	68fb      	ldr	r3, [r7, #12]
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	20000030 	.word	0x20000030

08003300 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003300:	b580      	push	{r7, lr}
 8003302:	b090      	sub	sp, #64	; 0x40
 8003304:	af04      	add	r7, sp, #16
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800330c:	2300      	movs	r3, #0
 800330e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003310:	f3ef 8305 	mrs	r3, IPSR
 8003314:	61fb      	str	r3, [r7, #28]
  return(result);
 8003316:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003318:	2b00      	cmp	r3, #0
 800331a:	f040 808f 	bne.w	800343c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800331e:	f3ef 8310 	mrs	r3, PRIMASK
 8003322:	61bb      	str	r3, [r7, #24]
  return(result);
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d105      	bne.n	8003336 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800332a:	f3ef 8311 	mrs	r3, BASEPRI
 800332e:	617b      	str	r3, [r7, #20]
  return(result);
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <osThreadNew+0x3e>
 8003336:	4b44      	ldr	r3, [pc, #272]	; (8003448 <osThreadNew+0x148>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d07e      	beq.n	800343c <osThreadNew+0x13c>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d07b      	beq.n	800343c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003344:	2380      	movs	r3, #128	; 0x80
 8003346:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003348:	2318      	movs	r3, #24
 800334a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800334c:	2300      	movs	r3, #0
 800334e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003350:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003354:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d045      	beq.n	80033e8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d002      	beq.n	800336a <osThreadNew+0x6a>
        name = attr->name;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d002      	beq.n	8003378 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337a:	2b00      	cmp	r3, #0
 800337c:	d008      	beq.n	8003390 <osThreadNew+0x90>
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	2b38      	cmp	r3, #56	; 0x38
 8003382:	d805      	bhi.n	8003390 <osThreadNew+0x90>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <osThreadNew+0x94>
        return (NULL);
 8003390:	2300      	movs	r3, #0
 8003392:	e054      	b.n	800343e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d003      	beq.n	80033a4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	089b      	lsrs	r3, r3, #2
 80033a2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00e      	beq.n	80033ca <osThreadNew+0xca>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	2b5b      	cmp	r3, #91	; 0x5b
 80033b2:	d90a      	bls.n	80033ca <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d006      	beq.n	80033ca <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d002      	beq.n	80033ca <osThreadNew+0xca>
        mem = 1;
 80033c4:	2301      	movs	r3, #1
 80033c6:	623b      	str	r3, [r7, #32]
 80033c8:	e010      	b.n	80033ec <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10c      	bne.n	80033ec <osThreadNew+0xec>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d108      	bne.n	80033ec <osThreadNew+0xec>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d104      	bne.n	80033ec <osThreadNew+0xec>
          mem = 0;
 80033e2:	2300      	movs	r3, #0
 80033e4:	623b      	str	r3, [r7, #32]
 80033e6:	e001      	b.n	80033ec <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80033e8:	2300      	movs	r3, #0
 80033ea:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d110      	bne.n	8003414 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80033fa:	9202      	str	r2, [sp, #8]
 80033fc:	9301      	str	r3, [sp, #4]
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003406:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 fe09 	bl	8004020 <xTaskCreateStatic>
 800340e:	4603      	mov	r3, r0
 8003410:	613b      	str	r3, [r7, #16]
 8003412:	e013      	b.n	800343c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d110      	bne.n	800343c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800341a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341c:	b29a      	uxth	r2, r3
 800341e:	f107 0310 	add.w	r3, r7, #16
 8003422:	9301      	str	r3, [sp, #4]
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f000 fe51 	bl	80040d4 <xTaskCreate>
 8003432:	4603      	mov	r3, r0
 8003434:	2b01      	cmp	r3, #1
 8003436:	d001      	beq.n	800343c <osThreadNew+0x13c>
          hTask = NULL;
 8003438:	2300      	movs	r3, #0
 800343a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800343c:	693b      	ldr	r3, [r7, #16]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3730      	adds	r7, #48	; 0x30
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	20000030 	.word	0x20000030

0800344c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003454:	f3ef 8305 	mrs	r3, IPSR
 8003458:	613b      	str	r3, [r7, #16]
  return(result);
 800345a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10f      	bne.n	8003480 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003460:	f3ef 8310 	mrs	r3, PRIMASK
 8003464:	60fb      	str	r3, [r7, #12]
  return(result);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d105      	bne.n	8003478 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800346c:	f3ef 8311 	mrs	r3, BASEPRI
 8003470:	60bb      	str	r3, [r7, #8]
  return(result);
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d007      	beq.n	8003488 <osDelay+0x3c>
 8003478:	4b0a      	ldr	r3, [pc, #40]	; (80034a4 <osDelay+0x58>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b02      	cmp	r3, #2
 800347e:	d103      	bne.n	8003488 <osDelay+0x3c>
    stat = osErrorISR;
 8003480:	f06f 0305 	mvn.w	r3, #5
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	e007      	b.n	8003498 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003488:	2300      	movs	r3, #0
 800348a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 ff62 	bl	800435c <vTaskDelay>
    }
  }

  return (stat);
 8003498:	697b      	ldr	r3, [r7, #20]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3718      	adds	r7, #24
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20000030 	.word	0x20000030

080034a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	4a07      	ldr	r2, [pc, #28]	; (80034d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80034b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	4a06      	ldr	r2, [pc, #24]	; (80034d8 <vApplicationGetIdleTaskMemory+0x30>)
 80034be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2280      	movs	r2, #128	; 0x80
 80034c4:	601a      	str	r2, [r3, #0]
}
 80034c6:	bf00      	nop
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	20000034 	.word	0x20000034
 80034d8:	20000090 	.word	0x20000090

080034dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4a07      	ldr	r2, [pc, #28]	; (8003508 <vApplicationGetTimerTaskMemory+0x2c>)
 80034ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	4a06      	ldr	r2, [pc, #24]	; (800350c <vApplicationGetTimerTaskMemory+0x30>)
 80034f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034fa:	601a      	str	r2, [r3, #0]
}
 80034fc:	bf00      	nop
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	20000290 	.word	0x20000290
 800350c:	200002ec 	.word	0x200002ec

08003510 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f103 0208 	add.w	r2, r3, #8
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003528:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f103 0208 	add.w	r2, r3, #8
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f103 0208 	add.w	r2, r3, #8
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800356a:	b480      	push	{r7}
 800356c:	b085      	sub	sp, #20
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
 8003572:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	1c5a      	adds	r2, r3, #1
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	601a      	str	r2, [r3, #0]
}
 80035a6:	bf00      	nop
 80035a8:	3714      	adds	r7, #20
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035b2:	b480      	push	{r7}
 80035b4:	b085      	sub	sp, #20
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
 80035ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035c8:	d103      	bne.n	80035d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	e00c      	b.n	80035ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	3308      	adds	r3, #8
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	e002      	b.n	80035e0 <vListInsert+0x2e>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	60fb      	str	r3, [r7, #12]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d2f6      	bcs.n	80035da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	1c5a      	adds	r2, r3, #1
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	601a      	str	r2, [r3, #0]
}
 8003618:	bf00      	nop
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6892      	ldr	r2, [r2, #8]
 800363a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6852      	ldr	r2, [r2, #4]
 8003644:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	429a      	cmp	r2, r3
 800364e:	d103      	bne.n	8003658 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	1e5a      	subs	r2, r3, #1
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
}
 800366c:	4618      	mov	r0, r3
 800366e:	3714      	adds	r7, #20
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d109      	bne.n	80036a0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800368c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003690:	f383 8811 	msr	BASEPRI, r3
 8003694:	f3bf 8f6f 	isb	sy
 8003698:	f3bf 8f4f 	dsb	sy
 800369c:	60bb      	str	r3, [r7, #8]
 800369e:	e7fe      	b.n	800369e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80036a0:	f002 f814 	bl	80056cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ac:	68f9      	ldr	r1, [r7, #12]
 80036ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80036b0:	fb01 f303 	mul.w	r3, r1, r3
 80036b4:	441a      	add	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d0:	3b01      	subs	r3, #1
 80036d2:	68f9      	ldr	r1, [r7, #12]
 80036d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80036d6:	fb01 f303 	mul.w	r3, r1, r3
 80036da:	441a      	add	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	22ff      	movs	r2, #255	; 0xff
 80036e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	22ff      	movs	r2, #255	; 0xff
 80036ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d114      	bne.n	8003720 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d01a      	beq.n	8003734 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	3310      	adds	r3, #16
 8003702:	4618      	mov	r0, r3
 8003704:	f001 f8de 	bl	80048c4 <xTaskRemoveFromEventList>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d012      	beq.n	8003734 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800370e:	4b0d      	ldr	r3, [pc, #52]	; (8003744 <xQueueGenericReset+0xcc>)
 8003710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	f3bf 8f4f 	dsb	sy
 800371a:	f3bf 8f6f 	isb	sy
 800371e:	e009      	b.n	8003734 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	3310      	adds	r3, #16
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff fef3 	bl	8003510 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	3324      	adds	r3, #36	; 0x24
 800372e:	4618      	mov	r0, r3
 8003730:	f7ff feee 	bl	8003510 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003734:	f001 fff8 	bl	8005728 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003738:	2301      	movs	r3, #1
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	e000ed04 	.word	0xe000ed04

08003748 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003748:	b580      	push	{r7, lr}
 800374a:	b08e      	sub	sp, #56	; 0x38
 800374c:	af02      	add	r7, sp, #8
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
 8003754:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d109      	bne.n	8003770 <xQueueGenericCreateStatic+0x28>
 800375c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003760:	f383 8811 	msr	BASEPRI, r3
 8003764:	f3bf 8f6f 	isb	sy
 8003768:	f3bf 8f4f 	dsb	sy
 800376c:	62bb      	str	r3, [r7, #40]	; 0x28
 800376e:	e7fe      	b.n	800376e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d109      	bne.n	800378a <xQueueGenericCreateStatic+0x42>
 8003776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377a:	f383 8811 	msr	BASEPRI, r3
 800377e:	f3bf 8f6f 	isb	sy
 8003782:	f3bf 8f4f 	dsb	sy
 8003786:	627b      	str	r3, [r7, #36]	; 0x24
 8003788:	e7fe      	b.n	8003788 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <xQueueGenericCreateStatic+0x4e>
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <xQueueGenericCreateStatic+0x52>
 8003796:	2301      	movs	r3, #1
 8003798:	e000      	b.n	800379c <xQueueGenericCreateStatic+0x54>
 800379a:	2300      	movs	r3, #0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d109      	bne.n	80037b4 <xQueueGenericCreateStatic+0x6c>
 80037a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a4:	f383 8811 	msr	BASEPRI, r3
 80037a8:	f3bf 8f6f 	isb	sy
 80037ac:	f3bf 8f4f 	dsb	sy
 80037b0:	623b      	str	r3, [r7, #32]
 80037b2:	e7fe      	b.n	80037b2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d102      	bne.n	80037c0 <xQueueGenericCreateStatic+0x78>
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <xQueueGenericCreateStatic+0x7c>
 80037c0:	2301      	movs	r3, #1
 80037c2:	e000      	b.n	80037c6 <xQueueGenericCreateStatic+0x7e>
 80037c4:	2300      	movs	r3, #0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d109      	bne.n	80037de <xQueueGenericCreateStatic+0x96>
 80037ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ce:	f383 8811 	msr	BASEPRI, r3
 80037d2:	f3bf 8f6f 	isb	sy
 80037d6:	f3bf 8f4f 	dsb	sy
 80037da:	61fb      	str	r3, [r7, #28]
 80037dc:	e7fe      	b.n	80037dc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80037de:	2350      	movs	r3, #80	; 0x50
 80037e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	2b50      	cmp	r3, #80	; 0x50
 80037e6:	d009      	beq.n	80037fc <xQueueGenericCreateStatic+0xb4>
 80037e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ec:	f383 8811 	msr	BASEPRI, r3
 80037f0:	f3bf 8f6f 	isb	sy
 80037f4:	f3bf 8f4f 	dsb	sy
 80037f8:	61bb      	str	r3, [r7, #24]
 80037fa:	e7fe      	b.n	80037fa <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80037fc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00d      	beq.n	8003824 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003810:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	4613      	mov	r3, r2
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	68b9      	ldr	r1, [r7, #8]
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 f805 	bl	800382e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003826:	4618      	mov	r0, r3
 8003828:	3730      	adds	r7, #48	; 0x30
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b084      	sub	sp, #16
 8003832:	af00      	add	r7, sp, #0
 8003834:	60f8      	str	r0, [r7, #12]
 8003836:	60b9      	str	r1, [r7, #8]
 8003838:	607a      	str	r2, [r7, #4]
 800383a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d103      	bne.n	800384a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	e002      	b.n	8003850 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800385c:	2101      	movs	r1, #1
 800385e:	69b8      	ldr	r0, [r7, #24]
 8003860:	f7ff ff0a 	bl	8003678 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	78fa      	ldrb	r2, [r7, #3]
 8003868:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800386c:	bf00      	nop
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b08e      	sub	sp, #56	; 0x38
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003882:	2300      	movs	r3, #0
 8003884:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800388a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388c:	2b00      	cmp	r3, #0
 800388e:	d109      	bne.n	80038a4 <xQueueGenericSend+0x30>
 8003890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003894:	f383 8811 	msr	BASEPRI, r3
 8003898:	f3bf 8f6f 	isb	sy
 800389c:	f3bf 8f4f 	dsb	sy
 80038a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80038a2:	e7fe      	b.n	80038a2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d103      	bne.n	80038b2 <xQueueGenericSend+0x3e>
 80038aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <xQueueGenericSend+0x42>
 80038b2:	2301      	movs	r3, #1
 80038b4:	e000      	b.n	80038b8 <xQueueGenericSend+0x44>
 80038b6:	2300      	movs	r3, #0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d109      	bne.n	80038d0 <xQueueGenericSend+0x5c>
 80038bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c0:	f383 8811 	msr	BASEPRI, r3
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	f3bf 8f4f 	dsb	sy
 80038cc:	627b      	str	r3, [r7, #36]	; 0x24
 80038ce:	e7fe      	b.n	80038ce <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d103      	bne.n	80038de <xQueueGenericSend+0x6a>
 80038d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d101      	bne.n	80038e2 <xQueueGenericSend+0x6e>
 80038de:	2301      	movs	r3, #1
 80038e0:	e000      	b.n	80038e4 <xQueueGenericSend+0x70>
 80038e2:	2300      	movs	r3, #0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d109      	bne.n	80038fc <xQueueGenericSend+0x88>
 80038e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ec:	f383 8811 	msr	BASEPRI, r3
 80038f0:	f3bf 8f6f 	isb	sy
 80038f4:	f3bf 8f4f 	dsb	sy
 80038f8:	623b      	str	r3, [r7, #32]
 80038fa:	e7fe      	b.n	80038fa <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038fc:	f001 f998 	bl	8004c30 <xTaskGetSchedulerState>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d102      	bne.n	800390c <xQueueGenericSend+0x98>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <xQueueGenericSend+0x9c>
 800390c:	2301      	movs	r3, #1
 800390e:	e000      	b.n	8003912 <xQueueGenericSend+0x9e>
 8003910:	2300      	movs	r3, #0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d109      	bne.n	800392a <xQueueGenericSend+0xb6>
 8003916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391a:	f383 8811 	msr	BASEPRI, r3
 800391e:	f3bf 8f6f 	isb	sy
 8003922:	f3bf 8f4f 	dsb	sy
 8003926:	61fb      	str	r3, [r7, #28]
 8003928:	e7fe      	b.n	8003928 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800392a:	f001 fecf 	bl	80056cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800392e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003936:	429a      	cmp	r2, r3
 8003938:	d302      	bcc.n	8003940 <xQueueGenericSend+0xcc>
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2b02      	cmp	r3, #2
 800393e:	d129      	bne.n	8003994 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	68b9      	ldr	r1, [r7, #8]
 8003944:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003946:	f000 f9ff 	bl	8003d48 <prvCopyDataToQueue>
 800394a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800394c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	2b00      	cmp	r3, #0
 8003952:	d010      	beq.n	8003976 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003956:	3324      	adds	r3, #36	; 0x24
 8003958:	4618      	mov	r0, r3
 800395a:	f000 ffb3 	bl	80048c4 <xTaskRemoveFromEventList>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d013      	beq.n	800398c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003964:	4b3f      	ldr	r3, [pc, #252]	; (8003a64 <xQueueGenericSend+0x1f0>)
 8003966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	f3bf 8f6f 	isb	sy
 8003974:	e00a      	b.n	800398c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003978:	2b00      	cmp	r3, #0
 800397a:	d007      	beq.n	800398c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800397c:	4b39      	ldr	r3, [pc, #228]	; (8003a64 <xQueueGenericSend+0x1f0>)
 800397e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	f3bf 8f4f 	dsb	sy
 8003988:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800398c:	f001 fecc 	bl	8005728 <vPortExitCritical>
				return pdPASS;
 8003990:	2301      	movs	r3, #1
 8003992:	e063      	b.n	8003a5c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d103      	bne.n	80039a2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800399a:	f001 fec5 	bl	8005728 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800399e:	2300      	movs	r3, #0
 80039a0:	e05c      	b.n	8003a5c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d106      	bne.n	80039b6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039a8:	f107 0314 	add.w	r3, r7, #20
 80039ac:	4618      	mov	r0, r3
 80039ae:	f000 ffeb 	bl	8004988 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039b2:	2301      	movs	r3, #1
 80039b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039b6:	f001 feb7 	bl	8005728 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039ba:	f000 fd67 	bl	800448c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039be:	f001 fe85 	bl	80056cc <vPortEnterCritical>
 80039c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039c8:	b25b      	sxtb	r3, r3
 80039ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039ce:	d103      	bne.n	80039d8 <xQueueGenericSend+0x164>
 80039d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039de:	b25b      	sxtb	r3, r3
 80039e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039e4:	d103      	bne.n	80039ee <xQueueGenericSend+0x17a>
 80039e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039ee:	f001 fe9b 	bl	8005728 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039f2:	1d3a      	adds	r2, r7, #4
 80039f4:	f107 0314 	add.w	r3, r7, #20
 80039f8:	4611      	mov	r1, r2
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 ffda 	bl	80049b4 <xTaskCheckForTimeOut>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d124      	bne.n	8003a50 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a08:	f000 fa96 	bl	8003f38 <prvIsQueueFull>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d018      	beq.n	8003a44 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a14:	3310      	adds	r3, #16
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	4611      	mov	r1, r2
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 ff04 	bl	8004828 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a22:	f000 fa21 	bl	8003e68 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a26:	f000 fd3f 	bl	80044a8 <xTaskResumeAll>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f47f af7c 	bne.w	800392a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003a32:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <xQueueGenericSend+0x1f0>)
 8003a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	f3bf 8f4f 	dsb	sy
 8003a3e:	f3bf 8f6f 	isb	sy
 8003a42:	e772      	b.n	800392a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003a44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a46:	f000 fa0f 	bl	8003e68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a4a:	f000 fd2d 	bl	80044a8 <xTaskResumeAll>
 8003a4e:	e76c      	b.n	800392a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003a50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a52:	f000 fa09 	bl	8003e68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a56:	f000 fd27 	bl	80044a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003a5a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3738      	adds	r7, #56	; 0x38
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	e000ed04 	.word	0xe000ed04

08003a68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b08e      	sub	sp, #56	; 0x38
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
 8003a74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d109      	bne.n	8003a94 <xQueueGenericSendFromISR+0x2c>
 8003a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a84:	f383 8811 	msr	BASEPRI, r3
 8003a88:	f3bf 8f6f 	isb	sy
 8003a8c:	f3bf 8f4f 	dsb	sy
 8003a90:	627b      	str	r3, [r7, #36]	; 0x24
 8003a92:	e7fe      	b.n	8003a92 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d103      	bne.n	8003aa2 <xQueueGenericSendFromISR+0x3a>
 8003a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <xQueueGenericSendFromISR+0x3e>
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e000      	b.n	8003aa8 <xQueueGenericSendFromISR+0x40>
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d109      	bne.n	8003ac0 <xQueueGenericSendFromISR+0x58>
 8003aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab0:	f383 8811 	msr	BASEPRI, r3
 8003ab4:	f3bf 8f6f 	isb	sy
 8003ab8:	f3bf 8f4f 	dsb	sy
 8003abc:	623b      	str	r3, [r7, #32]
 8003abe:	e7fe      	b.n	8003abe <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d103      	bne.n	8003ace <xQueueGenericSendFromISR+0x66>
 8003ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d101      	bne.n	8003ad2 <xQueueGenericSendFromISR+0x6a>
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e000      	b.n	8003ad4 <xQueueGenericSendFromISR+0x6c>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d109      	bne.n	8003aec <xQueueGenericSendFromISR+0x84>
 8003ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003adc:	f383 8811 	msr	BASEPRI, r3
 8003ae0:	f3bf 8f6f 	isb	sy
 8003ae4:	f3bf 8f4f 	dsb	sy
 8003ae8:	61fb      	str	r3, [r7, #28]
 8003aea:	e7fe      	b.n	8003aea <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003aec:	f001 feca 	bl	8005884 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003af0:	f3ef 8211 	mrs	r2, BASEPRI
 8003af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	61ba      	str	r2, [r7, #24]
 8003b06:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b08:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d302      	bcc.n	8003b1e <xQueueGenericSendFromISR+0xb6>
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d12c      	bne.n	8003b78 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	68b9      	ldr	r1, [r7, #8]
 8003b2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b2e:	f000 f90b 	bl	8003d48 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b32:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003b36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b3a:	d112      	bne.n	8003b62 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d016      	beq.n	8003b72 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b46:	3324      	adds	r3, #36	; 0x24
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 febb 	bl	80048c4 <xTaskRemoveFromEventList>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00e      	beq.n	8003b72 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00b      	beq.n	8003b72 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	e007      	b.n	8003b72 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b66:	3301      	adds	r3, #1
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	b25a      	sxtb	r2, r3
 8003b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003b72:	2301      	movs	r3, #1
 8003b74:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003b76:	e001      	b.n	8003b7c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3738      	adds	r7, #56	; 0x38
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b08c      	sub	sp, #48	; 0x30
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d109      	bne.n	8003bbe <xQueueReceive+0x2e>
	__asm volatile
 8003baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bae:	f383 8811 	msr	BASEPRI, r3
 8003bb2:	f3bf 8f6f 	isb	sy
 8003bb6:	f3bf 8f4f 	dsb	sy
 8003bba:	623b      	str	r3, [r7, #32]
 8003bbc:	e7fe      	b.n	8003bbc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d103      	bne.n	8003bcc <xQueueReceive+0x3c>
 8003bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <xQueueReceive+0x40>
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e000      	b.n	8003bd2 <xQueueReceive+0x42>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d109      	bne.n	8003bea <xQueueReceive+0x5a>
 8003bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bda:	f383 8811 	msr	BASEPRI, r3
 8003bde:	f3bf 8f6f 	isb	sy
 8003be2:	f3bf 8f4f 	dsb	sy
 8003be6:	61fb      	str	r3, [r7, #28]
 8003be8:	e7fe      	b.n	8003be8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bea:	f001 f821 	bl	8004c30 <xTaskGetSchedulerState>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d102      	bne.n	8003bfa <xQueueReceive+0x6a>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <xQueueReceive+0x6e>
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e000      	b.n	8003c00 <xQueueReceive+0x70>
 8003bfe:	2300      	movs	r3, #0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d109      	bne.n	8003c18 <xQueueReceive+0x88>
 8003c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c08:	f383 8811 	msr	BASEPRI, r3
 8003c0c:	f3bf 8f6f 	isb	sy
 8003c10:	f3bf 8f4f 	dsb	sy
 8003c14:	61bb      	str	r3, [r7, #24]
 8003c16:	e7fe      	b.n	8003c16 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c18:	f001 fd58 	bl	80056cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d01f      	beq.n	8003c68 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c28:	68b9      	ldr	r1, [r7, #8]
 8003c2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c2c:	f000 f8f6 	bl	8003e1c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	1e5a      	subs	r2, r3, #1
 8003c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c36:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00f      	beq.n	8003c60 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c42:	3310      	adds	r3, #16
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 fe3d 	bl	80048c4 <xTaskRemoveFromEventList>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d007      	beq.n	8003c60 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c50:	4b3c      	ldr	r3, [pc, #240]	; (8003d44 <xQueueReceive+0x1b4>)
 8003c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	f3bf 8f4f 	dsb	sy
 8003c5c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c60:	f001 fd62 	bl	8005728 <vPortExitCritical>
				return pdPASS;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e069      	b.n	8003d3c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d103      	bne.n	8003c76 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c6e:	f001 fd5b 	bl	8005728 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c72:	2300      	movs	r3, #0
 8003c74:	e062      	b.n	8003d3c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d106      	bne.n	8003c8a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c7c:	f107 0310 	add.w	r3, r7, #16
 8003c80:	4618      	mov	r0, r3
 8003c82:	f000 fe81 	bl	8004988 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c86:	2301      	movs	r3, #1
 8003c88:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c8a:	f001 fd4d 	bl	8005728 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c8e:	f000 fbfd 	bl	800448c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c92:	f001 fd1b 	bl	80056cc <vPortEnterCritical>
 8003c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c9c:	b25b      	sxtb	r3, r3
 8003c9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ca2:	d103      	bne.n	8003cac <xQueueReceive+0x11c>
 8003ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cb2:	b25b      	sxtb	r3, r3
 8003cb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cb8:	d103      	bne.n	8003cc2 <xQueueReceive+0x132>
 8003cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cc2:	f001 fd31 	bl	8005728 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cc6:	1d3a      	adds	r2, r7, #4
 8003cc8:	f107 0310 	add.w	r3, r7, #16
 8003ccc:	4611      	mov	r1, r2
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 fe70 	bl	80049b4 <xTaskCheckForTimeOut>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d123      	bne.n	8003d22 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cdc:	f000 f916 	bl	8003f0c <prvIsQueueEmpty>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d017      	beq.n	8003d16 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce8:	3324      	adds	r3, #36	; 0x24
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	4611      	mov	r1, r2
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 fd9a 	bl	8004828 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003cf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cf6:	f000 f8b7 	bl	8003e68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003cfa:	f000 fbd5 	bl	80044a8 <xTaskResumeAll>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d189      	bne.n	8003c18 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003d04:	4b0f      	ldr	r3, [pc, #60]	; (8003d44 <xQueueReceive+0x1b4>)
 8003d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	f3bf 8f6f 	isb	sy
 8003d14:	e780      	b.n	8003c18 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d18:	f000 f8a6 	bl	8003e68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d1c:	f000 fbc4 	bl	80044a8 <xTaskResumeAll>
 8003d20:	e77a      	b.n	8003c18 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d24:	f000 f8a0 	bl	8003e68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d28:	f000 fbbe 	bl	80044a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d2e:	f000 f8ed 	bl	8003f0c <prvIsQueueEmpty>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f43f af6f 	beq.w	8003c18 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d3a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3730      	adds	r7, #48	; 0x30
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	e000ed04 	.word	0xe000ed04

08003d48 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003d54:	2300      	movs	r3, #0
 8003d56:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10d      	bne.n	8003d82 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d14d      	bne.n	8003e0a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 ff7a 	bl	8004c6c <xTaskPriorityDisinherit>
 8003d78:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	609a      	str	r2, [r3, #8]
 8003d80:	e043      	b.n	8003e0a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d119      	bne.n	8003dbc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6858      	ldr	r0, [r3, #4]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d90:	461a      	mov	r2, r3
 8003d92:	68b9      	ldr	r1, [r7, #8]
 8003d94:	f001 ffae 	bl	8005cf4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da0:	441a      	add	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d32b      	bcc.n	8003e0a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	605a      	str	r2, [r3, #4]
 8003dba:	e026      	b.n	8003e0a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	68d8      	ldr	r0, [r3, #12]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	68b9      	ldr	r1, [r7, #8]
 8003dc8:	f001 ff94 	bl	8005cf4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	68da      	ldr	r2, [r3, #12]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	425b      	negs	r3, r3
 8003dd6:	441a      	add	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	68da      	ldr	r2, [r3, #12]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d207      	bcs.n	8003df8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df0:	425b      	negs	r3, r3
 8003df2:	441a      	add	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d105      	bne.n	8003e0a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d002      	beq.n	8003e0a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	3b01      	subs	r3, #1
 8003e08:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003e12:	697b      	ldr	r3, [r7, #20]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3718      	adds	r7, #24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d018      	beq.n	8003e60 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68da      	ldr	r2, [r3, #12]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	441a      	add	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d303      	bcc.n	8003e50 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68d9      	ldr	r1, [r3, #12]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	461a      	mov	r2, r3
 8003e5a:	6838      	ldr	r0, [r7, #0]
 8003e5c:	f001 ff4a 	bl	8005cf4 <memcpy>
	}
}
 8003e60:	bf00      	nop
 8003e62:	3708      	adds	r7, #8
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003e70:	f001 fc2c 	bl	80056cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e7a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e7c:	e011      	b.n	8003ea2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d012      	beq.n	8003eac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	3324      	adds	r3, #36	; 0x24
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 fd1a 	bl	80048c4 <xTaskRemoveFromEventList>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003e96:	f000 fded 	bl	8004a74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003e9a:	7bfb      	ldrb	r3, [r7, #15]
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	dce9      	bgt.n	8003e7e <prvUnlockQueue+0x16>
 8003eaa:	e000      	b.n	8003eae <prvUnlockQueue+0x46>
					break;
 8003eac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	22ff      	movs	r2, #255	; 0xff
 8003eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003eb6:	f001 fc37 	bl	8005728 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003eba:	f001 fc07 	bl	80056cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ec4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ec6:	e011      	b.n	8003eec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d012      	beq.n	8003ef6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3310      	adds	r3, #16
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 fcf5 	bl	80048c4 <xTaskRemoveFromEventList>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003ee0:	f000 fdc8 	bl	8004a74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003ee4:	7bbb      	ldrb	r3, [r7, #14]
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003eec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	dce9      	bgt.n	8003ec8 <prvUnlockQueue+0x60>
 8003ef4:	e000      	b.n	8003ef8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003ef6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	22ff      	movs	r2, #255	; 0xff
 8003efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003f00:	f001 fc12 	bl	8005728 <vPortExitCritical>
}
 8003f04:	bf00      	nop
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f14:	f001 fbda 	bl	80056cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d102      	bne.n	8003f26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003f20:	2301      	movs	r3, #1
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	e001      	b.n	8003f2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003f26:	2300      	movs	r3, #0
 8003f28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f2a:	f001 fbfd 	bl	8005728 <vPortExitCritical>

	return xReturn;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f40:	f001 fbc4 	bl	80056cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d102      	bne.n	8003f56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003f50:	2301      	movs	r3, #1
 8003f52:	60fb      	str	r3, [r7, #12]
 8003f54:	e001      	b.n	8003f5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003f56:	2300      	movs	r3, #0
 8003f58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f5a:	f001 fbe5 	bl	8005728 <vPortExitCritical>

	return xReturn;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f72:	2300      	movs	r3, #0
 8003f74:	60fb      	str	r3, [r7, #12]
 8003f76:	e014      	b.n	8003fa2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003f78:	4a0e      	ldr	r2, [pc, #56]	; (8003fb4 <vQueueAddToRegistry+0x4c>)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10b      	bne.n	8003f9c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003f84:	490b      	ldr	r1, [pc, #44]	; (8003fb4 <vQueueAddToRegistry+0x4c>)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003f8e:	4a09      	ldr	r2, [pc, #36]	; (8003fb4 <vQueueAddToRegistry+0x4c>)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	4413      	add	r3, r2
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003f9a:	e005      	b.n	8003fa8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2b07      	cmp	r3, #7
 8003fa6:	d9e7      	bls.n	8003f78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003fa8:	bf00      	nop
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	20001a1c 	.word	0x20001a1c

08003fb8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003fc8:	f001 fb80 	bl	80056cc <vPortEnterCritical>
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fd2:	b25b      	sxtb	r3, r3
 8003fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fd8:	d103      	bne.n	8003fe2 <vQueueWaitForMessageRestricted+0x2a>
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fe8:	b25b      	sxtb	r3, r3
 8003fea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fee:	d103      	bne.n	8003ff8 <vQueueWaitForMessageRestricted+0x40>
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ff8:	f001 fb96 	bl	8005728 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004000:	2b00      	cmp	r3, #0
 8004002:	d106      	bne.n	8004012 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	3324      	adds	r3, #36	; 0x24
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	68b9      	ldr	r1, [r7, #8]
 800400c:	4618      	mov	r0, r3
 800400e:	f000 fc2f 	bl	8004870 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004012:	6978      	ldr	r0, [r7, #20]
 8004014:	f7ff ff28 	bl	8003e68 <prvUnlockQueue>
	}
 8004018:	bf00      	nop
 800401a:	3718      	adds	r7, #24
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004020:	b580      	push	{r7, lr}
 8004022:	b08e      	sub	sp, #56	; 0x38
 8004024:	af04      	add	r7, sp, #16
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
 800402c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800402e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004030:	2b00      	cmp	r3, #0
 8004032:	d109      	bne.n	8004048 <xTaskCreateStatic+0x28>
 8004034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004038:	f383 8811 	msr	BASEPRI, r3
 800403c:	f3bf 8f6f 	isb	sy
 8004040:	f3bf 8f4f 	dsb	sy
 8004044:	623b      	str	r3, [r7, #32]
 8004046:	e7fe      	b.n	8004046 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800404a:	2b00      	cmp	r3, #0
 800404c:	d109      	bne.n	8004062 <xTaskCreateStatic+0x42>
 800404e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004052:	f383 8811 	msr	BASEPRI, r3
 8004056:	f3bf 8f6f 	isb	sy
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	61fb      	str	r3, [r7, #28]
 8004060:	e7fe      	b.n	8004060 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004062:	235c      	movs	r3, #92	; 0x5c
 8004064:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	2b5c      	cmp	r3, #92	; 0x5c
 800406a:	d009      	beq.n	8004080 <xTaskCreateStatic+0x60>
 800406c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004070:	f383 8811 	msr	BASEPRI, r3
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	61bb      	str	r3, [r7, #24]
 800407e:	e7fe      	b.n	800407e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004080:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004084:	2b00      	cmp	r3, #0
 8004086:	d01e      	beq.n	80040c6 <xTaskCreateStatic+0xa6>
 8004088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800408a:	2b00      	cmp	r3, #0
 800408c:	d01b      	beq.n	80040c6 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800408e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004090:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004096:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	2202      	movs	r2, #2
 800409c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80040a0:	2300      	movs	r3, #0
 80040a2:	9303      	str	r3, [sp, #12]
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	9302      	str	r3, [sp, #8]
 80040a8:	f107 0314 	add.w	r3, r7, #20
 80040ac:	9301      	str	r3, [sp, #4]
 80040ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	68b9      	ldr	r1, [r7, #8]
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 f850 	bl	800415e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040c0:	f000 f8dc 	bl	800427c <prvAddNewTaskToReadyList>
 80040c4:	e001      	b.n	80040ca <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80040c6:	2300      	movs	r3, #0
 80040c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80040ca:	697b      	ldr	r3, [r7, #20]
	}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3728      	adds	r7, #40	; 0x28
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b08c      	sub	sp, #48	; 0x30
 80040d8:	af04      	add	r7, sp, #16
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	603b      	str	r3, [r7, #0]
 80040e0:	4613      	mov	r3, r2
 80040e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80040e4:	88fb      	ldrh	r3, [r7, #6]
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4618      	mov	r0, r3
 80040ea:	f001 fc09 	bl	8005900 <pvPortMalloc>
 80040ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00e      	beq.n	8004114 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80040f6:	205c      	movs	r0, #92	; 0x5c
 80040f8:	f001 fc02 	bl	8005900 <pvPortMalloc>
 80040fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d003      	beq.n	800410c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	631a      	str	r2, [r3, #48]	; 0x30
 800410a:	e005      	b.n	8004118 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800410c:	6978      	ldr	r0, [r7, #20]
 800410e:	f001 fcb9 	bl	8005a84 <vPortFree>
 8004112:	e001      	b.n	8004118 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004114:	2300      	movs	r3, #0
 8004116:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d017      	beq.n	800414e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004126:	88fa      	ldrh	r2, [r7, #6]
 8004128:	2300      	movs	r3, #0
 800412a:	9303      	str	r3, [sp, #12]
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	9302      	str	r3, [sp, #8]
 8004130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004132:	9301      	str	r3, [sp, #4]
 8004134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004136:	9300      	str	r3, [sp, #0]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	68b9      	ldr	r1, [r7, #8]
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f000 f80e 	bl	800415e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004142:	69f8      	ldr	r0, [r7, #28]
 8004144:	f000 f89a 	bl	800427c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004148:	2301      	movs	r3, #1
 800414a:	61bb      	str	r3, [r7, #24]
 800414c:	e002      	b.n	8004154 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800414e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004152:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004154:	69bb      	ldr	r3, [r7, #24]
	}
 8004156:	4618      	mov	r0, r3
 8004158:	3720      	adds	r7, #32
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b088      	sub	sp, #32
 8004162:	af00      	add	r7, sp, #0
 8004164:	60f8      	str	r0, [r7, #12]
 8004166:	60b9      	str	r1, [r7, #8]
 8004168:	607a      	str	r2, [r7, #4]
 800416a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800416c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	461a      	mov	r2, r3
 8004176:	21a5      	movs	r1, #165	; 0xa5
 8004178:	f001 fdc7 	bl	8005d0a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800417c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004186:	3b01      	subs	r3, #1
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	4413      	add	r3, r2
 800418c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	f023 0307 	bic.w	r3, r3, #7
 8004194:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	f003 0307 	and.w	r3, r3, #7
 800419c:	2b00      	cmp	r3, #0
 800419e:	d009      	beq.n	80041b4 <prvInitialiseNewTask+0x56>
 80041a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a4:	f383 8811 	msr	BASEPRI, r3
 80041a8:	f3bf 8f6f 	isb	sy
 80041ac:	f3bf 8f4f 	dsb	sy
 80041b0:	617b      	str	r3, [r7, #20]
 80041b2:	e7fe      	b.n	80041b2 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d01f      	beq.n	80041fa <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041ba:	2300      	movs	r3, #0
 80041bc:	61fb      	str	r3, [r7, #28]
 80041be:	e012      	b.n	80041e6 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	4413      	add	r3, r2
 80041c6:	7819      	ldrb	r1, [r3, #0]
 80041c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	4413      	add	r3, r2
 80041ce:	3334      	adds	r3, #52	; 0x34
 80041d0:	460a      	mov	r2, r1
 80041d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80041d4:	68ba      	ldr	r2, [r7, #8]
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	4413      	add	r3, r2
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d006      	beq.n	80041ee <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	3301      	adds	r3, #1
 80041e4:	61fb      	str	r3, [r7, #28]
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	2b0f      	cmp	r3, #15
 80041ea:	d9e9      	bls.n	80041c0 <prvInitialiseNewTask+0x62>
 80041ec:	e000      	b.n	80041f0 <prvInitialiseNewTask+0x92>
			{
				break;
 80041ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80041f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041f8:	e003      	b.n	8004202 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80041fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004204:	2b37      	cmp	r3, #55	; 0x37
 8004206:	d901      	bls.n	800420c <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004208:	2337      	movs	r3, #55	; 0x37
 800420a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800420c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004210:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004214:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004216:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421a:	2200      	movs	r2, #0
 800421c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800421e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004220:	3304      	adds	r3, #4
 8004222:	4618      	mov	r0, r3
 8004224:	f7ff f994 	bl	8003550 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422a:	3318      	adds	r3, #24
 800422c:	4618      	mov	r0, r3
 800422e:	f7ff f98f 	bl	8003550 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004236:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800423e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004240:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004246:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424a:	2200      	movs	r2, #0
 800424c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800424e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	68f9      	ldr	r1, [r7, #12]
 800425a:	69b8      	ldr	r0, [r7, #24]
 800425c:	f001 f90c 	bl	8005478 <pxPortInitialiseStack>
 8004260:	4602      	mov	r2, r0
 8004262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004264:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004268:	2b00      	cmp	r3, #0
 800426a:	d002      	beq.n	8004272 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800426c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004270:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004272:	bf00      	nop
 8004274:	3720      	adds	r7, #32
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
	...

0800427c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004284:	f001 fa22 	bl	80056cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004288:	4b2d      	ldr	r3, [pc, #180]	; (8004340 <prvAddNewTaskToReadyList+0xc4>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	3301      	adds	r3, #1
 800428e:	4a2c      	ldr	r2, [pc, #176]	; (8004340 <prvAddNewTaskToReadyList+0xc4>)
 8004290:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004292:	4b2c      	ldr	r3, [pc, #176]	; (8004344 <prvAddNewTaskToReadyList+0xc8>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d109      	bne.n	80042ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800429a:	4a2a      	ldr	r2, [pc, #168]	; (8004344 <prvAddNewTaskToReadyList+0xc8>)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80042a0:	4b27      	ldr	r3, [pc, #156]	; (8004340 <prvAddNewTaskToReadyList+0xc4>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d110      	bne.n	80042ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80042a8:	f000 fc08 	bl	8004abc <prvInitialiseTaskLists>
 80042ac:	e00d      	b.n	80042ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80042ae:	4b26      	ldr	r3, [pc, #152]	; (8004348 <prvAddNewTaskToReadyList+0xcc>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d109      	bne.n	80042ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80042b6:	4b23      	ldr	r3, [pc, #140]	; (8004344 <prvAddNewTaskToReadyList+0xc8>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d802      	bhi.n	80042ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80042c4:	4a1f      	ldr	r2, [pc, #124]	; (8004344 <prvAddNewTaskToReadyList+0xc8>)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80042ca:	4b20      	ldr	r3, [pc, #128]	; (800434c <prvAddNewTaskToReadyList+0xd0>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	3301      	adds	r3, #1
 80042d0:	4a1e      	ldr	r2, [pc, #120]	; (800434c <prvAddNewTaskToReadyList+0xd0>)
 80042d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80042d4:	4b1d      	ldr	r3, [pc, #116]	; (800434c <prvAddNewTaskToReadyList+0xd0>)
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e0:	4b1b      	ldr	r3, [pc, #108]	; (8004350 <prvAddNewTaskToReadyList+0xd4>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d903      	bls.n	80042f0 <prvAddNewTaskToReadyList+0x74>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ec:	4a18      	ldr	r2, [pc, #96]	; (8004350 <prvAddNewTaskToReadyList+0xd4>)
 80042ee:	6013      	str	r3, [r2, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f4:	4613      	mov	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4a15      	ldr	r2, [pc, #84]	; (8004354 <prvAddNewTaskToReadyList+0xd8>)
 80042fe:	441a      	add	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3304      	adds	r3, #4
 8004304:	4619      	mov	r1, r3
 8004306:	4610      	mov	r0, r2
 8004308:	f7ff f92f 	bl	800356a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800430c:	f001 fa0c 	bl	8005728 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004310:	4b0d      	ldr	r3, [pc, #52]	; (8004348 <prvAddNewTaskToReadyList+0xcc>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00e      	beq.n	8004336 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004318:	4b0a      	ldr	r3, [pc, #40]	; (8004344 <prvAddNewTaskToReadyList+0xc8>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004322:	429a      	cmp	r2, r3
 8004324:	d207      	bcs.n	8004336 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004326:	4b0c      	ldr	r3, [pc, #48]	; (8004358 <prvAddNewTaskToReadyList+0xdc>)
 8004328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	f3bf 8f4f 	dsb	sy
 8004332:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004336:	bf00      	nop
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	20000bc0 	.word	0x20000bc0
 8004344:	200006ec 	.word	0x200006ec
 8004348:	20000bcc 	.word	0x20000bcc
 800434c:	20000bdc 	.word	0x20000bdc
 8004350:	20000bc8 	.word	0x20000bc8
 8004354:	200006f0 	.word	0x200006f0
 8004358:	e000ed04 	.word	0xe000ed04

0800435c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004364:	2300      	movs	r3, #0
 8004366:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d016      	beq.n	800439c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800436e:	4b13      	ldr	r3, [pc, #76]	; (80043bc <vTaskDelay+0x60>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d009      	beq.n	800438a <vTaskDelay+0x2e>
 8004376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437a:	f383 8811 	msr	BASEPRI, r3
 800437e:	f3bf 8f6f 	isb	sy
 8004382:	f3bf 8f4f 	dsb	sy
 8004386:	60bb      	str	r3, [r7, #8]
 8004388:	e7fe      	b.n	8004388 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800438a:	f000 f87f 	bl	800448c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800438e:	2100      	movs	r1, #0
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 fcd7 	bl	8004d44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004396:	f000 f887 	bl	80044a8 <xTaskResumeAll>
 800439a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d107      	bne.n	80043b2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80043a2:	4b07      	ldr	r3, [pc, #28]	; (80043c0 <vTaskDelay+0x64>)
 80043a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043a8:	601a      	str	r2, [r3, #0]
 80043aa:	f3bf 8f4f 	dsb	sy
 80043ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80043b2:	bf00      	nop
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	20000be8 	.word	0x20000be8
 80043c0:	e000ed04 	.word	0xe000ed04

080043c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b08a      	sub	sp, #40	; 0x28
 80043c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80043ca:	2300      	movs	r3, #0
 80043cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80043ce:	2300      	movs	r3, #0
 80043d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80043d2:	463a      	mov	r2, r7
 80043d4:	1d39      	adds	r1, r7, #4
 80043d6:	f107 0308 	add.w	r3, r7, #8
 80043da:	4618      	mov	r0, r3
 80043dc:	f7ff f864 	bl	80034a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80043e0:	6839      	ldr	r1, [r7, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	9202      	str	r2, [sp, #8]
 80043e8:	9301      	str	r3, [sp, #4]
 80043ea:	2300      	movs	r3, #0
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	2300      	movs	r3, #0
 80043f0:	460a      	mov	r2, r1
 80043f2:	4920      	ldr	r1, [pc, #128]	; (8004474 <vTaskStartScheduler+0xb0>)
 80043f4:	4820      	ldr	r0, [pc, #128]	; (8004478 <vTaskStartScheduler+0xb4>)
 80043f6:	f7ff fe13 	bl	8004020 <xTaskCreateStatic>
 80043fa:	4602      	mov	r2, r0
 80043fc:	4b1f      	ldr	r3, [pc, #124]	; (800447c <vTaskStartScheduler+0xb8>)
 80043fe:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004400:	4b1e      	ldr	r3, [pc, #120]	; (800447c <vTaskStartScheduler+0xb8>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d002      	beq.n	800440e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004408:	2301      	movs	r3, #1
 800440a:	617b      	str	r3, [r7, #20]
 800440c:	e001      	b.n	8004412 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d102      	bne.n	800441e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004418:	f000 fce8 	bl	8004dec <xTimerCreateTimerTask>
 800441c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d115      	bne.n	8004450 <vTaskStartScheduler+0x8c>
 8004424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004428:	f383 8811 	msr	BASEPRI, r3
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004436:	4b12      	ldr	r3, [pc, #72]	; (8004480 <vTaskStartScheduler+0xbc>)
 8004438:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800443c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800443e:	4b11      	ldr	r3, [pc, #68]	; (8004484 <vTaskStartScheduler+0xc0>)
 8004440:	2201      	movs	r2, #1
 8004442:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004444:	4b10      	ldr	r3, [pc, #64]	; (8004488 <vTaskStartScheduler+0xc4>)
 8004446:	2200      	movs	r2, #0
 8004448:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800444a:	f001 f8a1 	bl	8005590 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800444e:	e00d      	b.n	800446c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004456:	d109      	bne.n	800446c <vTaskStartScheduler+0xa8>
 8004458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445c:	f383 8811 	msr	BASEPRI, r3
 8004460:	f3bf 8f6f 	isb	sy
 8004464:	f3bf 8f4f 	dsb	sy
 8004468:	60fb      	str	r3, [r7, #12]
 800446a:	e7fe      	b.n	800446a <vTaskStartScheduler+0xa6>
}
 800446c:	bf00      	nop
 800446e:	3718      	adds	r7, #24
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	08005d74 	.word	0x08005d74
 8004478:	08004a8d 	.word	0x08004a8d
 800447c:	20000be4 	.word	0x20000be4
 8004480:	20000be0 	.word	0x20000be0
 8004484:	20000bcc 	.word	0x20000bcc
 8004488:	20000bc4 	.word	0x20000bc4

0800448c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004490:	4b04      	ldr	r3, [pc, #16]	; (80044a4 <vTaskSuspendAll+0x18>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3301      	adds	r3, #1
 8004496:	4a03      	ldr	r2, [pc, #12]	; (80044a4 <vTaskSuspendAll+0x18>)
 8004498:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800449a:	bf00      	nop
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	20000be8 	.word	0x20000be8

080044a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80044ae:	2300      	movs	r3, #0
 80044b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80044b2:	2300      	movs	r3, #0
 80044b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80044b6:	4b41      	ldr	r3, [pc, #260]	; (80045bc <xTaskResumeAll+0x114>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d109      	bne.n	80044d2 <xTaskResumeAll+0x2a>
 80044be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c2:	f383 8811 	msr	BASEPRI, r3
 80044c6:	f3bf 8f6f 	isb	sy
 80044ca:	f3bf 8f4f 	dsb	sy
 80044ce:	603b      	str	r3, [r7, #0]
 80044d0:	e7fe      	b.n	80044d0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80044d2:	f001 f8fb 	bl	80056cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80044d6:	4b39      	ldr	r3, [pc, #228]	; (80045bc <xTaskResumeAll+0x114>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	3b01      	subs	r3, #1
 80044dc:	4a37      	ldr	r2, [pc, #220]	; (80045bc <xTaskResumeAll+0x114>)
 80044de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044e0:	4b36      	ldr	r3, [pc, #216]	; (80045bc <xTaskResumeAll+0x114>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d162      	bne.n	80045ae <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80044e8:	4b35      	ldr	r3, [pc, #212]	; (80045c0 <xTaskResumeAll+0x118>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d05e      	beq.n	80045ae <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044f0:	e02f      	b.n	8004552 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044f2:	4b34      	ldr	r3, [pc, #208]	; (80045c4 <xTaskResumeAll+0x11c>)
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	3318      	adds	r3, #24
 80044fe:	4618      	mov	r0, r3
 8004500:	f7ff f890 	bl	8003624 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	3304      	adds	r3, #4
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff f88b 	bl	8003624 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004512:	4b2d      	ldr	r3, [pc, #180]	; (80045c8 <xTaskResumeAll+0x120>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	429a      	cmp	r2, r3
 8004518:	d903      	bls.n	8004522 <xTaskResumeAll+0x7a>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451e:	4a2a      	ldr	r2, [pc, #168]	; (80045c8 <xTaskResumeAll+0x120>)
 8004520:	6013      	str	r3, [r2, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004526:	4613      	mov	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4413      	add	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	4a27      	ldr	r2, [pc, #156]	; (80045cc <xTaskResumeAll+0x124>)
 8004530:	441a      	add	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	3304      	adds	r3, #4
 8004536:	4619      	mov	r1, r3
 8004538:	4610      	mov	r0, r2
 800453a:	f7ff f816 	bl	800356a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004542:	4b23      	ldr	r3, [pc, #140]	; (80045d0 <xTaskResumeAll+0x128>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004548:	429a      	cmp	r2, r3
 800454a:	d302      	bcc.n	8004552 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800454c:	4b21      	ldr	r3, [pc, #132]	; (80045d4 <xTaskResumeAll+0x12c>)
 800454e:	2201      	movs	r2, #1
 8004550:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004552:	4b1c      	ldr	r3, [pc, #112]	; (80045c4 <xTaskResumeAll+0x11c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1cb      	bne.n	80044f2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004560:	f000 fb46 	bl	8004bf0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004564:	4b1c      	ldr	r3, [pc, #112]	; (80045d8 <xTaskResumeAll+0x130>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d010      	beq.n	8004592 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004570:	f000 f846 	bl	8004600 <xTaskIncrementTick>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d002      	beq.n	8004580 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800457a:	4b16      	ldr	r3, [pc, #88]	; (80045d4 <xTaskResumeAll+0x12c>)
 800457c:	2201      	movs	r2, #1
 800457e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	3b01      	subs	r3, #1
 8004584:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1f1      	bne.n	8004570 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800458c:	4b12      	ldr	r3, [pc, #72]	; (80045d8 <xTaskResumeAll+0x130>)
 800458e:	2200      	movs	r2, #0
 8004590:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004592:	4b10      	ldr	r3, [pc, #64]	; (80045d4 <xTaskResumeAll+0x12c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d009      	beq.n	80045ae <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800459a:	2301      	movs	r3, #1
 800459c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800459e:	4b0f      	ldr	r3, [pc, #60]	; (80045dc <xTaskResumeAll+0x134>)
 80045a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	f3bf 8f4f 	dsb	sy
 80045aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80045ae:	f001 f8bb 	bl	8005728 <vPortExitCritical>

	return xAlreadyYielded;
 80045b2:	68bb      	ldr	r3, [r7, #8]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	20000be8 	.word	0x20000be8
 80045c0:	20000bc0 	.word	0x20000bc0
 80045c4:	20000b80 	.word	0x20000b80
 80045c8:	20000bc8 	.word	0x20000bc8
 80045cc:	200006f0 	.word	0x200006f0
 80045d0:	200006ec 	.word	0x200006ec
 80045d4:	20000bd4 	.word	0x20000bd4
 80045d8:	20000bd0 	.word	0x20000bd0
 80045dc:	e000ed04 	.word	0xe000ed04

080045e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80045e6:	4b05      	ldr	r3, [pc, #20]	; (80045fc <xTaskGetTickCount+0x1c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80045ec:	687b      	ldr	r3, [r7, #4]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	20000bc4 	.word	0x20000bc4

08004600 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004606:	2300      	movs	r3, #0
 8004608:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800460a:	4b4e      	ldr	r3, [pc, #312]	; (8004744 <xTaskIncrementTick+0x144>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	f040 8088 	bne.w	8004724 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004614:	4b4c      	ldr	r3, [pc, #304]	; (8004748 <xTaskIncrementTick+0x148>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	3301      	adds	r3, #1
 800461a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800461c:	4a4a      	ldr	r2, [pc, #296]	; (8004748 <xTaskIncrementTick+0x148>)
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d11f      	bne.n	8004668 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004628:	4b48      	ldr	r3, [pc, #288]	; (800474c <xTaskIncrementTick+0x14c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d009      	beq.n	8004646 <xTaskIncrementTick+0x46>
 8004632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004636:	f383 8811 	msr	BASEPRI, r3
 800463a:	f3bf 8f6f 	isb	sy
 800463e:	f3bf 8f4f 	dsb	sy
 8004642:	603b      	str	r3, [r7, #0]
 8004644:	e7fe      	b.n	8004644 <xTaskIncrementTick+0x44>
 8004646:	4b41      	ldr	r3, [pc, #260]	; (800474c <xTaskIncrementTick+0x14c>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	60fb      	str	r3, [r7, #12]
 800464c:	4b40      	ldr	r3, [pc, #256]	; (8004750 <xTaskIncrementTick+0x150>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a3e      	ldr	r2, [pc, #248]	; (800474c <xTaskIncrementTick+0x14c>)
 8004652:	6013      	str	r3, [r2, #0]
 8004654:	4a3e      	ldr	r2, [pc, #248]	; (8004750 <xTaskIncrementTick+0x150>)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	4b3e      	ldr	r3, [pc, #248]	; (8004754 <xTaskIncrementTick+0x154>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	3301      	adds	r3, #1
 8004660:	4a3c      	ldr	r2, [pc, #240]	; (8004754 <xTaskIncrementTick+0x154>)
 8004662:	6013      	str	r3, [r2, #0]
 8004664:	f000 fac4 	bl	8004bf0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004668:	4b3b      	ldr	r3, [pc, #236]	; (8004758 <xTaskIncrementTick+0x158>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	429a      	cmp	r2, r3
 8004670:	d349      	bcc.n	8004706 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004672:	4b36      	ldr	r3, [pc, #216]	; (800474c <xTaskIncrementTick+0x14c>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d104      	bne.n	8004686 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800467c:	4b36      	ldr	r3, [pc, #216]	; (8004758 <xTaskIncrementTick+0x158>)
 800467e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004682:	601a      	str	r2, [r3, #0]
					break;
 8004684:	e03f      	b.n	8004706 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004686:	4b31      	ldr	r3, [pc, #196]	; (800474c <xTaskIncrementTick+0x14c>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	429a      	cmp	r2, r3
 800469c:	d203      	bcs.n	80046a6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800469e:	4a2e      	ldr	r2, [pc, #184]	; (8004758 <xTaskIncrementTick+0x158>)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80046a4:	e02f      	b.n	8004706 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	3304      	adds	r3, #4
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7fe ffba 	bl	8003624 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d004      	beq.n	80046c2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	3318      	adds	r3, #24
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fe ffb1 	bl	8003624 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c6:	4b25      	ldr	r3, [pc, #148]	; (800475c <xTaskIncrementTick+0x15c>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d903      	bls.n	80046d6 <xTaskIncrementTick+0xd6>
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d2:	4a22      	ldr	r2, [pc, #136]	; (800475c <xTaskIncrementTick+0x15c>)
 80046d4:	6013      	str	r3, [r2, #0]
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046da:	4613      	mov	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4a1f      	ldr	r2, [pc, #124]	; (8004760 <xTaskIncrementTick+0x160>)
 80046e4:	441a      	add	r2, r3
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	3304      	adds	r3, #4
 80046ea:	4619      	mov	r1, r3
 80046ec:	4610      	mov	r0, r2
 80046ee:	f7fe ff3c 	bl	800356a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f6:	4b1b      	ldr	r3, [pc, #108]	; (8004764 <xTaskIncrementTick+0x164>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d3b8      	bcc.n	8004672 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004700:	2301      	movs	r3, #1
 8004702:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004704:	e7b5      	b.n	8004672 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004706:	4b17      	ldr	r3, [pc, #92]	; (8004764 <xTaskIncrementTick+0x164>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800470c:	4914      	ldr	r1, [pc, #80]	; (8004760 <xTaskIncrementTick+0x160>)
 800470e:	4613      	mov	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4413      	add	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	440b      	add	r3, r1
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d907      	bls.n	800472e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800471e:	2301      	movs	r3, #1
 8004720:	617b      	str	r3, [r7, #20]
 8004722:	e004      	b.n	800472e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004724:	4b10      	ldr	r3, [pc, #64]	; (8004768 <xTaskIncrementTick+0x168>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	3301      	adds	r3, #1
 800472a:	4a0f      	ldr	r2, [pc, #60]	; (8004768 <xTaskIncrementTick+0x168>)
 800472c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800472e:	4b0f      	ldr	r3, [pc, #60]	; (800476c <xTaskIncrementTick+0x16c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8004736:	2301      	movs	r3, #1
 8004738:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800473a:	697b      	ldr	r3, [r7, #20]
}
 800473c:	4618      	mov	r0, r3
 800473e:	3718      	adds	r7, #24
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	20000be8 	.word	0x20000be8
 8004748:	20000bc4 	.word	0x20000bc4
 800474c:	20000b78 	.word	0x20000b78
 8004750:	20000b7c 	.word	0x20000b7c
 8004754:	20000bd8 	.word	0x20000bd8
 8004758:	20000be0 	.word	0x20000be0
 800475c:	20000bc8 	.word	0x20000bc8
 8004760:	200006f0 	.word	0x200006f0
 8004764:	200006ec 	.word	0x200006ec
 8004768:	20000bd0 	.word	0x20000bd0
 800476c:	20000bd4 	.word	0x20000bd4

08004770 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004776:	4b27      	ldr	r3, [pc, #156]	; (8004814 <vTaskSwitchContext+0xa4>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d003      	beq.n	8004786 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800477e:	4b26      	ldr	r3, [pc, #152]	; (8004818 <vTaskSwitchContext+0xa8>)
 8004780:	2201      	movs	r2, #1
 8004782:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004784:	e040      	b.n	8004808 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004786:	4b24      	ldr	r3, [pc, #144]	; (8004818 <vTaskSwitchContext+0xa8>)
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800478c:	4b23      	ldr	r3, [pc, #140]	; (800481c <vTaskSwitchContext+0xac>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	60fb      	str	r3, [r7, #12]
 8004792:	e00f      	b.n	80047b4 <vTaskSwitchContext+0x44>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d109      	bne.n	80047ae <vTaskSwitchContext+0x3e>
 800479a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479e:	f383 8811 	msr	BASEPRI, r3
 80047a2:	f3bf 8f6f 	isb	sy
 80047a6:	f3bf 8f4f 	dsb	sy
 80047aa:	607b      	str	r3, [r7, #4]
 80047ac:	e7fe      	b.n	80047ac <vTaskSwitchContext+0x3c>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	3b01      	subs	r3, #1
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	491a      	ldr	r1, [pc, #104]	; (8004820 <vTaskSwitchContext+0xb0>)
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	4613      	mov	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4413      	add	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	440b      	add	r3, r1
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d0e5      	beq.n	8004794 <vTaskSwitchContext+0x24>
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	4613      	mov	r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	4413      	add	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4a13      	ldr	r2, [pc, #76]	; (8004820 <vTaskSwitchContext+0xb0>)
 80047d4:	4413      	add	r3, r2
 80047d6:	60bb      	str	r3, [r7, #8]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	605a      	str	r2, [r3, #4]
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	3308      	adds	r3, #8
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d104      	bne.n	80047f8 <vTaskSwitchContext+0x88>
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	605a      	str	r2, [r3, #4]
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	4a09      	ldr	r2, [pc, #36]	; (8004824 <vTaskSwitchContext+0xb4>)
 8004800:	6013      	str	r3, [r2, #0]
 8004802:	4a06      	ldr	r2, [pc, #24]	; (800481c <vTaskSwitchContext+0xac>)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6013      	str	r3, [r2, #0]
}
 8004808:	bf00      	nop
 800480a:	3714      	adds	r7, #20
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr
 8004814:	20000be8 	.word	0x20000be8
 8004818:	20000bd4 	.word	0x20000bd4
 800481c:	20000bc8 	.word	0x20000bc8
 8004820:	200006f0 	.word	0x200006f0
 8004824:	200006ec 	.word	0x200006ec

08004828 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d109      	bne.n	800484c <vTaskPlaceOnEventList+0x24>
 8004838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483c:	f383 8811 	msr	BASEPRI, r3
 8004840:	f3bf 8f6f 	isb	sy
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	60fb      	str	r3, [r7, #12]
 800484a:	e7fe      	b.n	800484a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800484c:	4b07      	ldr	r3, [pc, #28]	; (800486c <vTaskPlaceOnEventList+0x44>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3318      	adds	r3, #24
 8004852:	4619      	mov	r1, r3
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7fe feac 	bl	80035b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800485a:	2101      	movs	r1, #1
 800485c:	6838      	ldr	r0, [r7, #0]
 800485e:	f000 fa71 	bl	8004d44 <prvAddCurrentTaskToDelayedList>
}
 8004862:	bf00      	nop
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	200006ec 	.word	0x200006ec

08004870 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d109      	bne.n	8004896 <vTaskPlaceOnEventListRestricted+0x26>
 8004882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004886:	f383 8811 	msr	BASEPRI, r3
 800488a:	f3bf 8f6f 	isb	sy
 800488e:	f3bf 8f4f 	dsb	sy
 8004892:	617b      	str	r3, [r7, #20]
 8004894:	e7fe      	b.n	8004894 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004896:	4b0a      	ldr	r3, [pc, #40]	; (80048c0 <vTaskPlaceOnEventListRestricted+0x50>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	3318      	adds	r3, #24
 800489c:	4619      	mov	r1, r3
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f7fe fe63 	bl	800356a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d002      	beq.n	80048b0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80048aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048ae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80048b0:	6879      	ldr	r1, [r7, #4]
 80048b2:	68b8      	ldr	r0, [r7, #8]
 80048b4:	f000 fa46 	bl	8004d44 <prvAddCurrentTaskToDelayedList>
	}
 80048b8:	bf00      	nop
 80048ba:	3718      	adds	r7, #24
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	200006ec 	.word	0x200006ec

080048c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d109      	bne.n	80048ee <xTaskRemoveFromEventList+0x2a>
 80048da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048de:	f383 8811 	msr	BASEPRI, r3
 80048e2:	f3bf 8f6f 	isb	sy
 80048e6:	f3bf 8f4f 	dsb	sy
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	e7fe      	b.n	80048ec <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	3318      	adds	r3, #24
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7fe fe96 	bl	8003624 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048f8:	4b1d      	ldr	r3, [pc, #116]	; (8004970 <xTaskRemoveFromEventList+0xac>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d11d      	bne.n	800493c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	3304      	adds	r3, #4
 8004904:	4618      	mov	r0, r3
 8004906:	f7fe fe8d 	bl	8003624 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800490e:	4b19      	ldr	r3, [pc, #100]	; (8004974 <xTaskRemoveFromEventList+0xb0>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	429a      	cmp	r2, r3
 8004914:	d903      	bls.n	800491e <xTaskRemoveFromEventList+0x5a>
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491a:	4a16      	ldr	r2, [pc, #88]	; (8004974 <xTaskRemoveFromEventList+0xb0>)
 800491c:	6013      	str	r3, [r2, #0]
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004922:	4613      	mov	r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4413      	add	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4a13      	ldr	r2, [pc, #76]	; (8004978 <xTaskRemoveFromEventList+0xb4>)
 800492c:	441a      	add	r2, r3
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	3304      	adds	r3, #4
 8004932:	4619      	mov	r1, r3
 8004934:	4610      	mov	r0, r2
 8004936:	f7fe fe18 	bl	800356a <vListInsertEnd>
 800493a:	e005      	b.n	8004948 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	3318      	adds	r3, #24
 8004940:	4619      	mov	r1, r3
 8004942:	480e      	ldr	r0, [pc, #56]	; (800497c <xTaskRemoveFromEventList+0xb8>)
 8004944:	f7fe fe11 	bl	800356a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800494c:	4b0c      	ldr	r3, [pc, #48]	; (8004980 <xTaskRemoveFromEventList+0xbc>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004952:	429a      	cmp	r2, r3
 8004954:	d905      	bls.n	8004962 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004956:	2301      	movs	r3, #1
 8004958:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800495a:	4b0a      	ldr	r3, [pc, #40]	; (8004984 <xTaskRemoveFromEventList+0xc0>)
 800495c:	2201      	movs	r2, #1
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	e001      	b.n	8004966 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004962:	2300      	movs	r3, #0
 8004964:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004966:	697b      	ldr	r3, [r7, #20]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3718      	adds	r7, #24
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	20000be8 	.word	0x20000be8
 8004974:	20000bc8 	.word	0x20000bc8
 8004978:	200006f0 	.word	0x200006f0
 800497c:	20000b80 	.word	0x20000b80
 8004980:	200006ec 	.word	0x200006ec
 8004984:	20000bd4 	.word	0x20000bd4

08004988 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004990:	4b06      	ldr	r3, [pc, #24]	; (80049ac <vTaskInternalSetTimeOutState+0x24>)
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004998:	4b05      	ldr	r3, [pc, #20]	; (80049b0 <vTaskInternalSetTimeOutState+0x28>)
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	605a      	str	r2, [r3, #4]
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	20000bd8 	.word	0x20000bd8
 80049b0:	20000bc4 	.word	0x20000bc4

080049b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b088      	sub	sp, #32
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d109      	bne.n	80049d8 <xTaskCheckForTimeOut+0x24>
 80049c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c8:	f383 8811 	msr	BASEPRI, r3
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	613b      	str	r3, [r7, #16]
 80049d6:	e7fe      	b.n	80049d6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d109      	bne.n	80049f2 <xTaskCheckForTimeOut+0x3e>
 80049de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e2:	f383 8811 	msr	BASEPRI, r3
 80049e6:	f3bf 8f6f 	isb	sy
 80049ea:	f3bf 8f4f 	dsb	sy
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	e7fe      	b.n	80049f0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80049f2:	f000 fe6b 	bl	80056cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80049f6:	4b1d      	ldr	r3, [pc, #116]	; (8004a6c <xTaskCheckForTimeOut+0xb8>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a0e:	d102      	bne.n	8004a16 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004a10:	2300      	movs	r3, #0
 8004a12:	61fb      	str	r3, [r7, #28]
 8004a14:	e023      	b.n	8004a5e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	4b15      	ldr	r3, [pc, #84]	; (8004a70 <xTaskCheckForTimeOut+0xbc>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d007      	beq.n	8004a32 <xTaskCheckForTimeOut+0x7e>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d302      	bcc.n	8004a32 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	61fb      	str	r3, [r7, #28]
 8004a30:	e015      	b.n	8004a5e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d20b      	bcs.n	8004a54 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	1ad2      	subs	r2, r2, r3
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f7ff ff9d 	bl	8004988 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	61fb      	str	r3, [r7, #28]
 8004a52:	e004      	b.n	8004a5e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	2200      	movs	r2, #0
 8004a58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004a5e:	f000 fe63 	bl	8005728 <vPortExitCritical>

	return xReturn;
 8004a62:	69fb      	ldr	r3, [r7, #28]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3720      	adds	r7, #32
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	20000bc4 	.word	0x20000bc4
 8004a70:	20000bd8 	.word	0x20000bd8

08004a74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a74:	b480      	push	{r7}
 8004a76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004a78:	4b03      	ldr	r3, [pc, #12]	; (8004a88 <vTaskMissedYield+0x14>)
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	601a      	str	r2, [r3, #0]
}
 8004a7e:	bf00      	nop
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr
 8004a88:	20000bd4 	.word	0x20000bd4

08004a8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a94:	f000 f852 	bl	8004b3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a98:	4b06      	ldr	r3, [pc, #24]	; (8004ab4 <prvIdleTask+0x28>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d9f9      	bls.n	8004a94 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004aa0:	4b05      	ldr	r3, [pc, #20]	; (8004ab8 <prvIdleTask+0x2c>)
 8004aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004ab0:	e7f0      	b.n	8004a94 <prvIdleTask+0x8>
 8004ab2:	bf00      	nop
 8004ab4:	200006f0 	.word	0x200006f0
 8004ab8:	e000ed04 	.word	0xe000ed04

08004abc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	607b      	str	r3, [r7, #4]
 8004ac6:	e00c      	b.n	8004ae2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	4613      	mov	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4413      	add	r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4a12      	ldr	r2, [pc, #72]	; (8004b1c <prvInitialiseTaskLists+0x60>)
 8004ad4:	4413      	add	r3, r2
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7fe fd1a 	bl	8003510 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	607b      	str	r3, [r7, #4]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2b37      	cmp	r3, #55	; 0x37
 8004ae6:	d9ef      	bls.n	8004ac8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ae8:	480d      	ldr	r0, [pc, #52]	; (8004b20 <prvInitialiseTaskLists+0x64>)
 8004aea:	f7fe fd11 	bl	8003510 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004aee:	480d      	ldr	r0, [pc, #52]	; (8004b24 <prvInitialiseTaskLists+0x68>)
 8004af0:	f7fe fd0e 	bl	8003510 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004af4:	480c      	ldr	r0, [pc, #48]	; (8004b28 <prvInitialiseTaskLists+0x6c>)
 8004af6:	f7fe fd0b 	bl	8003510 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004afa:	480c      	ldr	r0, [pc, #48]	; (8004b2c <prvInitialiseTaskLists+0x70>)
 8004afc:	f7fe fd08 	bl	8003510 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004b00:	480b      	ldr	r0, [pc, #44]	; (8004b30 <prvInitialiseTaskLists+0x74>)
 8004b02:	f7fe fd05 	bl	8003510 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004b06:	4b0b      	ldr	r3, [pc, #44]	; (8004b34 <prvInitialiseTaskLists+0x78>)
 8004b08:	4a05      	ldr	r2, [pc, #20]	; (8004b20 <prvInitialiseTaskLists+0x64>)
 8004b0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b0c:	4b0a      	ldr	r3, [pc, #40]	; (8004b38 <prvInitialiseTaskLists+0x7c>)
 8004b0e:	4a05      	ldr	r2, [pc, #20]	; (8004b24 <prvInitialiseTaskLists+0x68>)
 8004b10:	601a      	str	r2, [r3, #0]
}
 8004b12:	bf00      	nop
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	200006f0 	.word	0x200006f0
 8004b20:	20000b50 	.word	0x20000b50
 8004b24:	20000b64 	.word	0x20000b64
 8004b28:	20000b80 	.word	0x20000b80
 8004b2c:	20000b94 	.word	0x20000b94
 8004b30:	20000bac 	.word	0x20000bac
 8004b34:	20000b78 	.word	0x20000b78
 8004b38:	20000b7c 	.word	0x20000b7c

08004b3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b42:	e019      	b.n	8004b78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004b44:	f000 fdc2 	bl	80056cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b48:	4b0f      	ldr	r3, [pc, #60]	; (8004b88 <prvCheckTasksWaitingTermination+0x4c>)
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	3304      	adds	r3, #4
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7fe fd65 	bl	8003624 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b5a:	4b0c      	ldr	r3, [pc, #48]	; (8004b8c <prvCheckTasksWaitingTermination+0x50>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	4a0a      	ldr	r2, [pc, #40]	; (8004b8c <prvCheckTasksWaitingTermination+0x50>)
 8004b62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b64:	4b0a      	ldr	r3, [pc, #40]	; (8004b90 <prvCheckTasksWaitingTermination+0x54>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	4a09      	ldr	r2, [pc, #36]	; (8004b90 <prvCheckTasksWaitingTermination+0x54>)
 8004b6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004b6e:	f000 fddb 	bl	8005728 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f80e 	bl	8004b94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b78:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <prvCheckTasksWaitingTermination+0x54>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1e1      	bne.n	8004b44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b80:	bf00      	nop
 8004b82:	3708      	adds	r7, #8
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	20000b94 	.word	0x20000b94
 8004b8c:	20000bc0 	.word	0x20000bc0
 8004b90:	20000ba8 	.word	0x20000ba8

08004b94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d108      	bne.n	8004bb8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004baa:	4618      	mov	r0, r3
 8004bac:	f000 ff6a 	bl	8005a84 <vPortFree>
				vPortFree( pxTCB );
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 ff67 	bl	8005a84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004bb6:	e017      	b.n	8004be8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d103      	bne.n	8004bca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 ff5e 	bl	8005a84 <vPortFree>
	}
 8004bc8:	e00e      	b.n	8004be8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d009      	beq.n	8004be8 <prvDeleteTCB+0x54>
 8004bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd8:	f383 8811 	msr	BASEPRI, r3
 8004bdc:	f3bf 8f6f 	isb	sy
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	60fb      	str	r3, [r7, #12]
 8004be6:	e7fe      	b.n	8004be6 <prvDeleteTCB+0x52>
	}
 8004be8:	bf00      	nop
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bf6:	4b0c      	ldr	r3, [pc, #48]	; (8004c28 <prvResetNextTaskUnblockTime+0x38>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d104      	bne.n	8004c0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004c00:	4b0a      	ldr	r3, [pc, #40]	; (8004c2c <prvResetNextTaskUnblockTime+0x3c>)
 8004c02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004c08:	e008      	b.n	8004c1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c0a:	4b07      	ldr	r3, [pc, #28]	; (8004c28 <prvResetNextTaskUnblockTime+0x38>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	4a04      	ldr	r2, [pc, #16]	; (8004c2c <prvResetNextTaskUnblockTime+0x3c>)
 8004c1a:	6013      	str	r3, [r2, #0]
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	20000b78 	.word	0x20000b78
 8004c2c:	20000be0 	.word	0x20000be0

08004c30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004c36:	4b0b      	ldr	r3, [pc, #44]	; (8004c64 <xTaskGetSchedulerState+0x34>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d102      	bne.n	8004c44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	607b      	str	r3, [r7, #4]
 8004c42:	e008      	b.n	8004c56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c44:	4b08      	ldr	r3, [pc, #32]	; (8004c68 <xTaskGetSchedulerState+0x38>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d102      	bne.n	8004c52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	607b      	str	r3, [r7, #4]
 8004c50:	e001      	b.n	8004c56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004c52:	2300      	movs	r3, #0
 8004c54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004c56:	687b      	ldr	r3, [r7, #4]
	}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	20000bcc 	.word	0x20000bcc
 8004c68:	20000be8 	.word	0x20000be8

08004c6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d054      	beq.n	8004d2c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004c82:	4b2d      	ldr	r3, [pc, #180]	; (8004d38 <xTaskPriorityDisinherit+0xcc>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d009      	beq.n	8004ca0 <xTaskPriorityDisinherit+0x34>
 8004c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c90:	f383 8811 	msr	BASEPRI, r3
 8004c94:	f3bf 8f6f 	isb	sy
 8004c98:	f3bf 8f4f 	dsb	sy
 8004c9c:	60fb      	str	r3, [r7, #12]
 8004c9e:	e7fe      	b.n	8004c9e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d109      	bne.n	8004cbc <xTaskPriorityDisinherit+0x50>
 8004ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cac:	f383 8811 	msr	BASEPRI, r3
 8004cb0:	f3bf 8f6f 	isb	sy
 8004cb4:	f3bf 8f4f 	dsb	sy
 8004cb8:	60bb      	str	r3, [r7, #8]
 8004cba:	e7fe      	b.n	8004cba <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cc0:	1e5a      	subs	r2, r3, #1
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d02c      	beq.n	8004d2c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d128      	bne.n	8004d2c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	3304      	adds	r3, #4
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7fe fca0 	bl	8003624 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cfc:	4b0f      	ldr	r3, [pc, #60]	; (8004d3c <xTaskPriorityDisinherit+0xd0>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d903      	bls.n	8004d0c <xTaskPriorityDisinherit+0xa0>
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d08:	4a0c      	ldr	r2, [pc, #48]	; (8004d3c <xTaskPriorityDisinherit+0xd0>)
 8004d0a:	6013      	str	r3, [r2, #0]
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d10:	4613      	mov	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4a09      	ldr	r2, [pc, #36]	; (8004d40 <xTaskPriorityDisinherit+0xd4>)
 8004d1a:	441a      	add	r2, r3
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	3304      	adds	r3, #4
 8004d20:	4619      	mov	r1, r3
 8004d22:	4610      	mov	r0, r2
 8004d24:	f7fe fc21 	bl	800356a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004d2c:	697b      	ldr	r3, [r7, #20]
	}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3718      	adds	r7, #24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	200006ec 	.word	0x200006ec
 8004d3c:	20000bc8 	.word	0x20000bc8
 8004d40:	200006f0 	.word	0x200006f0

08004d44 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004d4e:	4b21      	ldr	r3, [pc, #132]	; (8004dd4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d54:	4b20      	ldr	r3, [pc, #128]	; (8004dd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3304      	adds	r3, #4
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7fe fc62 	bl	8003624 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d66:	d10a      	bne.n	8004d7e <prvAddCurrentTaskToDelayedList+0x3a>
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d007      	beq.n	8004d7e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d6e:	4b1a      	ldr	r3, [pc, #104]	; (8004dd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	3304      	adds	r3, #4
 8004d74:	4619      	mov	r1, r3
 8004d76:	4819      	ldr	r0, [pc, #100]	; (8004ddc <prvAddCurrentTaskToDelayedList+0x98>)
 8004d78:	f7fe fbf7 	bl	800356a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d7c:	e026      	b.n	8004dcc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4413      	add	r3, r2
 8004d84:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d86:	4b14      	ldr	r3, [pc, #80]	; (8004dd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d209      	bcs.n	8004daa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d96:	4b12      	ldr	r3, [pc, #72]	; (8004de0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	4b0f      	ldr	r3, [pc, #60]	; (8004dd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	3304      	adds	r3, #4
 8004da0:	4619      	mov	r1, r3
 8004da2:	4610      	mov	r0, r2
 8004da4:	f7fe fc05 	bl	80035b2 <vListInsert>
}
 8004da8:	e010      	b.n	8004dcc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004daa:	4b0e      	ldr	r3, [pc, #56]	; (8004de4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	4b0a      	ldr	r3, [pc, #40]	; (8004dd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	3304      	adds	r3, #4
 8004db4:	4619      	mov	r1, r3
 8004db6:	4610      	mov	r0, r2
 8004db8:	f7fe fbfb 	bl	80035b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004dbc:	4b0a      	ldr	r3, [pc, #40]	; (8004de8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d202      	bcs.n	8004dcc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004dc6:	4a08      	ldr	r2, [pc, #32]	; (8004de8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	6013      	str	r3, [r2, #0]
}
 8004dcc:	bf00      	nop
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	20000bc4 	.word	0x20000bc4
 8004dd8:	200006ec 	.word	0x200006ec
 8004ddc:	20000bac 	.word	0x20000bac
 8004de0:	20000b7c 	.word	0x20000b7c
 8004de4:	20000b78 	.word	0x20000b78
 8004de8:	20000be0 	.word	0x20000be0

08004dec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b08a      	sub	sp, #40	; 0x28
 8004df0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004df2:	2300      	movs	r3, #0
 8004df4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004df6:	f000 faff 	bl	80053f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004dfa:	4b1c      	ldr	r3, [pc, #112]	; (8004e6c <xTimerCreateTimerTask+0x80>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d021      	beq.n	8004e46 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004e02:	2300      	movs	r3, #0
 8004e04:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004e06:	2300      	movs	r3, #0
 8004e08:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004e0a:	1d3a      	adds	r2, r7, #4
 8004e0c:	f107 0108 	add.w	r1, r7, #8
 8004e10:	f107 030c 	add.w	r3, r7, #12
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7fe fb61 	bl	80034dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004e1a:	6879      	ldr	r1, [r7, #4]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	9202      	str	r2, [sp, #8]
 8004e22:	9301      	str	r3, [sp, #4]
 8004e24:	2302      	movs	r3, #2
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	2300      	movs	r3, #0
 8004e2a:	460a      	mov	r2, r1
 8004e2c:	4910      	ldr	r1, [pc, #64]	; (8004e70 <xTimerCreateTimerTask+0x84>)
 8004e2e:	4811      	ldr	r0, [pc, #68]	; (8004e74 <xTimerCreateTimerTask+0x88>)
 8004e30:	f7ff f8f6 	bl	8004020 <xTaskCreateStatic>
 8004e34:	4602      	mov	r2, r0
 8004e36:	4b10      	ldr	r3, [pc, #64]	; (8004e78 <xTimerCreateTimerTask+0x8c>)
 8004e38:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004e3a:	4b0f      	ldr	r3, [pc, #60]	; (8004e78 <xTimerCreateTimerTask+0x8c>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004e42:	2301      	movs	r3, #1
 8004e44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d109      	bne.n	8004e60 <xTimerCreateTimerTask+0x74>
 8004e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e50:	f383 8811 	msr	BASEPRI, r3
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	613b      	str	r3, [r7, #16]
 8004e5e:	e7fe      	b.n	8004e5e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004e60:	697b      	ldr	r3, [r7, #20]
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3718      	adds	r7, #24
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	20000c1c 	.word	0x20000c1c
 8004e70:	08005d7c 	.word	0x08005d7c
 8004e74:	08004fad 	.word	0x08004fad
 8004e78:	20000c20 	.word	0x20000c20

08004e7c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b08a      	sub	sp, #40	; 0x28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
 8004e88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d109      	bne.n	8004ea8 <xTimerGenericCommand+0x2c>
 8004e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e98:	f383 8811 	msr	BASEPRI, r3
 8004e9c:	f3bf 8f6f 	isb	sy
 8004ea0:	f3bf 8f4f 	dsb	sy
 8004ea4:	623b      	str	r3, [r7, #32]
 8004ea6:	e7fe      	b.n	8004ea6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004ea8:	4b19      	ldr	r3, [pc, #100]	; (8004f10 <xTimerGenericCommand+0x94>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d02a      	beq.n	8004f06 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	2b05      	cmp	r3, #5
 8004ec0:	dc18      	bgt.n	8004ef4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004ec2:	f7ff feb5 	bl	8004c30 <xTaskGetSchedulerState>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d109      	bne.n	8004ee0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004ecc:	4b10      	ldr	r3, [pc, #64]	; (8004f10 <xTimerGenericCommand+0x94>)
 8004ece:	6818      	ldr	r0, [r3, #0]
 8004ed0:	f107 0110 	add.w	r1, r7, #16
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ed8:	f7fe fccc 	bl	8003874 <xQueueGenericSend>
 8004edc:	6278      	str	r0, [r7, #36]	; 0x24
 8004ede:	e012      	b.n	8004f06 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004ee0:	4b0b      	ldr	r3, [pc, #44]	; (8004f10 <xTimerGenericCommand+0x94>)
 8004ee2:	6818      	ldr	r0, [r3, #0]
 8004ee4:	f107 0110 	add.w	r1, r7, #16
 8004ee8:	2300      	movs	r3, #0
 8004eea:	2200      	movs	r2, #0
 8004eec:	f7fe fcc2 	bl	8003874 <xQueueGenericSend>
 8004ef0:	6278      	str	r0, [r7, #36]	; 0x24
 8004ef2:	e008      	b.n	8004f06 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004ef4:	4b06      	ldr	r3, [pc, #24]	; (8004f10 <xTimerGenericCommand+0x94>)
 8004ef6:	6818      	ldr	r0, [r3, #0]
 8004ef8:	f107 0110 	add.w	r1, r7, #16
 8004efc:	2300      	movs	r3, #0
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	f7fe fdb2 	bl	8003a68 <xQueueGenericSendFromISR>
 8004f04:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3728      	adds	r7, #40	; 0x28
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	20000c1c 	.word	0x20000c1c

08004f14 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b088      	sub	sp, #32
 8004f18:	af02      	add	r7, sp, #8
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f1e:	4b22      	ldr	r3, [pc, #136]	; (8004fa8 <prvProcessExpiredTimer+0x94>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	3304      	adds	r3, #4
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7fe fb79 	bl	8003624 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f38:	f003 0304 	and.w	r3, r3, #4
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d021      	beq.n	8004f84 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	699a      	ldr	r2, [r3, #24]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	18d1      	adds	r1, r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	6978      	ldr	r0, [r7, #20]
 8004f4e:	f000 f8d1 	bl	80050f4 <prvInsertTimerInActiveList>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d01e      	beq.n	8004f96 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f58:	2300      	movs	r3, #0
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	2100      	movs	r1, #0
 8004f62:	6978      	ldr	r0, [r7, #20]
 8004f64:	f7ff ff8a 	bl	8004e7c <xTimerGenericCommand>
 8004f68:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d112      	bne.n	8004f96 <prvProcessExpiredTimer+0x82>
 8004f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f74:	f383 8811 	msr	BASEPRI, r3
 8004f78:	f3bf 8f6f 	isb	sy
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	60fb      	str	r3, [r7, #12]
 8004f82:	e7fe      	b.n	8004f82 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f8a:	f023 0301 	bic.w	r3, r3, #1
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	6978      	ldr	r0, [r7, #20]
 8004f9c:	4798      	blx	r3
}
 8004f9e:	bf00      	nop
 8004fa0:	3718      	adds	r7, #24
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	20000c14 	.word	0x20000c14

08004fac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004fb4:	f107 0308 	add.w	r3, r7, #8
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f000 f857 	bl	800506c <prvGetNextExpireTime>
 8004fbe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 f803 	bl	8004fd0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004fca:	f000 f8d5 	bl	8005178 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004fce:	e7f1      	b.n	8004fb4 <prvTimerTask+0x8>

08004fd0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004fda:	f7ff fa57 	bl	800448c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004fde:	f107 0308 	add.w	r3, r7, #8
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f000 f866 	bl	80050b4 <prvSampleTimeNow>
 8004fe8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d130      	bne.n	8005052 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10a      	bne.n	800500c <prvProcessTimerOrBlockTask+0x3c>
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d806      	bhi.n	800500c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004ffe:	f7ff fa53 	bl	80044a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005002:	68f9      	ldr	r1, [r7, #12]
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f7ff ff85 	bl	8004f14 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800500a:	e024      	b.n	8005056 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d008      	beq.n	8005024 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005012:	4b13      	ldr	r3, [pc, #76]	; (8005060 <prvProcessTimerOrBlockTask+0x90>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <prvProcessTimerOrBlockTask+0x50>
 800501c:	2301      	movs	r3, #1
 800501e:	e000      	b.n	8005022 <prvProcessTimerOrBlockTask+0x52>
 8005020:	2300      	movs	r3, #0
 8005022:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005024:	4b0f      	ldr	r3, [pc, #60]	; (8005064 <prvProcessTimerOrBlockTask+0x94>)
 8005026:	6818      	ldr	r0, [r3, #0]
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	4619      	mov	r1, r3
 8005032:	f7fe ffc1 	bl	8003fb8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005036:	f7ff fa37 	bl	80044a8 <xTaskResumeAll>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10a      	bne.n	8005056 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005040:	4b09      	ldr	r3, [pc, #36]	; (8005068 <prvProcessTimerOrBlockTask+0x98>)
 8005042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	f3bf 8f6f 	isb	sy
}
 8005050:	e001      	b.n	8005056 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005052:	f7ff fa29 	bl	80044a8 <xTaskResumeAll>
}
 8005056:	bf00      	nop
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	20000c18 	.word	0x20000c18
 8005064:	20000c1c 	.word	0x20000c1c
 8005068:	e000ed04 	.word	0xe000ed04

0800506c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005074:	4b0e      	ldr	r3, [pc, #56]	; (80050b0 <prvGetNextExpireTime+0x44>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <prvGetNextExpireTime+0x16>
 800507e:	2201      	movs	r2, #1
 8005080:	e000      	b.n	8005084 <prvGetNextExpireTime+0x18>
 8005082:	2200      	movs	r2, #0
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d105      	bne.n	800509c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005090:	4b07      	ldr	r3, [pc, #28]	; (80050b0 <prvGetNextExpireTime+0x44>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	60fb      	str	r3, [r7, #12]
 800509a:	e001      	b.n	80050a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800509c:	2300      	movs	r3, #0
 800509e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80050a0:	68fb      	ldr	r3, [r7, #12]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	20000c14 	.word	0x20000c14

080050b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80050bc:	f7ff fa90 	bl	80045e0 <xTaskGetTickCount>
 80050c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80050c2:	4b0b      	ldr	r3, [pc, #44]	; (80050f0 <prvSampleTimeNow+0x3c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d205      	bcs.n	80050d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80050cc:	f000 f930 	bl	8005330 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	e002      	b.n	80050de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80050de:	4a04      	ldr	r2, [pc, #16]	; (80050f0 <prvSampleTimeNow+0x3c>)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80050e4:	68fb      	ldr	r3, [r7, #12]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	20000c24 	.word	0x20000c24

080050f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
 8005100:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005102:	2300      	movs	r3, #0
 8005104:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	429a      	cmp	r2, r3
 8005118:	d812      	bhi.n	8005140 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	1ad2      	subs	r2, r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	429a      	cmp	r2, r3
 8005126:	d302      	bcc.n	800512e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005128:	2301      	movs	r3, #1
 800512a:	617b      	str	r3, [r7, #20]
 800512c:	e01b      	b.n	8005166 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800512e:	4b10      	ldr	r3, [pc, #64]	; (8005170 <prvInsertTimerInActiveList+0x7c>)
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	3304      	adds	r3, #4
 8005136:	4619      	mov	r1, r3
 8005138:	4610      	mov	r0, r2
 800513a:	f7fe fa3a 	bl	80035b2 <vListInsert>
 800513e:	e012      	b.n	8005166 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	429a      	cmp	r2, r3
 8005146:	d206      	bcs.n	8005156 <prvInsertTimerInActiveList+0x62>
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	429a      	cmp	r2, r3
 800514e:	d302      	bcc.n	8005156 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005150:	2301      	movs	r3, #1
 8005152:	617b      	str	r3, [r7, #20]
 8005154:	e007      	b.n	8005166 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005156:	4b07      	ldr	r3, [pc, #28]	; (8005174 <prvInsertTimerInActiveList+0x80>)
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	3304      	adds	r3, #4
 800515e:	4619      	mov	r1, r3
 8005160:	4610      	mov	r0, r2
 8005162:	f7fe fa26 	bl	80035b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005166:	697b      	ldr	r3, [r7, #20]
}
 8005168:	4618      	mov	r0, r3
 800516a:	3718      	adds	r7, #24
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	20000c18 	.word	0x20000c18
 8005174:	20000c14 	.word	0x20000c14

08005178 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b08e      	sub	sp, #56	; 0x38
 800517c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800517e:	e0c6      	b.n	800530e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	da17      	bge.n	80051b6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005186:	1d3b      	adds	r3, r7, #4
 8005188:	3304      	adds	r3, #4
 800518a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800518c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518e:	2b00      	cmp	r3, #0
 8005190:	d109      	bne.n	80051a6 <prvProcessReceivedCommands+0x2e>
 8005192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005196:	f383 8811 	msr	BASEPRI, r3
 800519a:	f3bf 8f6f 	isb	sy
 800519e:	f3bf 8f4f 	dsb	sy
 80051a2:	61fb      	str	r3, [r7, #28]
 80051a4:	e7fe      	b.n	80051a4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80051a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051ac:	6850      	ldr	r0, [r2, #4]
 80051ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051b0:	6892      	ldr	r2, [r2, #8]
 80051b2:	4611      	mov	r1, r2
 80051b4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f2c0 80a7 	blt.w	800530c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80051c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d004      	beq.n	80051d4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051cc:	3304      	adds	r3, #4
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fe fa28 	bl	8003624 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80051d4:	463b      	mov	r3, r7
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7ff ff6c 	bl	80050b4 <prvSampleTimeNow>
 80051dc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2b09      	cmp	r3, #9
 80051e2:	f200 8094 	bhi.w	800530e <prvProcessReceivedCommands+0x196>
 80051e6:	a201      	add	r2, pc, #4	; (adr r2, 80051ec <prvProcessReceivedCommands+0x74>)
 80051e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ec:	08005215 	.word	0x08005215
 80051f0:	08005215 	.word	0x08005215
 80051f4:	08005215 	.word	0x08005215
 80051f8:	08005287 	.word	0x08005287
 80051fc:	0800529b 	.word	0x0800529b
 8005200:	080052e3 	.word	0x080052e3
 8005204:	08005215 	.word	0x08005215
 8005208:	08005215 	.word	0x08005215
 800520c:	08005287 	.word	0x08005287
 8005210:	0800529b 	.word	0x0800529b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005216:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800521a:	f043 0301 	orr.w	r3, r3, #1
 800521e:	b2da      	uxtb	r2, r3
 8005220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005222:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	18d1      	adds	r1, r2, r3
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005234:	f7ff ff5e 	bl	80050f4 <prvInsertTimerInActiveList>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d067      	beq.n	800530e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800523e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005244:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005248:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b00      	cmp	r3, #0
 8005252:	d05c      	beq.n	800530e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	441a      	add	r2, r3
 800525c:	2300      	movs	r3, #0
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	2300      	movs	r3, #0
 8005262:	2100      	movs	r1, #0
 8005264:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005266:	f7ff fe09 	bl	8004e7c <xTimerGenericCommand>
 800526a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800526c:	6a3b      	ldr	r3, [r7, #32]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d14d      	bne.n	800530e <prvProcessReceivedCommands+0x196>
 8005272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005276:	f383 8811 	msr	BASEPRI, r3
 800527a:	f3bf 8f6f 	isb	sy
 800527e:	f3bf 8f4f 	dsb	sy
 8005282:	61bb      	str	r3, [r7, #24]
 8005284:	e7fe      	b.n	8005284 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005288:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800528c:	f023 0301 	bic.w	r3, r3, #1
 8005290:	b2da      	uxtb	r2, r3
 8005292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005294:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005298:	e039      	b.n	800530e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800529a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052a0:	f043 0301 	orr.w	r3, r3, #1
 80052a4:	b2da      	uxtb	r2, r3
 80052a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80052b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d109      	bne.n	80052ce <prvProcessReceivedCommands+0x156>
 80052ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052be:	f383 8811 	msr	BASEPRI, r3
 80052c2:	f3bf 8f6f 	isb	sy
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	617b      	str	r3, [r7, #20]
 80052cc:	e7fe      	b.n	80052cc <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80052ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d0:	699a      	ldr	r2, [r3, #24]
 80052d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d4:	18d1      	adds	r1, r2, r3
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052dc:	f7ff ff0a 	bl	80050f4 <prvInsertTimerInActiveList>
					break;
 80052e0:	e015      	b.n	800530e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80052e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052e8:	f003 0302 	and.w	r3, r3, #2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d103      	bne.n	80052f8 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80052f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052f2:	f000 fbc7 	bl	8005a84 <vPortFree>
 80052f6:	e00a      	b.n	800530e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80052f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052fe:	f023 0301 	bic.w	r3, r3, #1
 8005302:	b2da      	uxtb	r2, r3
 8005304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005306:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800530a:	e000      	b.n	800530e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800530c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800530e:	4b07      	ldr	r3, [pc, #28]	; (800532c <prvProcessReceivedCommands+0x1b4>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	1d39      	adds	r1, r7, #4
 8005314:	2200      	movs	r2, #0
 8005316:	4618      	mov	r0, r3
 8005318:	f7fe fc3a 	bl	8003b90 <xQueueReceive>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	f47f af2e 	bne.w	8005180 <prvProcessReceivedCommands+0x8>
	}
}
 8005324:	bf00      	nop
 8005326:	3730      	adds	r7, #48	; 0x30
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	20000c1c 	.word	0x20000c1c

08005330 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b088      	sub	sp, #32
 8005334:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005336:	e047      	b.n	80053c8 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005338:	4b2d      	ldr	r3, [pc, #180]	; (80053f0 <prvSwitchTimerLists+0xc0>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005342:	4b2b      	ldr	r3, [pc, #172]	; (80053f0 <prvSwitchTimerLists+0xc0>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	3304      	adds	r3, #4
 8005350:	4618      	mov	r0, r3
 8005352:	f7fe f967 	bl	8003624 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b00      	cmp	r3, #0
 800536a:	d02d      	beq.n	80053c8 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	4413      	add	r3, r2
 8005374:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	429a      	cmp	r2, r3
 800537c:	d90e      	bls.n	800539c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800538a:	4b19      	ldr	r3, [pc, #100]	; (80053f0 <prvSwitchTimerLists+0xc0>)
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	3304      	adds	r3, #4
 8005392:	4619      	mov	r1, r3
 8005394:	4610      	mov	r0, r2
 8005396:	f7fe f90c 	bl	80035b2 <vListInsert>
 800539a:	e015      	b.n	80053c8 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800539c:	2300      	movs	r3, #0
 800539e:	9300      	str	r3, [sp, #0]
 80053a0:	2300      	movs	r3, #0
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	2100      	movs	r1, #0
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f7ff fd68 	bl	8004e7c <xTimerGenericCommand>
 80053ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d109      	bne.n	80053c8 <prvSwitchTimerLists+0x98>
 80053b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b8:	f383 8811 	msr	BASEPRI, r3
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	603b      	str	r3, [r7, #0]
 80053c6:	e7fe      	b.n	80053c6 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80053c8:	4b09      	ldr	r3, [pc, #36]	; (80053f0 <prvSwitchTimerLists+0xc0>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1b2      	bne.n	8005338 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80053d2:	4b07      	ldr	r3, [pc, #28]	; (80053f0 <prvSwitchTimerLists+0xc0>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80053d8:	4b06      	ldr	r3, [pc, #24]	; (80053f4 <prvSwitchTimerLists+0xc4>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a04      	ldr	r2, [pc, #16]	; (80053f0 <prvSwitchTimerLists+0xc0>)
 80053de:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80053e0:	4a04      	ldr	r2, [pc, #16]	; (80053f4 <prvSwitchTimerLists+0xc4>)
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	6013      	str	r3, [r2, #0]
}
 80053e6:	bf00      	nop
 80053e8:	3718      	adds	r7, #24
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	20000c14 	.word	0x20000c14
 80053f4:	20000c18 	.word	0x20000c18

080053f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80053fe:	f000 f965 	bl	80056cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005402:	4b15      	ldr	r3, [pc, #84]	; (8005458 <prvCheckForValidListAndQueue+0x60>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d120      	bne.n	800544c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800540a:	4814      	ldr	r0, [pc, #80]	; (800545c <prvCheckForValidListAndQueue+0x64>)
 800540c:	f7fe f880 	bl	8003510 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005410:	4813      	ldr	r0, [pc, #76]	; (8005460 <prvCheckForValidListAndQueue+0x68>)
 8005412:	f7fe f87d 	bl	8003510 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005416:	4b13      	ldr	r3, [pc, #76]	; (8005464 <prvCheckForValidListAndQueue+0x6c>)
 8005418:	4a10      	ldr	r2, [pc, #64]	; (800545c <prvCheckForValidListAndQueue+0x64>)
 800541a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800541c:	4b12      	ldr	r3, [pc, #72]	; (8005468 <prvCheckForValidListAndQueue+0x70>)
 800541e:	4a10      	ldr	r2, [pc, #64]	; (8005460 <prvCheckForValidListAndQueue+0x68>)
 8005420:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005422:	2300      	movs	r3, #0
 8005424:	9300      	str	r3, [sp, #0]
 8005426:	4b11      	ldr	r3, [pc, #68]	; (800546c <prvCheckForValidListAndQueue+0x74>)
 8005428:	4a11      	ldr	r2, [pc, #68]	; (8005470 <prvCheckForValidListAndQueue+0x78>)
 800542a:	2110      	movs	r1, #16
 800542c:	200a      	movs	r0, #10
 800542e:	f7fe f98b 	bl	8003748 <xQueueGenericCreateStatic>
 8005432:	4602      	mov	r2, r0
 8005434:	4b08      	ldr	r3, [pc, #32]	; (8005458 <prvCheckForValidListAndQueue+0x60>)
 8005436:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005438:	4b07      	ldr	r3, [pc, #28]	; (8005458 <prvCheckForValidListAndQueue+0x60>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d005      	beq.n	800544c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005440:	4b05      	ldr	r3, [pc, #20]	; (8005458 <prvCheckForValidListAndQueue+0x60>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	490b      	ldr	r1, [pc, #44]	; (8005474 <prvCheckForValidListAndQueue+0x7c>)
 8005446:	4618      	mov	r0, r3
 8005448:	f7fe fd8e 	bl	8003f68 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800544c:	f000 f96c 	bl	8005728 <vPortExitCritical>
}
 8005450:	bf00      	nop
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	20000c1c 	.word	0x20000c1c
 800545c:	20000bec 	.word	0x20000bec
 8005460:	20000c00 	.word	0x20000c00
 8005464:	20000c14 	.word	0x20000c14
 8005468:	20000c18 	.word	0x20000c18
 800546c:	20000cc8 	.word	0x20000cc8
 8005470:	20000c28 	.word	0x20000c28
 8005474:	08005d84 	.word	0x08005d84

08005478 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	3b04      	subs	r3, #4
 8005488:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005490:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	3b04      	subs	r3, #4
 8005496:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	f023 0201 	bic.w	r2, r3, #1
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	3b04      	subs	r3, #4
 80054a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80054a8:	4a0c      	ldr	r2, [pc, #48]	; (80054dc <pxPortInitialiseStack+0x64>)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	3b14      	subs	r3, #20
 80054b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	3b04      	subs	r3, #4
 80054be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f06f 0202 	mvn.w	r2, #2
 80054c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	3b20      	subs	r3, #32
 80054cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80054ce:	68fb      	ldr	r3, [r7, #12]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3714      	adds	r7, #20
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	080054e1 	.word	0x080054e1

080054e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80054e6:	2300      	movs	r3, #0
 80054e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80054ea:	4b11      	ldr	r3, [pc, #68]	; (8005530 <prvTaskExitError+0x50>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054f2:	d009      	beq.n	8005508 <prvTaskExitError+0x28>
 80054f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f8:	f383 8811 	msr	BASEPRI, r3
 80054fc:	f3bf 8f6f 	isb	sy
 8005500:	f3bf 8f4f 	dsb	sy
 8005504:	60fb      	str	r3, [r7, #12]
 8005506:	e7fe      	b.n	8005506 <prvTaskExitError+0x26>
 8005508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550c:	f383 8811 	msr	BASEPRI, r3
 8005510:	f3bf 8f6f 	isb	sy
 8005514:	f3bf 8f4f 	dsb	sy
 8005518:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800551a:	bf00      	nop
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d0fc      	beq.n	800551c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005522:	bf00      	nop
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	2000000c 	.word	0x2000000c
	...

08005540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005540:	4b07      	ldr	r3, [pc, #28]	; (8005560 <pxCurrentTCBConst2>)
 8005542:	6819      	ldr	r1, [r3, #0]
 8005544:	6808      	ldr	r0, [r1, #0]
 8005546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800554a:	f380 8809 	msr	PSP, r0
 800554e:	f3bf 8f6f 	isb	sy
 8005552:	f04f 0000 	mov.w	r0, #0
 8005556:	f380 8811 	msr	BASEPRI, r0
 800555a:	4770      	bx	lr
 800555c:	f3af 8000 	nop.w

08005560 <pxCurrentTCBConst2>:
 8005560:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005564:	bf00      	nop
 8005566:	bf00      	nop

08005568 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005568:	4808      	ldr	r0, [pc, #32]	; (800558c <prvPortStartFirstTask+0x24>)
 800556a:	6800      	ldr	r0, [r0, #0]
 800556c:	6800      	ldr	r0, [r0, #0]
 800556e:	f380 8808 	msr	MSP, r0
 8005572:	f04f 0000 	mov.w	r0, #0
 8005576:	f380 8814 	msr	CONTROL, r0
 800557a:	b662      	cpsie	i
 800557c:	b661      	cpsie	f
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	f3bf 8f6f 	isb	sy
 8005586:	df00      	svc	0
 8005588:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800558a:	bf00      	nop
 800558c:	e000ed08 	.word	0xe000ed08

08005590 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005596:	4b44      	ldr	r3, [pc, #272]	; (80056a8 <xPortStartScheduler+0x118>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a44      	ldr	r2, [pc, #272]	; (80056ac <xPortStartScheduler+0x11c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d109      	bne.n	80055b4 <xPortStartScheduler+0x24>
 80055a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a4:	f383 8811 	msr	BASEPRI, r3
 80055a8:	f3bf 8f6f 	isb	sy
 80055ac:	f3bf 8f4f 	dsb	sy
 80055b0:	613b      	str	r3, [r7, #16]
 80055b2:	e7fe      	b.n	80055b2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80055b4:	4b3c      	ldr	r3, [pc, #240]	; (80056a8 <xPortStartScheduler+0x118>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a3d      	ldr	r2, [pc, #244]	; (80056b0 <xPortStartScheduler+0x120>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d109      	bne.n	80055d2 <xPortStartScheduler+0x42>
 80055be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	60fb      	str	r3, [r7, #12]
 80055d0:	e7fe      	b.n	80055d0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80055d2:	4b38      	ldr	r3, [pc, #224]	; (80056b4 <xPortStartScheduler+0x124>)
 80055d4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	22ff      	movs	r2, #255	; 0xff
 80055e2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80055ec:	78fb      	ldrb	r3, [r7, #3]
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80055f4:	b2da      	uxtb	r2, r3
 80055f6:	4b30      	ldr	r3, [pc, #192]	; (80056b8 <xPortStartScheduler+0x128>)
 80055f8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80055fa:	4b30      	ldr	r3, [pc, #192]	; (80056bc <xPortStartScheduler+0x12c>)
 80055fc:	2207      	movs	r2, #7
 80055fe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005600:	e009      	b.n	8005616 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005602:	4b2e      	ldr	r3, [pc, #184]	; (80056bc <xPortStartScheduler+0x12c>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	3b01      	subs	r3, #1
 8005608:	4a2c      	ldr	r2, [pc, #176]	; (80056bc <xPortStartScheduler+0x12c>)
 800560a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800560c:	78fb      	ldrb	r3, [r7, #3]
 800560e:	b2db      	uxtb	r3, r3
 8005610:	005b      	lsls	r3, r3, #1
 8005612:	b2db      	uxtb	r3, r3
 8005614:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005616:	78fb      	ldrb	r3, [r7, #3]
 8005618:	b2db      	uxtb	r3, r3
 800561a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800561e:	2b80      	cmp	r3, #128	; 0x80
 8005620:	d0ef      	beq.n	8005602 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005622:	4b26      	ldr	r3, [pc, #152]	; (80056bc <xPortStartScheduler+0x12c>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f1c3 0307 	rsb	r3, r3, #7
 800562a:	2b04      	cmp	r3, #4
 800562c:	d009      	beq.n	8005642 <xPortStartScheduler+0xb2>
 800562e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005632:	f383 8811 	msr	BASEPRI, r3
 8005636:	f3bf 8f6f 	isb	sy
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	60bb      	str	r3, [r7, #8]
 8005640:	e7fe      	b.n	8005640 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005642:	4b1e      	ldr	r3, [pc, #120]	; (80056bc <xPortStartScheduler+0x12c>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	021b      	lsls	r3, r3, #8
 8005648:	4a1c      	ldr	r2, [pc, #112]	; (80056bc <xPortStartScheduler+0x12c>)
 800564a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800564c:	4b1b      	ldr	r3, [pc, #108]	; (80056bc <xPortStartScheduler+0x12c>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005654:	4a19      	ldr	r2, [pc, #100]	; (80056bc <xPortStartScheduler+0x12c>)
 8005656:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	b2da      	uxtb	r2, r3
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005660:	4b17      	ldr	r3, [pc, #92]	; (80056c0 <xPortStartScheduler+0x130>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a16      	ldr	r2, [pc, #88]	; (80056c0 <xPortStartScheduler+0x130>)
 8005666:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800566a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800566c:	4b14      	ldr	r3, [pc, #80]	; (80056c0 <xPortStartScheduler+0x130>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a13      	ldr	r2, [pc, #76]	; (80056c0 <xPortStartScheduler+0x130>)
 8005672:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005676:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005678:	f000 f8d6 	bl	8005828 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800567c:	4b11      	ldr	r3, [pc, #68]	; (80056c4 <xPortStartScheduler+0x134>)
 800567e:	2200      	movs	r2, #0
 8005680:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005682:	f000 f8f5 	bl	8005870 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005686:	4b10      	ldr	r3, [pc, #64]	; (80056c8 <xPortStartScheduler+0x138>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a0f      	ldr	r2, [pc, #60]	; (80056c8 <xPortStartScheduler+0x138>)
 800568c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005690:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005692:	f7ff ff69 	bl	8005568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005696:	f7ff f86b 	bl	8004770 <vTaskSwitchContext>
	prvTaskExitError();
 800569a:	f7ff ff21 	bl	80054e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3718      	adds	r7, #24
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	e000ed00 	.word	0xe000ed00
 80056ac:	410fc271 	.word	0x410fc271
 80056b0:	410fc270 	.word	0x410fc270
 80056b4:	e000e400 	.word	0xe000e400
 80056b8:	20000d18 	.word	0x20000d18
 80056bc:	20000d1c 	.word	0x20000d1c
 80056c0:	e000ed20 	.word	0xe000ed20
 80056c4:	2000000c 	.word	0x2000000c
 80056c8:	e000ef34 	.word	0xe000ef34

080056cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d6:	f383 8811 	msr	BASEPRI, r3
 80056da:	f3bf 8f6f 	isb	sy
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80056e4:	4b0e      	ldr	r3, [pc, #56]	; (8005720 <vPortEnterCritical+0x54>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	3301      	adds	r3, #1
 80056ea:	4a0d      	ldr	r2, [pc, #52]	; (8005720 <vPortEnterCritical+0x54>)
 80056ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80056ee:	4b0c      	ldr	r3, [pc, #48]	; (8005720 <vPortEnterCritical+0x54>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d10e      	bne.n	8005714 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80056f6:	4b0b      	ldr	r3, [pc, #44]	; (8005724 <vPortEnterCritical+0x58>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d009      	beq.n	8005714 <vPortEnterCritical+0x48>
 8005700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005704:	f383 8811 	msr	BASEPRI, r3
 8005708:	f3bf 8f6f 	isb	sy
 800570c:	f3bf 8f4f 	dsb	sy
 8005710:	603b      	str	r3, [r7, #0]
 8005712:	e7fe      	b.n	8005712 <vPortEnterCritical+0x46>
	}
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr
 8005720:	2000000c 	.word	0x2000000c
 8005724:	e000ed04 	.word	0xe000ed04

08005728 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800572e:	4b11      	ldr	r3, [pc, #68]	; (8005774 <vPortExitCritical+0x4c>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d109      	bne.n	800574a <vPortExitCritical+0x22>
 8005736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573a:	f383 8811 	msr	BASEPRI, r3
 800573e:	f3bf 8f6f 	isb	sy
 8005742:	f3bf 8f4f 	dsb	sy
 8005746:	607b      	str	r3, [r7, #4]
 8005748:	e7fe      	b.n	8005748 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800574a:	4b0a      	ldr	r3, [pc, #40]	; (8005774 <vPortExitCritical+0x4c>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	3b01      	subs	r3, #1
 8005750:	4a08      	ldr	r2, [pc, #32]	; (8005774 <vPortExitCritical+0x4c>)
 8005752:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005754:	4b07      	ldr	r3, [pc, #28]	; (8005774 <vPortExitCritical+0x4c>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d104      	bne.n	8005766 <vPortExitCritical+0x3e>
 800575c:	2300      	movs	r3, #0
 800575e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005766:	bf00      	nop
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	2000000c 	.word	0x2000000c
	...

08005780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005780:	f3ef 8009 	mrs	r0, PSP
 8005784:	f3bf 8f6f 	isb	sy
 8005788:	4b15      	ldr	r3, [pc, #84]	; (80057e0 <pxCurrentTCBConst>)
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	f01e 0f10 	tst.w	lr, #16
 8005790:	bf08      	it	eq
 8005792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800579a:	6010      	str	r0, [r2, #0]
 800579c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80057a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80057a4:	f380 8811 	msr	BASEPRI, r0
 80057a8:	f3bf 8f4f 	dsb	sy
 80057ac:	f3bf 8f6f 	isb	sy
 80057b0:	f7fe ffde 	bl	8004770 <vTaskSwitchContext>
 80057b4:	f04f 0000 	mov.w	r0, #0
 80057b8:	f380 8811 	msr	BASEPRI, r0
 80057bc:	bc09      	pop	{r0, r3}
 80057be:	6819      	ldr	r1, [r3, #0]
 80057c0:	6808      	ldr	r0, [r1, #0]
 80057c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c6:	f01e 0f10 	tst.w	lr, #16
 80057ca:	bf08      	it	eq
 80057cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80057d0:	f380 8809 	msr	PSP, r0
 80057d4:	f3bf 8f6f 	isb	sy
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	f3af 8000 	nop.w

080057e0 <pxCurrentTCBConst>:
 80057e0:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80057e4:	bf00      	nop
 80057e6:	bf00      	nop

080057e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
	__asm volatile
 80057ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f2:	f383 8811 	msr	BASEPRI, r3
 80057f6:	f3bf 8f6f 	isb	sy
 80057fa:	f3bf 8f4f 	dsb	sy
 80057fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005800:	f7fe fefe 	bl	8004600 <xTaskIncrementTick>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800580a:	4b06      	ldr	r3, [pc, #24]	; (8005824 <xPortSysTickHandler+0x3c>)
 800580c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005810:	601a      	str	r2, [r3, #0]
 8005812:	2300      	movs	r3, #0
 8005814:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800581c:	bf00      	nop
 800581e:	3708      	adds	r7, #8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	e000ed04 	.word	0xe000ed04

08005828 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005828:	b480      	push	{r7}
 800582a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800582c:	4b0b      	ldr	r3, [pc, #44]	; (800585c <vPortSetupTimerInterrupt+0x34>)
 800582e:	2200      	movs	r2, #0
 8005830:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005832:	4b0b      	ldr	r3, [pc, #44]	; (8005860 <vPortSetupTimerInterrupt+0x38>)
 8005834:	2200      	movs	r2, #0
 8005836:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005838:	4b0a      	ldr	r3, [pc, #40]	; (8005864 <vPortSetupTimerInterrupt+0x3c>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a0a      	ldr	r2, [pc, #40]	; (8005868 <vPortSetupTimerInterrupt+0x40>)
 800583e:	fba2 2303 	umull	r2, r3, r2, r3
 8005842:	099b      	lsrs	r3, r3, #6
 8005844:	4a09      	ldr	r2, [pc, #36]	; (800586c <vPortSetupTimerInterrupt+0x44>)
 8005846:	3b01      	subs	r3, #1
 8005848:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800584a:	4b04      	ldr	r3, [pc, #16]	; (800585c <vPortSetupTimerInterrupt+0x34>)
 800584c:	2207      	movs	r2, #7
 800584e:	601a      	str	r2, [r3, #0]
}
 8005850:	bf00      	nop
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	e000e010 	.word	0xe000e010
 8005860:	e000e018 	.word	0xe000e018
 8005864:	20000000 	.word	0x20000000
 8005868:	10624dd3 	.word	0x10624dd3
 800586c:	e000e014 	.word	0xe000e014

08005870 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005870:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005880 <vPortEnableVFP+0x10>
 8005874:	6801      	ldr	r1, [r0, #0]
 8005876:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800587a:	6001      	str	r1, [r0, #0]
 800587c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800587e:	bf00      	nop
 8005880:	e000ed88 	.word	0xe000ed88

08005884 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800588a:	f3ef 8305 	mrs	r3, IPSR
 800588e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2b0f      	cmp	r3, #15
 8005894:	d913      	bls.n	80058be <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005896:	4a16      	ldr	r2, [pc, #88]	; (80058f0 <vPortValidateInterruptPriority+0x6c>)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	4413      	add	r3, r2
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80058a0:	4b14      	ldr	r3, [pc, #80]	; (80058f4 <vPortValidateInterruptPriority+0x70>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	7afa      	ldrb	r2, [r7, #11]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d209      	bcs.n	80058be <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80058aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ae:	f383 8811 	msr	BASEPRI, r3
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	f3bf 8f4f 	dsb	sy
 80058ba:	607b      	str	r3, [r7, #4]
 80058bc:	e7fe      	b.n	80058bc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80058be:	4b0e      	ldr	r3, [pc, #56]	; (80058f8 <vPortValidateInterruptPriority+0x74>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80058c6:	4b0d      	ldr	r3, [pc, #52]	; (80058fc <vPortValidateInterruptPriority+0x78>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d909      	bls.n	80058e2 <vPortValidateInterruptPriority+0x5e>
 80058ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	603b      	str	r3, [r7, #0]
 80058e0:	e7fe      	b.n	80058e0 <vPortValidateInterruptPriority+0x5c>
	}
 80058e2:	bf00      	nop
 80058e4:	3714      	adds	r7, #20
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	e000e3f0 	.word	0xe000e3f0
 80058f4:	20000d18 	.word	0x20000d18
 80058f8:	e000ed0c 	.word	0xe000ed0c
 80058fc:	20000d1c 	.word	0x20000d1c

08005900 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b08a      	sub	sp, #40	; 0x28
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005908:	2300      	movs	r3, #0
 800590a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800590c:	f7fe fdbe 	bl	800448c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005910:	4b57      	ldr	r3, [pc, #348]	; (8005a70 <pvPortMalloc+0x170>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d101      	bne.n	800591c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005918:	f000 f90c 	bl	8005b34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800591c:	4b55      	ldr	r3, [pc, #340]	; (8005a74 <pvPortMalloc+0x174>)
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4013      	ands	r3, r2
 8005924:	2b00      	cmp	r3, #0
 8005926:	f040 808c 	bne.w	8005a42 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d01c      	beq.n	800596a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005930:	2208      	movs	r2, #8
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4413      	add	r3, r2
 8005936:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f003 0307 	and.w	r3, r3, #7
 800593e:	2b00      	cmp	r3, #0
 8005940:	d013      	beq.n	800596a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f023 0307 	bic.w	r3, r3, #7
 8005948:	3308      	adds	r3, #8
 800594a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f003 0307 	and.w	r3, r3, #7
 8005952:	2b00      	cmp	r3, #0
 8005954:	d009      	beq.n	800596a <pvPortMalloc+0x6a>
 8005956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595a:	f383 8811 	msr	BASEPRI, r3
 800595e:	f3bf 8f6f 	isb	sy
 8005962:	f3bf 8f4f 	dsb	sy
 8005966:	617b      	str	r3, [r7, #20]
 8005968:	e7fe      	b.n	8005968 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d068      	beq.n	8005a42 <pvPortMalloc+0x142>
 8005970:	4b41      	ldr	r3, [pc, #260]	; (8005a78 <pvPortMalloc+0x178>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	429a      	cmp	r2, r3
 8005978:	d863      	bhi.n	8005a42 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800597a:	4b40      	ldr	r3, [pc, #256]	; (8005a7c <pvPortMalloc+0x17c>)
 800597c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800597e:	4b3f      	ldr	r3, [pc, #252]	; (8005a7c <pvPortMalloc+0x17c>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005984:	e004      	b.n	8005990 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005988:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	429a      	cmp	r2, r3
 8005998:	d903      	bls.n	80059a2 <pvPortMalloc+0xa2>
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1f1      	bne.n	8005986 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80059a2:	4b33      	ldr	r3, [pc, #204]	; (8005a70 <pvPortMalloc+0x170>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d04a      	beq.n	8005a42 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80059ac:	6a3b      	ldr	r3, [r7, #32]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2208      	movs	r2, #8
 80059b2:	4413      	add	r3, r2
 80059b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80059b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80059be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	1ad2      	subs	r2, r2, r3
 80059c6:	2308      	movs	r3, #8
 80059c8:	005b      	lsls	r3, r3, #1
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d91e      	bls.n	8005a0c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80059ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4413      	add	r3, r2
 80059d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	f003 0307 	and.w	r3, r3, #7
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d009      	beq.n	80059f4 <pvPortMalloc+0xf4>
 80059e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e4:	f383 8811 	msr	BASEPRI, r3
 80059e8:	f3bf 8f6f 	isb	sy
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	613b      	str	r3, [r7, #16]
 80059f2:	e7fe      	b.n	80059f2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80059f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f6:	685a      	ldr	r2, [r3, #4]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	1ad2      	subs	r2, r2, r3
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005a06:	69b8      	ldr	r0, [r7, #24]
 8005a08:	f000 f8f6 	bl	8005bf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005a0c:	4b1a      	ldr	r3, [pc, #104]	; (8005a78 <pvPortMalloc+0x178>)
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	4a18      	ldr	r2, [pc, #96]	; (8005a78 <pvPortMalloc+0x178>)
 8005a18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a1a:	4b17      	ldr	r3, [pc, #92]	; (8005a78 <pvPortMalloc+0x178>)
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	4b18      	ldr	r3, [pc, #96]	; (8005a80 <pvPortMalloc+0x180>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d203      	bcs.n	8005a2e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005a26:	4b14      	ldr	r3, [pc, #80]	; (8005a78 <pvPortMalloc+0x178>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a15      	ldr	r2, [pc, #84]	; (8005a80 <pvPortMalloc+0x180>)
 8005a2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a30:	685a      	ldr	r2, [r3, #4]
 8005a32:	4b10      	ldr	r3, [pc, #64]	; (8005a74 <pvPortMalloc+0x174>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	431a      	orrs	r2, r3
 8005a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3e:	2200      	movs	r2, #0
 8005a40:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005a42:	f7fe fd31 	bl	80044a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	f003 0307 	and.w	r3, r3, #7
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d009      	beq.n	8005a64 <pvPortMalloc+0x164>
 8005a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a54:	f383 8811 	msr	BASEPRI, r3
 8005a58:	f3bf 8f6f 	isb	sy
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	60fb      	str	r3, [r7, #12]
 8005a62:	e7fe      	b.n	8005a62 <pvPortMalloc+0x162>
	return pvReturn;
 8005a64:	69fb      	ldr	r3, [r7, #28]
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3728      	adds	r7, #40	; 0x28
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	20001928 	.word	0x20001928
 8005a74:	20001934 	.word	0x20001934
 8005a78:	2000192c 	.word	0x2000192c
 8005a7c:	20001920 	.word	0x20001920
 8005a80:	20001930 	.word	0x20001930

08005a84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b086      	sub	sp, #24
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d046      	beq.n	8005b24 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005a96:	2308      	movs	r3, #8
 8005a98:	425b      	negs	r3, r3
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	685a      	ldr	r2, [r3, #4]
 8005aa8:	4b20      	ldr	r3, [pc, #128]	; (8005b2c <vPortFree+0xa8>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4013      	ands	r3, r2
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d109      	bne.n	8005ac6 <vPortFree+0x42>
 8005ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab6:	f383 8811 	msr	BASEPRI, r3
 8005aba:	f3bf 8f6f 	isb	sy
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	60fb      	str	r3, [r7, #12]
 8005ac4:	e7fe      	b.n	8005ac4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d009      	beq.n	8005ae2 <vPortFree+0x5e>
 8005ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad2:	f383 8811 	msr	BASEPRI, r3
 8005ad6:	f3bf 8f6f 	isb	sy
 8005ada:	f3bf 8f4f 	dsb	sy
 8005ade:	60bb      	str	r3, [r7, #8]
 8005ae0:	e7fe      	b.n	8005ae0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	685a      	ldr	r2, [r3, #4]
 8005ae6:	4b11      	ldr	r3, [pc, #68]	; (8005b2c <vPortFree+0xa8>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4013      	ands	r3, r2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d019      	beq.n	8005b24 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d115      	bne.n	8005b24 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	685a      	ldr	r2, [r3, #4]
 8005afc:	4b0b      	ldr	r3, [pc, #44]	; (8005b2c <vPortFree+0xa8>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	43db      	mvns	r3, r3
 8005b02:	401a      	ands	r2, r3
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005b08:	f7fe fcc0 	bl	800448c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	685a      	ldr	r2, [r3, #4]
 8005b10:	4b07      	ldr	r3, [pc, #28]	; (8005b30 <vPortFree+0xac>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4413      	add	r3, r2
 8005b16:	4a06      	ldr	r2, [pc, #24]	; (8005b30 <vPortFree+0xac>)
 8005b18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005b1a:	6938      	ldr	r0, [r7, #16]
 8005b1c:	f000 f86c 	bl	8005bf8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005b20:	f7fe fcc2 	bl	80044a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005b24:	bf00      	nop
 8005b26:	3718      	adds	r7, #24
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	20001934 	.word	0x20001934
 8005b30:	2000192c 	.word	0x2000192c

08005b34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005b3a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005b3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005b40:	4b27      	ldr	r3, [pc, #156]	; (8005be0 <prvHeapInit+0xac>)
 8005b42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f003 0307 	and.w	r3, r3, #7
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00c      	beq.n	8005b68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	3307      	adds	r3, #7
 8005b52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f023 0307 	bic.w	r3, r3, #7
 8005b5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005b5c:	68ba      	ldr	r2, [r7, #8]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	4a1f      	ldr	r2, [pc, #124]	; (8005be0 <prvHeapInit+0xac>)
 8005b64:	4413      	add	r3, r2
 8005b66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005b6c:	4a1d      	ldr	r2, [pc, #116]	; (8005be4 <prvHeapInit+0xb0>)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005b72:	4b1c      	ldr	r3, [pc, #112]	; (8005be4 <prvHeapInit+0xb0>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68ba      	ldr	r2, [r7, #8]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005b80:	2208      	movs	r2, #8
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	1a9b      	subs	r3, r3, r2
 8005b86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f023 0307 	bic.w	r3, r3, #7
 8005b8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	4a15      	ldr	r2, [pc, #84]	; (8005be8 <prvHeapInit+0xb4>)
 8005b94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005b96:	4b14      	ldr	r3, [pc, #80]	; (8005be8 <prvHeapInit+0xb4>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005b9e:	4b12      	ldr	r3, [pc, #72]	; (8005be8 <prvHeapInit+0xb4>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	1ad2      	subs	r2, r2, r3
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005bb4:	4b0c      	ldr	r3, [pc, #48]	; (8005be8 <prvHeapInit+0xb4>)
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	4a0a      	ldr	r2, [pc, #40]	; (8005bec <prvHeapInit+0xb8>)
 8005bc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	4a09      	ldr	r2, [pc, #36]	; (8005bf0 <prvHeapInit+0xbc>)
 8005bca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005bcc:	4b09      	ldr	r3, [pc, #36]	; (8005bf4 <prvHeapInit+0xc0>)
 8005bce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005bd2:	601a      	str	r2, [r3, #0]
}
 8005bd4:	bf00      	nop
 8005bd6:	3714      	adds	r7, #20
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr
 8005be0:	20000d20 	.word	0x20000d20
 8005be4:	20001920 	.word	0x20001920
 8005be8:	20001928 	.word	0x20001928
 8005bec:	20001930 	.word	0x20001930
 8005bf0:	2000192c 	.word	0x2000192c
 8005bf4:	20001934 	.word	0x20001934

08005bf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005c00:	4b28      	ldr	r3, [pc, #160]	; (8005ca4 <prvInsertBlockIntoFreeList+0xac>)
 8005c02:	60fb      	str	r3, [r7, #12]
 8005c04:	e002      	b.n	8005c0c <prvInsertBlockIntoFreeList+0x14>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	60fb      	str	r3, [r7, #12]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d8f7      	bhi.n	8005c06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	4413      	add	r3, r2
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d108      	bne.n	8005c3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	441a      	add	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	441a      	add	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d118      	bne.n	8005c80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	4b15      	ldr	r3, [pc, #84]	; (8005ca8 <prvInsertBlockIntoFreeList+0xb0>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d00d      	beq.n	8005c76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	441a      	add	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	601a      	str	r2, [r3, #0]
 8005c74:	e008      	b.n	8005c88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005c76:	4b0c      	ldr	r3, [pc, #48]	; (8005ca8 <prvInsertBlockIntoFreeList+0xb0>)
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	601a      	str	r2, [r3, #0]
 8005c7e:	e003      	b.n	8005c88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d002      	beq.n	8005c96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c96:	bf00      	nop
 8005c98:	3714      	adds	r7, #20
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	20001920 	.word	0x20001920
 8005ca8:	20001928 	.word	0x20001928

08005cac <__libc_init_array>:
 8005cac:	b570      	push	{r4, r5, r6, lr}
 8005cae:	4e0d      	ldr	r6, [pc, #52]	; (8005ce4 <__libc_init_array+0x38>)
 8005cb0:	4c0d      	ldr	r4, [pc, #52]	; (8005ce8 <__libc_init_array+0x3c>)
 8005cb2:	1ba4      	subs	r4, r4, r6
 8005cb4:	10a4      	asrs	r4, r4, #2
 8005cb6:	2500      	movs	r5, #0
 8005cb8:	42a5      	cmp	r5, r4
 8005cba:	d109      	bne.n	8005cd0 <__libc_init_array+0x24>
 8005cbc:	4e0b      	ldr	r6, [pc, #44]	; (8005cec <__libc_init_array+0x40>)
 8005cbe:	4c0c      	ldr	r4, [pc, #48]	; (8005cf0 <__libc_init_array+0x44>)
 8005cc0:	f000 f82c 	bl	8005d1c <_init>
 8005cc4:	1ba4      	subs	r4, r4, r6
 8005cc6:	10a4      	asrs	r4, r4, #2
 8005cc8:	2500      	movs	r5, #0
 8005cca:	42a5      	cmp	r5, r4
 8005ccc:	d105      	bne.n	8005cda <__libc_init_array+0x2e>
 8005cce:	bd70      	pop	{r4, r5, r6, pc}
 8005cd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005cd4:	4798      	blx	r3
 8005cd6:	3501      	adds	r5, #1
 8005cd8:	e7ee      	b.n	8005cb8 <__libc_init_array+0xc>
 8005cda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005cde:	4798      	blx	r3
 8005ce0:	3501      	adds	r5, #1
 8005ce2:	e7f2      	b.n	8005cca <__libc_init_array+0x1e>
 8005ce4:	08005e0c 	.word	0x08005e0c
 8005ce8:	08005e0c 	.word	0x08005e0c
 8005cec:	08005e0c 	.word	0x08005e0c
 8005cf0:	08005e10 	.word	0x08005e10

08005cf4 <memcpy>:
 8005cf4:	b510      	push	{r4, lr}
 8005cf6:	1e43      	subs	r3, r0, #1
 8005cf8:	440a      	add	r2, r1
 8005cfa:	4291      	cmp	r1, r2
 8005cfc:	d100      	bne.n	8005d00 <memcpy+0xc>
 8005cfe:	bd10      	pop	{r4, pc}
 8005d00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d08:	e7f7      	b.n	8005cfa <memcpy+0x6>

08005d0a <memset>:
 8005d0a:	4402      	add	r2, r0
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d100      	bne.n	8005d14 <memset+0xa>
 8005d12:	4770      	bx	lr
 8005d14:	f803 1b01 	strb.w	r1, [r3], #1
 8005d18:	e7f9      	b.n	8005d0e <memset+0x4>
	...

08005d1c <_init>:
 8005d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d1e:	bf00      	nop
 8005d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d22:	bc08      	pop	{r3}
 8005d24:	469e      	mov	lr, r3
 8005d26:	4770      	bx	lr

08005d28 <_fini>:
 8005d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d2a:	bf00      	nop
 8005d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d2e:	bc08      	pop	{r3}
 8005d30:	469e      	mov	lr, r3
 8005d32:	4770      	bx	lr
