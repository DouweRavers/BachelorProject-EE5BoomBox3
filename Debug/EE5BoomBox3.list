
EE5BoomBox3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dec  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08005fcc  08005fcc  00015fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060b4  080060b4  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  080060b4  080060b4  000160b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060bc  080060bc  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060bc  080060bc  000160bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060c0  080060c0  000160c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080060c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a54  2000002c  080060f0  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a80  080060f0  00021a80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001caeb  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003627  00000000  00000000  0003cb47  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017b8  00000000  00000000  00040170  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001620  00000000  00000000  00041928  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fc0e  00000000  00000000  00042f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000138b4  00000000  00000000  00062b56  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce844  00000000  00000000  0007640a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00144c4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063d0  00000000  00000000  00144ccc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000002c 	.word	0x2000002c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005fb4 	.word	0x08005fb4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000030 	.word	0x20000030
 800021c:	08005fb4 	.word	0x08005fb4

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <delay>:
#define timer htim6


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 800052a:	4b08      	ldr	r3, [pc, #32]	; (800054c <delay+0x2c>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	2200      	movs	r2, #0
 8000530:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8000532:	bf00      	nop
 8000534:	4b05      	ldr	r3, [pc, #20]	; (800054c <delay+0x2c>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800053a:	88fb      	ldrh	r3, [r7, #6]
 800053c:	429a      	cmp	r2, r3
 800053e:	d3f9      	bcc.n	8000534 <delay+0x14>
}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	20001964 	.word	0x20001964

08000550 <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	6039      	str	r1, [r7, #0]
 800055a:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	b2db      	uxtb	r3, r3
 8000560:	461a      	mov	r2, r3
 8000562:	2101      	movs	r1, #1
 8000564:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000568:	f001 f840 	bl	80015ec <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	08db      	lsrs	r3, r3, #3
 8000570:	b2db      	uxtb	r3, r3
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	b2db      	uxtb	r3, r3
 8000578:	461a      	mov	r2, r3
 800057a:	2180      	movs	r1, #128	; 0x80
 800057c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000580:	f001 f834 	bl	80015ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	089b      	lsrs	r3, r3, #2
 8000588:	b2db      	uxtb	r3, r3
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	b2db      	uxtb	r3, r3
 8000590:	461a      	mov	r2, r3
 8000592:	2140      	movs	r1, #64	; 0x40
 8000594:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000598:	f001 f828 	bl	80015ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	085b      	lsrs	r3, r3, #1
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	461a      	mov	r2, r3
 80005aa:	2120      	movs	r1, #32
 80005ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b0:	f001 f81c 	bl	80015ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	461a      	mov	r2, r3
 80005be:	2110      	movs	r1, #16
 80005c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c4:	f001 f812 	bl	80015ec <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 80005c8:	2201      	movs	r2, #1
 80005ca:	2102      	movs	r1, #2
 80005cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d0:	f001 f80c 	bl	80015ec <HAL_GPIO_WritePin>
	delay (20);
 80005d4:	2014      	movs	r0, #20
 80005d6:	f7ff ffa3 	bl	8000520 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 80005da:	2200      	movs	r2, #0
 80005dc:	2102      	movs	r1, #2
 80005de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e2:	f001 f803 	bl	80015ec <HAL_GPIO_WritePin>
	delay (20);
 80005e6:	2014      	movs	r0, #20
 80005e8:	f7ff ff9a 	bl	8000520 <delay>
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	091b      	lsrs	r3, r3, #4
 8000602:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff ffa1 	bl	8000550 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	f003 030f 	and.w	r3, r3, #15
 8000614:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ff98 	bl	8000550 <send_to_lcd>
}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	091b      	lsrs	r3, r3, #4
 8000636:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	2101      	movs	r1, #1
 800063c:	4618      	mov	r0, r3
 800063e:	f7ff ff87 	bl	8000550 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	f003 030f 	and.w	r3, r3, #15
 8000648:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	2101      	movs	r1, #1
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff ff7e 	bl	8000550 <send_to_lcd>
}
 8000654:	bf00      	nop
 8000656:	3710      	adds	r7, #16
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <lcd_clear>:

void lcd_clear (void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000660:	2001      	movs	r0, #1
 8000662:	f7ff ffc7 	bl	80005f4 <lcd_send_cmd>
	osDelay(2);
 8000666:	2002      	movs	r0, #2
 8000668:	f003 f82c 	bl	80036c4 <osDelay>
}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}

08000670 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
    switch (row)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d002      	beq.n	8000686 <lcd_put_cur+0x16>
 8000680:	2b01      	cmp	r3, #1
 8000682:	d005      	beq.n	8000690 <lcd_put_cur+0x20>
 8000684:	e009      	b.n	800069a <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800068c:	603b      	str	r3, [r7, #0]
            break;
 800068e:	e004      	b.n	800069a <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000696:	603b      	str	r3, [r7, #0]
            break;
 8000698:	bf00      	nop
    }

    lcd_send_cmd (col);
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff ffa8 	bl	80005f4 <lcd_send_cmd>
}
 80006a4:	bf00      	nop
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <lcd_init>:


void lcd_init (void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	osDelay(50);  // wait for >40ms
 80006b0:	2032      	movs	r0, #50	; 0x32
 80006b2:	f003 f807 	bl	80036c4 <osDelay>
	lcd_send_cmd (0x30);
 80006b6:	2030      	movs	r0, #48	; 0x30
 80006b8:	f7ff ff9c 	bl	80005f4 <lcd_send_cmd>
	osDelay(5);  // wait for >4.1ms
 80006bc:	2005      	movs	r0, #5
 80006be:	f003 f801 	bl	80036c4 <osDelay>
	lcd_send_cmd (0x30);
 80006c2:	2030      	movs	r0, #48	; 0x30
 80006c4:	f7ff ff96 	bl	80005f4 <lcd_send_cmd>
	osDelay(1);  // wait for >100us
 80006c8:	2001      	movs	r0, #1
 80006ca:	f002 fffb 	bl	80036c4 <osDelay>
	lcd_send_cmd (0x30);
 80006ce:	2030      	movs	r0, #48	; 0x30
 80006d0:	f7ff ff90 	bl	80005f4 <lcd_send_cmd>
	osDelay(10);
 80006d4:	200a      	movs	r0, #10
 80006d6:	f002 fff5 	bl	80036c4 <osDelay>
	lcd_send_cmd (0x20);  // 4bit mode
 80006da:	2020      	movs	r0, #32
 80006dc:	f7ff ff8a 	bl	80005f4 <lcd_send_cmd>
	osDelay(10);
 80006e0:	200a      	movs	r0, #10
 80006e2:	f002 ffef 	bl	80036c4 <osDelay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80006e6:	2028      	movs	r0, #40	; 0x28
 80006e8:	f7ff ff84 	bl	80005f4 <lcd_send_cmd>
	osDelay(1);
 80006ec:	2001      	movs	r0, #1
 80006ee:	f002 ffe9 	bl	80036c4 <osDelay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80006f2:	2008      	movs	r0, #8
 80006f4:	f7ff ff7e 	bl	80005f4 <lcd_send_cmd>
	osDelay(1);
 80006f8:	2001      	movs	r0, #1
 80006fa:	f002 ffe3 	bl	80036c4 <osDelay>
	lcd_send_cmd (0x01);  // clear display
 80006fe:	2001      	movs	r0, #1
 8000700:	f7ff ff78 	bl	80005f4 <lcd_send_cmd>
	osDelay(1);
 8000704:	2001      	movs	r0, #1
 8000706:	f002 ffdd 	bl	80036c4 <osDelay>
	osDelay(1);
 800070a:	2001      	movs	r0, #1
 800070c:	f002 ffda 	bl	80036c4 <osDelay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000710:	2006      	movs	r0, #6
 8000712:	f7ff ff6f 	bl	80005f4 <lcd_send_cmd>
	osDelay(1);
 8000716:	2001      	movs	r0, #1
 8000718:	f002 ffd4 	bl	80036c4 <osDelay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800071c:	200c      	movs	r0, #12
 800071e:	f7ff ff69 	bl	80005f4 <lcd_send_cmd>
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}

08000726 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	b082      	sub	sp, #8
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800072e:	e006      	b.n	800073e <lcd_send_string+0x18>
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	1c5a      	adds	r2, r3, #1
 8000734:	607a      	str	r2, [r7, #4]
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff ff75 	bl	8000628 <lcd_send_data>
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d1f4      	bne.n	8000730 <lcd_send_string+0xa>
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <init_app>:
#include "appmain.h"
#include "main.h"
#include "cmsis_os.h"

void init_app()
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0

}
 8000752:	bf00      	nop
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr

0800075c <tick_app>:

void tick_app()
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	osDelay(1000);
 8000760:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000764:	f002 ffae 	bl	80036c4 <osDelay>
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}

0800076c <init_interface>:
void screen_update(uint32_t frame);
void volume_update(uint32_t frame);

// public functions
void init_interface()
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	lcd_init ();
 8000770:	f7ff ff9c 	bl	80006ac <lcd_init>
}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}

08000778 <tick_interface>:

void tick_interface(uint32_t frame)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	// at 30Hz the uint of frame will loop back after 100 years
	interface_update(frame);
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f000 f82f 	bl	80007e4 <interface_update>
	volume_update(frame);
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f000 f882 	bl	8000890 <volume_update>
	screen_update(frame);
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f000 f833 	bl	80007f8 <screen_update>
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <interrupt_interface>:


void interrupt_interface(uint16_t GPIO_Pin)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_9)
 80007a6:	88fb      	ldrh	r3, [r7, #6]
 80007a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80007ac:	d113      	bne.n	80007d6 <interrupt_interface+0x3a>
	{
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 1) volume_delta++;
 80007ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b6:	f000 ff01 	bl	80015bc <HAL_GPIO_ReadPin>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d105      	bne.n	80007cc <interrupt_interface+0x30>
 80007c0:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <interrupt_interface+0x44>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	3301      	adds	r3, #1
 80007c6:	4a06      	ldr	r2, [pc, #24]	; (80007e0 <interrupt_interface+0x44>)
 80007c8:	6013      	str	r3, [r2, #0]
		else volume_delta--;
	}
}
 80007ca:	e004      	b.n	80007d6 <interrupt_interface+0x3a>
		else volume_delta--;
 80007cc:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <interrupt_interface+0x44>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	3b01      	subs	r3, #1
 80007d2:	4a03      	ldr	r2, [pc, #12]	; (80007e0 <interrupt_interface+0x44>)
 80007d4:	6013      	str	r3, [r2, #0]
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	2000004c 	.word	0x2000004c

080007e4 <interface_update>:


// private functions
void interface_update(uint32_t frame)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]

}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <screen_update>:


void screen_update(uint32_t frame)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08a      	sub	sp, #40	; 0x28
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	if(current_screen == VolumeScreen && frame - screen_start_time > 60)
 8000800:	4b1e      	ldr	r3, [pc, #120]	; (800087c <screen_update+0x84>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d10c      	bne.n	8000822 <screen_update+0x2a>
 8000808:	4b1d      	ldr	r3, [pc, #116]	; (8000880 <screen_update+0x88>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	1ad3      	subs	r3, r2, r3
 8000810:	2b3c      	cmp	r3, #60	; 0x3c
 8000812:	d906      	bls.n	8000822 <screen_update+0x2a>
	{
		current_screen = previous_screen;
 8000814:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <screen_update+0x8c>)
 8000816:	781a      	ldrb	r2, [r3, #0]
 8000818:	4b18      	ldr	r3, [pc, #96]	; (800087c <screen_update+0x84>)
 800081a:	701a      	strb	r2, [r3, #0]
		screen_updated = true;
 800081c:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <screen_update+0x90>)
 800081e:	2201      	movs	r2, #1
 8000820:	701a      	strb	r2, [r3, #0]
	}
	if(screen_updated)
 8000822:	4b19      	ldr	r3, [pc, #100]	; (8000888 <screen_update+0x90>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d023      	beq.n	8000872 <screen_update+0x7a>
	{
		lcd_clear();
 800082a:	f7ff ff17 	bl	800065c <lcd_clear>
		char first[16], second[16];
		screens[current_screen].GetScreenOutput(frame, first, second);
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <screen_update+0x84>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	4619      	mov	r1, r3
 8000834:	4a15      	ldr	r2, [pc, #84]	; (800088c <screen_update+0x94>)
 8000836:	460b      	mov	r3, r1
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	440b      	add	r3, r1
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	4413      	add	r3, r2
 8000840:	3304      	adds	r3, #4
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f107 0208 	add.w	r2, r7, #8
 8000848:	f107 0118 	add.w	r1, r7, #24
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	4798      	blx	r3
		lcd_send_string(first);
 8000850:	f107 0318 	add.w	r3, r7, #24
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ff66 	bl	8000726 <lcd_send_string>
		lcd_put_cur(1,0);
 800085a:	2100      	movs	r1, #0
 800085c:	2001      	movs	r0, #1
 800085e:	f7ff ff07 	bl	8000670 <lcd_put_cur>
		lcd_send_string(second);
 8000862:	f107 0308 	add.w	r3, r7, #8
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff ff5d 	bl	8000726 <lcd_send_string>
		screen_updated = false;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <screen_update+0x90>)
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]
	}
}
 8000872:	bf00      	nop
 8000874:	3728      	adds	r7, #40	; 0x28
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000002 	.word	0x20000002
 8000880:	20000050 	.word	0x20000050
 8000884:	20000001 	.word	0x20000001
 8000888:	20000000 	.word	0x20000000
 800088c:	20000004 	.word	0x20000004

08000890 <volume_update>:

// Volume wheel driver. Handles input of volume wheel.
void volume_update(uint32_t frame)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	if(frame % 2 == 0) // prescaler (checks every 2 frames (15Hz))
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d137      	bne.n	8000912 <volume_update+0x82>
	{
		if(volume_delta > 0 && volume_level < 20) { volume_level++; }
 80008a2:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <volume_update+0x90>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	dd0a      	ble.n	80008c0 <volume_update+0x30>
 80008aa:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <volume_update+0x94>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b13      	cmp	r3, #19
 80008b0:	d806      	bhi.n	80008c0 <volume_update+0x30>
 80008b2:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <volume_update+0x94>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	3301      	adds	r3, #1
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <volume_update+0x94>)
 80008bc:	701a      	strb	r2, [r3, #0]
 80008be:	e00d      	b.n	80008dc <volume_update+0x4c>
		else if(volume_delta < 0 && volume_level > 0) { volume_level--; }
 80008c0:	4b17      	ldr	r3, [pc, #92]	; (8000920 <volume_update+0x90>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	da09      	bge.n	80008dc <volume_update+0x4c>
 80008c8:	4b16      	ldr	r3, [pc, #88]	; (8000924 <volume_update+0x94>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d005      	beq.n	80008dc <volume_update+0x4c>
 80008d0:	4b14      	ldr	r3, [pc, #80]	; (8000924 <volume_update+0x94>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	3b01      	subs	r3, #1
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <volume_update+0x94>)
 80008da:	701a      	strb	r2, [r3, #0]
		uint8_t debug = volume_level;
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <volume_update+0x94>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	73fb      	strb	r3, [r7, #15]
		if(volume_delta != 0) {
 80008e2:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <volume_update+0x90>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d013      	beq.n	8000912 <volume_update+0x82>
			volume_delta = 0;
 80008ea:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <volume_update+0x90>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
			screen_updated = true;
 80008f0:	4b0d      	ldr	r3, [pc, #52]	; (8000928 <volume_update+0x98>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	701a      	strb	r2, [r3, #0]
			if(current_screen != VolumeScreen) previous_screen = current_screen;
 80008f6:	4b0d      	ldr	r3, [pc, #52]	; (800092c <volume_update+0x9c>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d003      	beq.n	8000906 <volume_update+0x76>
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <volume_update+0x9c>)
 8000900:	781a      	ldrb	r2, [r3, #0]
 8000902:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <volume_update+0xa0>)
 8000904:	701a      	strb	r2, [r3, #0]
			current_screen = VolumeScreen;
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <volume_update+0x9c>)
 8000908:	2200      	movs	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]
			screen_start_time = frame;
 800090c:	4a09      	ldr	r2, [pc, #36]	; (8000934 <volume_update+0xa4>)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000912:	bf00      	nop
 8000914:	3714      	adds	r7, #20
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	2000004c 	.word	0x2000004c
 8000924:	20000048 	.word	0x20000048
 8000928:	20000000 	.word	0x20000000
 800092c:	20000002 	.word	0x20000002
 8000930:	20000001 	.word	0x20000001
 8000934:	20000050 	.word	0x20000050

08000938 <getScreenOutputVolume>:
		{ StartScreen, &getScreenOutputStart, &windowAtStart }
};

// Volume screen
void getScreenOutputVolume(uint32_t frame, char * first, char * second)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08e      	sub	sp, #56	; 0x38
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
	char r_first[] = "     Volume";
 8000944:	4a1d      	ldr	r2, [pc, #116]	; (80009bc <getScreenOutputVolume+0x84>)
 8000946:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800094a:	ca07      	ldmia	r2, {r0, r1, r2}
 800094c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char r_second[17];
	for(int i=0;i<16;i++)
 8000950:	2300      	movs	r3, #0
 8000952:	637b      	str	r3, [r7, #52]	; 0x34
 8000954:	e01a      	b.n	800098c <getScreenOutputVolume+0x54>
	{
		if(i * 20 < volume_level * 16 ) r_second[i] = '\xff';
 8000956:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000958:	4613      	mov	r3, r2
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	4413      	add	r3, r2
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	461a      	mov	r2, r3
 8000962:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <getScreenOutputVolume+0x88>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	011b      	lsls	r3, r3, #4
 8000968:	429a      	cmp	r2, r3
 800096a:	da06      	bge.n	800097a <getScreenOutputVolume+0x42>
 800096c:	f107 0214 	add.w	r2, r7, #20
 8000970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000972:	4413      	add	r3, r2
 8000974:	22ff      	movs	r2, #255	; 0xff
 8000976:	701a      	strb	r2, [r3, #0]
 8000978:	e005      	b.n	8000986 <getScreenOutputVolume+0x4e>
		else r_second[i] = '_';
 800097a:	f107 0214 	add.w	r2, r7, #20
 800097e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000980:	4413      	add	r3, r2
 8000982:	225f      	movs	r2, #95	; 0x5f
 8000984:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<16;i++)
 8000986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000988:	3301      	adds	r3, #1
 800098a:	637b      	str	r3, [r7, #52]	; 0x34
 800098c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800098e:	2b0f      	cmp	r3, #15
 8000990:	dde1      	ble.n	8000956 <getScreenOutputVolume+0x1e>
	}
	r_second[16] = '\0';
 8000992:	2300      	movs	r3, #0
 8000994:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	strncpy(first, r_first, 16);
 8000998:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800099c:	2210      	movs	r2, #16
 800099e:	4619      	mov	r1, r3
 80009a0:	68b8      	ldr	r0, [r7, #8]
 80009a2:	f005 faf2 	bl	8005f8a <strncpy>
	strncpy(second, r_second, 16);
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	2210      	movs	r2, #16
 80009ac:	4619      	mov	r1, r3
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f005 faeb 	bl	8005f8a <strncpy>
}
 80009b4:	bf00      	nop
 80009b6:	3738      	adds	r7, #56	; 0x38
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	08005fcc 	.word	0x08005fcc
 80009c0:	20000048 	.word	0x20000048

080009c4 <windowAtVolume>:

enum screentype windowAtVolume(enum direction dir){
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
	// a button is pressed the volume screen should dissapear and the last menu one should appear
	return StartScreen;
 80009ce:	2301      	movs	r3, #1
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <getScreenOutputStart>:

// Start screen
void getScreenOutputStart(uint32_t frame, char * first, char * second)
{
 80009dc:	b590      	push	{r4, r7, lr}
 80009de:	b08d      	sub	sp, #52	; 0x34
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
	char r_first[] = "    MainMenu";
 80009e8:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <getScreenOutputStart+0x48>)
 80009ea:	f107 0420 	add.w	r4, r7, #32
 80009ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009f0:	c407      	stmia	r4!, {r0, r1, r2}
 80009f2:	7023      	strb	r3, [r4, #0]
	char r_second[] = " In development";
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <getScreenOutputStart+0x4c>)
 80009f6:	f107 0410 	add.w	r4, r7, #16
 80009fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	strncpy(first, r_first, 16);
 8000a00:	f107 0320 	add.w	r3, r7, #32
 8000a04:	2210      	movs	r2, #16
 8000a06:	4619      	mov	r1, r3
 8000a08:	68b8      	ldr	r0, [r7, #8]
 8000a0a:	f005 fabe 	bl	8005f8a <strncpy>
	strncpy(second, r_second, 16);
 8000a0e:	f107 0310 	add.w	r3, r7, #16
 8000a12:	2210      	movs	r2, #16
 8000a14:	4619      	mov	r1, r3
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f005 fab7 	bl	8005f8a <strncpy>
}
 8000a1c:	bf00      	nop
 8000a1e:	3734      	adds	r7, #52	; 0x34
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd90      	pop	{r4, r7, pc}
 8000a24:	08005fd8 	.word	0x08005fd8
 8000a28:	08005fe8 	.word	0x08005fe8

08000a2c <windowAtStart>:

enum screentype windowAtStart(enum direction dir){
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
	return VolumeScreen;
 8000a36:	2300      	movs	r3, #0
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a48:	f000 fab5 	bl	8000fb6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a4c:	f000 f82c 	bl	8000aa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a50:	f000 f912 	bl	8000c78 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a54:	f000 f8c4 	bl	8000be0 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000a58:	f000 f88c 	bl	8000b74 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 8000a5c:	480b      	ldr	r0, [pc, #44]	; (8000a8c <main+0x48>)
 8000a5e:	f001 fe25 	bl	80026ac <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a62:	f002 fd1f 	bl	80034a4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mainTask */
  mainTaskHandle = osThreadNew(StartMainTask, NULL, &mainTask_attributes);
 8000a66:	4a0a      	ldr	r2, [pc, #40]	; (8000a90 <main+0x4c>)
 8000a68:	2100      	movs	r1, #0
 8000a6a:	480a      	ldr	r0, [pc, #40]	; (8000a94 <main+0x50>)
 8000a6c:	f002 fd84 	bl	8003578 <osThreadNew>
 8000a70:	4602      	mov	r2, r0
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <main+0x54>)
 8000a74:	601a      	str	r2, [r3, #0]

  /* creation of InterfaceTask */
  InterfaceTaskHandle = osThreadNew(StartInterfaceTask, NULL, &InterfaceTask_attributes);
 8000a76:	4a09      	ldr	r2, [pc, #36]	; (8000a9c <main+0x58>)
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4809      	ldr	r0, [pc, #36]	; (8000aa0 <main+0x5c>)
 8000a7c:	f002 fd7c 	bl	8003578 <osThreadNew>
 8000a80:	4602      	mov	r2, r0
 8000a82:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <main+0x60>)
 8000a84:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000a86:	f002 fd41 	bl	800350c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <main+0x46>
 8000a8c:	20001964 	.word	0x20001964
 8000a90:	0800603c 	.word	0x0800603c
 8000a94:	08000d8b 	.word	0x08000d8b
 8000a98:	2000195c 	.word	0x2000195c
 8000a9c:	08006060 	.word	0x08006060
 8000aa0:	08000d9d 	.word	0x08000d9d
 8000aa4:	20001960 	.word	0x20001960

08000aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b0a4      	sub	sp, #144	; 0x90
 8000aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ab2:	2238      	movs	r2, #56	; 0x38
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f005 fa5f 	bl	8005f7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000abc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000acc:	463b      	mov	r3, r7
 8000ace:	2244      	movs	r2, #68	; 0x44
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f005 fa51 	bl	8005f7a <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f000 fdb7 	bl	800164c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ae2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ae6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae8:	2340      	movs	r3, #64	; 0x40
 8000aea:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aec:	2302      	movs	r3, #2
 8000aee:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000af0:	2302      	movs	r3, #2
 8000af2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000af4:	2304      	movs	r3, #4
 8000af6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000af8:	2355      	movs	r3, #85	; 0x55
 8000afa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000afe:	2302      	movs	r3, #2
 8000b00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b04:	2302      	movs	r3, #2
 8000b06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b10:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b14:	4618      	mov	r0, r3
 8000b16:	f000 fe4d 	bl	80017b4 <HAL_RCC_OscConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000b20:	f000 f94e 	bl	8000dc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b24:	230f      	movs	r3, #15
 8000b26:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b34:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b36:	2300      	movs	r3, #0
 8000b38:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b3a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b3e:	2104      	movs	r1, #4
 8000b40:	4618      	mov	r0, r3
 8000b42:	f001 f94f 	bl	8001de4 <HAL_RCC_ClockConfig>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000b4c:	f000 f938 	bl	8000dc0 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b50:	2302      	movs	r3, #2
 8000b52:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b58:	463b      	mov	r3, r7
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f001 fb5e 	bl	800221c <HAL_RCCEx_PeriphCLKConfig>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b66:	f000 f92b 	bl	8000dc0 <Error_Handler>
  }
}
 8000b6a:	bf00      	nop
 8000b6c:	3790      	adds	r7, #144	; 0x90
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b84:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <MX_TIM6_Init+0x64>)
 8000b86:	4a15      	ldr	r2, [pc, #84]	; (8000bdc <MX_TIM6_Init+0x68>)
 8000b88:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 170-1;
 8000b8a:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <MX_TIM6_Init+0x64>)
 8000b8c:	22a9      	movs	r2, #169	; 0xa9
 8000b8e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b90:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <MX_TIM6_Init+0x64>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65534;
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <MX_TIM6_Init+0x64>)
 8000b98:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000b9c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <MX_TIM6_Init+0x64>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ba4:	480c      	ldr	r0, [pc, #48]	; (8000bd8 <MX_TIM6_Init+0x64>)
 8000ba6:	f001 fd29 	bl	80025fc <HAL_TIM_Base_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000bb0:	f000 f906 	bl	8000dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <MX_TIM6_Init+0x64>)
 8000bc2:	f001 fe65 	bl	8002890 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000bcc:	f000 f8f8 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20001964 	.word	0x20001964
 8000bdc:	40001000 	.word	0x40001000

08000be0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000be4:	4b22      	ldr	r3, [pc, #136]	; (8000c70 <MX_USART2_UART_Init+0x90>)
 8000be6:	4a23      	ldr	r2, [pc, #140]	; (8000c74 <MX_USART2_UART_Init+0x94>)
 8000be8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bea:	4b21      	ldr	r3, [pc, #132]	; (8000c70 <MX_USART2_UART_Init+0x90>)
 8000bec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bf0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf2:	4b1f      	ldr	r3, [pc, #124]	; (8000c70 <MX_USART2_UART_Init+0x90>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bf8:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <MX_USART2_UART_Init+0x90>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bfe:	4b1c      	ldr	r3, [pc, #112]	; (8000c70 <MX_USART2_UART_Init+0x90>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c04:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <MX_USART2_UART_Init+0x90>)
 8000c06:	220c      	movs	r2, #12
 8000c08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0a:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <MX_USART2_UART_Init+0x90>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c10:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <MX_USART2_UART_Init+0x90>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c16:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <MX_USART2_UART_Init+0x90>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c1c:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <MX_USART2_UART_Init+0x90>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c22:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <MX_USART2_UART_Init+0x90>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c28:	4811      	ldr	r0, [pc, #68]	; (8000c70 <MX_USART2_UART_Init+0x90>)
 8000c2a:	f001 feb3 	bl	8002994 <HAL_UART_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c34:	f000 f8c4 	bl	8000dc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c38:	2100      	movs	r1, #0
 8000c3a:	480d      	ldr	r0, [pc, #52]	; (8000c70 <MX_USART2_UART_Init+0x90>)
 8000c3c:	f002 fb45 	bl	80032ca <HAL_UARTEx_SetTxFifoThreshold>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c46:	f000 f8bb 	bl	8000dc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4808      	ldr	r0, [pc, #32]	; (8000c70 <MX_USART2_UART_Init+0x90>)
 8000c4e:	f002 fb7a 	bl	8003346 <HAL_UARTEx_SetRxFifoThreshold>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c58:	f000 f8b2 	bl	8000dc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c5c:	4804      	ldr	r0, [pc, #16]	; (8000c70 <MX_USART2_UART_Init+0x90>)
 8000c5e:	f002 fafb 	bl	8003258 <HAL_UARTEx_DisableFifoMode>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c68:	f000 f8aa 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	200019b0 	.word	0x200019b0
 8000c74:	40004400 	.word	0x40004400

08000c78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b088      	sub	sp, #32
 8000c7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7e:	f107 030c 	add.w	r3, r7, #12
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	4b35      	ldr	r3, [pc, #212]	; (8000d64 <MX_GPIO_Init+0xec>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	4a34      	ldr	r2, [pc, #208]	; (8000d64 <MX_GPIO_Init+0xec>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9a:	4b32      	ldr	r3, [pc, #200]	; (8000d64 <MX_GPIO_Init+0xec>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca6:	4b2f      	ldr	r3, [pc, #188]	; (8000d64 <MX_GPIO_Init+0xec>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000caa:	4a2e      	ldr	r2, [pc, #184]	; (8000d64 <MX_GPIO_Init+0xec>)
 8000cac:	f043 0302 	orr.w	r3, r3, #2
 8000cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb2:	4b2c      	ldr	r3, [pc, #176]	; (8000d64 <MX_GPIO_Init+0xec>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RS_Pin|LCD_E_Pin|LCD_D4_Pin|LCD_D5_Pin
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	21f3      	movs	r1, #243	; 0xf3
 8000cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc6:	f000 fc91 	bl	80015ec <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cd0:	4825      	ldr	r0, [pc, #148]	; (8000d68 <MX_GPIO_Init+0xf0>)
 8000cd2:	f000 fc8b 	bl	80015ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RS_Pin LCD_E_Pin LCD_D4_Pin LCD_D5_Pin
                           LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_E_Pin|LCD_D4_Pin|LCD_D5_Pin
 8000cd6:	23f3      	movs	r3, #243	; 0xf3
 8000cd8:	60fb      	str	r3, [r7, #12]
                          |LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce6:	f107 030c 	add.w	r3, r7, #12
 8000cea:	4619      	mov	r1, r3
 8000cec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf0:	f000 fae2 	bl	80012b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VOL_B_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = VOL_B_INTERRUPT_Pin;
 8000cf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cf8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cfa:	4b1c      	ldr	r3, [pc, #112]	; (8000d6c <MX_GPIO_Init+0xf4>)
 8000cfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(VOL_B_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 8000d02:	f107 030c 	add.w	r3, r7, #12
 8000d06:	4619      	mov	r1, r3
 8000d08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0c:	f000 fad4 	bl	80012b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VOL_A_READ_Pin */
  GPIO_InitStruct.Pin = VOL_A_READ_Pin;
 8000d10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(VOL_A_READ_GPIO_Port, &GPIO_InitStruct);
 8000d1e:	f107 030c 	add.w	r3, r7, #12
 8000d22:	4619      	mov	r1, r3
 8000d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d28:	f000 fac6 	bl	80012b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d32:	2301      	movs	r3, #1
 8000d34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d3e:	f107 030c 	add.w	r3, r7, #12
 8000d42:	4619      	mov	r1, r3
 8000d44:	4808      	ldr	r0, [pc, #32]	; (8000d68 <MX_GPIO_Init+0xf0>)
 8000d46:	f000 fab7 	bl	80012b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2105      	movs	r1, #5
 8000d4e:	2017      	movs	r0, #23
 8000d50:	f000 fa7d 	bl	800124e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d54:	2017      	movs	r0, #23
 8000d56:	f000 fa94 	bl	8001282 <HAL_NVIC_EnableIRQ>

}
 8000d5a:	bf00      	nop
 8000d5c:	3720      	adds	r7, #32
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40021000 	.word	0x40021000
 8000d68:	48000400 	.word	0x48000400
 8000d6c:	10210000 	.word	0x10210000

08000d70 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	80fb      	strh	r3, [r7, #6]
	interrupt_interface(GPIO_Pin);
 8000d7a:	88fb      	ldrh	r3, [r7, #6]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fd0d 	bl	800079c <interrupt_interface>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <StartMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void *argument)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	init_app();
 8000d92:	f7ff fcdc 	bl	800074e <init_app>
	for(;;)
	{
		tick_app();
 8000d96:	f7ff fce1 	bl	800075c <tick_app>
 8000d9a:	e7fc      	b.n	8000d96 <StartMainTask+0xc>

08000d9c <StartInterfaceTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartInterfaceTask */
void StartInterfaceTask(void *argument)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartInterfaceTask */
	init_interface();
 8000da4:	f7ff fce2 	bl	800076c <init_interface>
	for(uint32_t frame = 0;1;frame++)
 8000da8:	2300      	movs	r3, #0
 8000daa:	60fb      	str	r3, [r7, #12]
	{
		osDelay(33); // Interface will update at 30FPS
 8000dac:	2021      	movs	r0, #33	; 0x21
 8000dae:	f002 fc89 	bl	80036c4 <osDelay>
		tick_interface(frame);
 8000db2:	68f8      	ldr	r0, [r7, #12]
 8000db4:	f7ff fce0 	bl	8000778 <tick_interface>
	for(uint32_t frame = 0;1;frame++)
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	60fb      	str	r3, [r7, #12]
		osDelay(33); // Interface will update at 30FPS
 8000dbe:	e7f5      	b.n	8000dac <StartInterfaceTask+0x10>

08000dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <Error_Handler+0x6>

08000dc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dce:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <HAL_MspInit+0x50>)
 8000dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dd2:	4a11      	ldr	r2, [pc, #68]	; (8000e18 <HAL_MspInit+0x50>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6613      	str	r3, [r2, #96]	; 0x60
 8000dda:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <HAL_MspInit+0x50>)
 8000ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de6:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <HAL_MspInit+0x50>)
 8000de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dea:	4a0b      	ldr	r2, [pc, #44]	; (8000e18 <HAL_MspInit+0x50>)
 8000dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df0:	6593      	str	r3, [r2, #88]	; 0x58
 8000df2:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <HAL_MspInit+0x50>)
 8000df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	210f      	movs	r1, #15
 8000e02:	f06f 0001 	mvn.w	r0, #1
 8000e06:	f000 fa22 	bl	800124e <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000e0a:	f000 fcc3 	bl	8001794 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40021000 	.word	0x40021000

08000e1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <HAL_TIM_Base_MspInit+0x38>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d10b      	bne.n	8000e46 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <HAL_TIM_Base_MspInit+0x3c>)
 8000e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e32:	4a09      	ldr	r2, [pc, #36]	; (8000e58 <HAL_TIM_Base_MspInit+0x3c>)
 8000e34:	f043 0310 	orr.w	r3, r3, #16
 8000e38:	6593      	str	r3, [r2, #88]	; 0x58
 8000e3a:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <HAL_TIM_Base_MspInit+0x3c>)
 8000e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e3e:	f003 0310 	and.w	r3, r3, #16
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000e46:	bf00      	nop
 8000e48:	3714      	adds	r7, #20
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	40001000 	.word	0x40001000
 8000e58:	40021000 	.word	0x40021000

08000e5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	; 0x28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a17      	ldr	r2, [pc, #92]	; (8000ed8 <HAL_UART_MspInit+0x7c>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d128      	bne.n	8000ed0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e7e:	4b17      	ldr	r3, [pc, #92]	; (8000edc <HAL_UART_MspInit+0x80>)
 8000e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e82:	4a16      	ldr	r2, [pc, #88]	; (8000edc <HAL_UART_MspInit+0x80>)
 8000e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e88:	6593      	str	r3, [r2, #88]	; 0x58
 8000e8a:	4b14      	ldr	r3, [pc, #80]	; (8000edc <HAL_UART_MspInit+0x80>)
 8000e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	4b11      	ldr	r3, [pc, #68]	; (8000edc <HAL_UART_MspInit+0x80>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9a:	4a10      	ldr	r2, [pc, #64]	; (8000edc <HAL_UART_MspInit+0x80>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <HAL_UART_MspInit+0x80>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000eae:	230c      	movs	r3, #12
 8000eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ebe:	2307      	movs	r3, #7
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ecc:	f000 f9f4 	bl	80012b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ed0:	bf00      	nop
 8000ed2:	3728      	adds	r7, #40	; 0x28
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40004400 	.word	0x40004400
 8000edc:	40021000 	.word	0x40021000

08000ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <NMI_Handler+0x4>

08000ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <HardFault_Handler+0x4>

08000eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <MemManage_Handler+0x4>

08000ef2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <BusFault_Handler+0x4>

08000ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <UsageFault_Handler+0x4>

08000efe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f10:	f000 f8a4 	bl	800105c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000f14:	f003 ffc8 	bl	8004ea8 <xTaskGetSchedulerState>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d001      	beq.n	8000f22 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000f1e:	f004 fd9b 	bl	8005a58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000f2a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f2e:	f000 fb75 	bl	800161c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <SystemInit+0x28>)
 8000f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f42:	4a07      	ldr	r2, [pc, #28]	; (8000f60 <SystemInit+0x28>)
 8000f44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f4c:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <SystemInit+0x28>)
 8000f4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f52:	609a      	str	r2, [r3, #8]
#endif
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f64:	480d      	ldr	r0, [pc, #52]	; (8000f9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f66:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f68:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f6a:	490e      	ldr	r1, [pc, #56]	; (8000fa4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f6c:	4a0e      	ldr	r2, [pc, #56]	; (8000fa8 <LoopForever+0xe>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f70:	e002      	b.n	8000f78 <LoopCopyDataInit>

08000f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f76:	3304      	adds	r3, #4

08000f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f7c:	d3f9      	bcc.n	8000f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7e:	4a0b      	ldr	r2, [pc, #44]	; (8000fac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f80:	4c0b      	ldr	r4, [pc, #44]	; (8000fb0 <LoopForever+0x16>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f84:	e001      	b.n	8000f8a <LoopFillZerobss>

08000f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f88:	3204      	adds	r2, #4

08000f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f8c:	d3fb      	bcc.n	8000f86 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f8e:	f7ff ffd3 	bl	8000f38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f92:	f004 ffc3 	bl	8005f1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f96:	f7ff fd55 	bl	8000a44 <main>

08000f9a <LoopForever>:

LoopForever:
    b LoopForever
 8000f9a:	e7fe      	b.n	8000f9a <LoopForever>
  ldr   r0, =_estack
 8000f9c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa4:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000fa8:	080060c4 	.word	0x080060c4
  ldr r2, =_sbss
 8000fac:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000fb0:	20001a80 	.word	0x20001a80

08000fb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fb4:	e7fe      	b.n	8000fb4 <ADC1_2_IRQHandler>

08000fb6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc0:	2003      	movs	r0, #3
 8000fc2:	f000 f939 	bl	8001238 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fc6:	200f      	movs	r0, #15
 8000fc8:	f000 f80e 	bl	8000fe8 <HAL_InitTick>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d002      	beq.n	8000fd8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	71fb      	strb	r3, [r7, #7]
 8000fd6:	e001      	b.n	8000fdc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fd8:	f7ff fef6 	bl	8000dc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fdc:	79fb      	ldrb	r3, [r7, #7]

}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ff4:	4b16      	ldr	r3, [pc, #88]	; (8001050 <HAL_InitTick+0x68>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d022      	beq.n	8001042 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ffc:	4b15      	ldr	r3, [pc, #84]	; (8001054 <HAL_InitTick+0x6c>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b13      	ldr	r3, [pc, #76]	; (8001050 <HAL_InitTick+0x68>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001008:	fbb1 f3f3 	udiv	r3, r1, r3
 800100c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001010:	4618      	mov	r0, r3
 8001012:	f000 f944 	bl	800129e <HAL_SYSTICK_Config>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d10f      	bne.n	800103c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b0f      	cmp	r3, #15
 8001020:	d809      	bhi.n	8001036 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001022:	2200      	movs	r2, #0
 8001024:	6879      	ldr	r1, [r7, #4]
 8001026:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800102a:	f000 f910 	bl	800124e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800102e:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <HAL_InitTick+0x70>)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6013      	str	r3, [r2, #0]
 8001034:	e007      	b.n	8001046 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	73fb      	strb	r3, [r7, #15]
 800103a:	e004      	b.n	8001046 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	73fb      	strb	r3, [r7, #15]
 8001040:	e001      	b.n	8001046 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001046:	7bfb      	ldrb	r3, [r7, #15]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000024 	.word	0x20000024
 8001054:	2000001c 	.word	0x2000001c
 8001058:	20000020 	.word	0x20000020

0800105c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <HAL_IncTick+0x1c>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <HAL_IncTick+0x20>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4413      	add	r3, r2
 800106a:	4a03      	ldr	r2, [pc, #12]	; (8001078 <HAL_IncTick+0x1c>)
 800106c:	6013      	str	r3, [r2, #0]
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	20001a3c 	.word	0x20001a3c
 800107c:	20000024 	.word	0x20000024

08001080 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  return uwTick;
 8001084:	4b03      	ldr	r3, [pc, #12]	; (8001094 <HAL_GetTick+0x14>)
 8001086:	681b      	ldr	r3, [r3, #0]
}
 8001088:	4618      	mov	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20001a3c 	.word	0x20001a3c

08001098 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <__NVIC_SetPriorityGrouping+0x44>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b4:	4013      	ands	r3, r2
 80010b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ca:	4a04      	ldr	r2, [pc, #16]	; (80010dc <__NVIC_SetPriorityGrouping+0x44>)
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	60d3      	str	r3, [r2, #12]
}
 80010d0:	bf00      	nop
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <__NVIC_GetPriorityGrouping+0x18>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	0a1b      	lsrs	r3, r3, #8
 80010ea:	f003 0307 	and.w	r3, r3, #7
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	2b00      	cmp	r3, #0
 800110c:	db0b      	blt.n	8001126 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	f003 021f 	and.w	r2, r3, #31
 8001114:	4907      	ldr	r1, [pc, #28]	; (8001134 <__NVIC_EnableIRQ+0x38>)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	095b      	lsrs	r3, r3, #5
 800111c:	2001      	movs	r0, #1
 800111e:	fa00 f202 	lsl.w	r2, r0, r2
 8001122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000e100 	.word	0xe000e100

08001138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	6039      	str	r1, [r7, #0]
 8001142:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001148:	2b00      	cmp	r3, #0
 800114a:	db0a      	blt.n	8001162 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	b2da      	uxtb	r2, r3
 8001150:	490c      	ldr	r1, [pc, #48]	; (8001184 <__NVIC_SetPriority+0x4c>)
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	0112      	lsls	r2, r2, #4
 8001158:	b2d2      	uxtb	r2, r2
 800115a:	440b      	add	r3, r1
 800115c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001160:	e00a      	b.n	8001178 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	b2da      	uxtb	r2, r3
 8001166:	4908      	ldr	r1, [pc, #32]	; (8001188 <__NVIC_SetPriority+0x50>)
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	f003 030f 	and.w	r3, r3, #15
 800116e:	3b04      	subs	r3, #4
 8001170:	0112      	lsls	r2, r2, #4
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	440b      	add	r3, r1
 8001176:	761a      	strb	r2, [r3, #24]
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000e100 	.word	0xe000e100
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800118c:	b480      	push	{r7}
 800118e:	b089      	sub	sp, #36	; 0x24
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f1c3 0307 	rsb	r3, r3, #7
 80011a6:	2b04      	cmp	r3, #4
 80011a8:	bf28      	it	cs
 80011aa:	2304      	movcs	r3, #4
 80011ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3304      	adds	r3, #4
 80011b2:	2b06      	cmp	r3, #6
 80011b4:	d902      	bls.n	80011bc <NVIC_EncodePriority+0x30>
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3b03      	subs	r3, #3
 80011ba:	e000      	b.n	80011be <NVIC_EncodePriority+0x32>
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43da      	mvns	r2, r3
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	401a      	ands	r2, r3
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	fa01 f303 	lsl.w	r3, r1, r3
 80011de:	43d9      	mvns	r1, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	4313      	orrs	r3, r2
         );
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3724      	adds	r7, #36	; 0x24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
	...

080011f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3b01      	subs	r3, #1
 8001200:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001204:	d301      	bcc.n	800120a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001206:	2301      	movs	r3, #1
 8001208:	e00f      	b.n	800122a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800120a:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <SysTick_Config+0x40>)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3b01      	subs	r3, #1
 8001210:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001212:	210f      	movs	r1, #15
 8001214:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001218:	f7ff ff8e 	bl	8001138 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800121c:	4b05      	ldr	r3, [pc, #20]	; (8001234 <SysTick_Config+0x40>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001222:	4b04      	ldr	r3, [pc, #16]	; (8001234 <SysTick_Config+0x40>)
 8001224:	2207      	movs	r2, #7
 8001226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	e000e010 	.word	0xe000e010

08001238 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ff29 	bl	8001098 <__NVIC_SetPriorityGrouping>
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b086      	sub	sp, #24
 8001252:	af00      	add	r7, sp, #0
 8001254:	4603      	mov	r3, r0
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
 800125a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800125c:	f7ff ff40 	bl	80010e0 <__NVIC_GetPriorityGrouping>
 8001260:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	68b9      	ldr	r1, [r7, #8]
 8001266:	6978      	ldr	r0, [r7, #20]
 8001268:	f7ff ff90 	bl	800118c <NVIC_EncodePriority>
 800126c:	4602      	mov	r2, r0
 800126e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001272:	4611      	mov	r1, r2
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ff5f 	bl	8001138 <__NVIC_SetPriority>
}
 800127a:	bf00      	nop
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800128c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff33 	bl	80010fc <__NVIC_EnableIRQ>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff ffa4 	bl	80011f4 <SysTick_Config>
 80012ac:	4603      	mov	r3, r0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b087      	sub	sp, #28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012c6:	e15a      	b.n	800157e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	2101      	movs	r1, #1
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	fa01 f303 	lsl.w	r3, r1, r3
 80012d4:	4013      	ands	r3, r2
 80012d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f000 814c 	beq.w	8001578 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d00b      	beq.n	8001300 <HAL_GPIO_Init+0x48>
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d007      	beq.n	8001300 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012f4:	2b11      	cmp	r3, #17
 80012f6:	d003      	beq.n	8001300 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	2b12      	cmp	r3, #18
 80012fe:	d130      	bne.n	8001362 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	2203      	movs	r2, #3
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	68da      	ldr	r2, [r3, #12]
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	4313      	orrs	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001336:	2201      	movs	r2, #1
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4013      	ands	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	091b      	lsrs	r3, r3, #4
 800134c:	f003 0201 	and.w	r2, r3, #1
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	4313      	orrs	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	2203      	movs	r2, #3
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43db      	mvns	r3, r3
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	4013      	ands	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4313      	orrs	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2b02      	cmp	r3, #2
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_Init+0xea>
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b12      	cmp	r3, #18
 80013a0:	d123      	bne.n	80013ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	08da      	lsrs	r2, r3, #3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	3208      	adds	r2, #8
 80013aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	220f      	movs	r2, #15
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43db      	mvns	r3, r3
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	4013      	ands	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	691a      	ldr	r2, [r3, #16]
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	f003 0307 	and.w	r3, r3, #7
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4313      	orrs	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	08da      	lsrs	r2, r3, #3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3208      	adds	r2, #8
 80013e4:	6939      	ldr	r1, [r7, #16]
 80013e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	2203      	movs	r2, #3
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4013      	ands	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f003 0203 	and.w	r2, r3, #3
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001426:	2b00      	cmp	r3, #0
 8001428:	f000 80a6 	beq.w	8001578 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142c:	4b5b      	ldr	r3, [pc, #364]	; (800159c <HAL_GPIO_Init+0x2e4>)
 800142e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001430:	4a5a      	ldr	r2, [pc, #360]	; (800159c <HAL_GPIO_Init+0x2e4>)
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	6613      	str	r3, [r2, #96]	; 0x60
 8001438:	4b58      	ldr	r3, [pc, #352]	; (800159c <HAL_GPIO_Init+0x2e4>)
 800143a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800143c:	f003 0301 	and.w	r3, r3, #1
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001444:	4a56      	ldr	r2, [pc, #344]	; (80015a0 <HAL_GPIO_Init+0x2e8>)
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	089b      	lsrs	r3, r3, #2
 800144a:	3302      	adds	r3, #2
 800144c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001450:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	f003 0303 	and.w	r3, r3, #3
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	220f      	movs	r2, #15
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	4013      	ands	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800146e:	d01f      	beq.n	80014b0 <HAL_GPIO_Init+0x1f8>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a4c      	ldr	r2, [pc, #304]	; (80015a4 <HAL_GPIO_Init+0x2ec>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d019      	beq.n	80014ac <HAL_GPIO_Init+0x1f4>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a4b      	ldr	r2, [pc, #300]	; (80015a8 <HAL_GPIO_Init+0x2f0>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d013      	beq.n	80014a8 <HAL_GPIO_Init+0x1f0>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4a4a      	ldr	r2, [pc, #296]	; (80015ac <HAL_GPIO_Init+0x2f4>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d00d      	beq.n	80014a4 <HAL_GPIO_Init+0x1ec>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4a49      	ldr	r2, [pc, #292]	; (80015b0 <HAL_GPIO_Init+0x2f8>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d007      	beq.n	80014a0 <HAL_GPIO_Init+0x1e8>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a48      	ldr	r2, [pc, #288]	; (80015b4 <HAL_GPIO_Init+0x2fc>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d101      	bne.n	800149c <HAL_GPIO_Init+0x1e4>
 8001498:	2305      	movs	r3, #5
 800149a:	e00a      	b.n	80014b2 <HAL_GPIO_Init+0x1fa>
 800149c:	2306      	movs	r3, #6
 800149e:	e008      	b.n	80014b2 <HAL_GPIO_Init+0x1fa>
 80014a0:	2304      	movs	r3, #4
 80014a2:	e006      	b.n	80014b2 <HAL_GPIO_Init+0x1fa>
 80014a4:	2303      	movs	r3, #3
 80014a6:	e004      	b.n	80014b2 <HAL_GPIO_Init+0x1fa>
 80014a8:	2302      	movs	r3, #2
 80014aa:	e002      	b.n	80014b2 <HAL_GPIO_Init+0x1fa>
 80014ac:	2301      	movs	r3, #1
 80014ae:	e000      	b.n	80014b2 <HAL_GPIO_Init+0x1fa>
 80014b0:	2300      	movs	r3, #0
 80014b2:	697a      	ldr	r2, [r7, #20]
 80014b4:	f002 0203 	and.w	r2, r2, #3
 80014b8:	0092      	lsls	r2, r2, #2
 80014ba:	4093      	lsls	r3, r2
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4313      	orrs	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014c2:	4937      	ldr	r1, [pc, #220]	; (80015a0 <HAL_GPIO_Init+0x2e8>)
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	089b      	lsrs	r3, r3, #2
 80014c8:	3302      	adds	r3, #2
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80014d0:	4b39      	ldr	r3, [pc, #228]	; (80015b8 <HAL_GPIO_Init+0x300>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	43db      	mvns	r3, r3
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4013      	ands	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014f4:	4a30      	ldr	r2, [pc, #192]	; (80015b8 <HAL_GPIO_Init+0x300>)
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80014fa:	4b2f      	ldr	r3, [pc, #188]	; (80015b8 <HAL_GPIO_Init+0x300>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	43db      	mvns	r3, r3
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	4013      	ands	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d003      	beq.n	800151e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4313      	orrs	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800151e:	4a26      	ldr	r2, [pc, #152]	; (80015b8 <HAL_GPIO_Init+0x300>)
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001524:	4b24      	ldr	r3, [pc, #144]	; (80015b8 <HAL_GPIO_Init+0x300>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	43db      	mvns	r3, r3
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	4013      	ands	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d003      	beq.n	8001548 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	4313      	orrs	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001548:	4a1b      	ldr	r2, [pc, #108]	; (80015b8 <HAL_GPIO_Init+0x300>)
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800154e:	4b1a      	ldr	r3, [pc, #104]	; (80015b8 <HAL_GPIO_Init+0x300>)
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	43db      	mvns	r3, r3
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4313      	orrs	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001572:	4a11      	ldr	r2, [pc, #68]	; (80015b8 <HAL_GPIO_Init+0x300>)
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	3301      	adds	r3, #1
 800157c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	fa22 f303 	lsr.w	r3, r2, r3
 8001588:	2b00      	cmp	r3, #0
 800158a:	f47f ae9d 	bne.w	80012c8 <HAL_GPIO_Init+0x10>
  }
}
 800158e:	bf00      	nop
 8001590:	371c      	adds	r7, #28
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	40021000 	.word	0x40021000
 80015a0:	40010000 	.word	0x40010000
 80015a4:	48000400 	.word	0x48000400
 80015a8:	48000800 	.word	0x48000800
 80015ac:	48000c00 	.word	0x48000c00
 80015b0:	48001000 	.word	0x48001000
 80015b4:	48001400 	.word	0x48001400
 80015b8:	40010400 	.word	0x40010400

080015bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691a      	ldr	r2, [r3, #16]
 80015cc:	887b      	ldrh	r3, [r7, #2]
 80015ce:	4013      	ands	r3, r2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d002      	beq.n	80015da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015d4:	2301      	movs	r3, #1
 80015d6:	73fb      	strb	r3, [r7, #15]
 80015d8:	e001      	b.n	80015de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015da:	2300      	movs	r3, #0
 80015dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015de:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	807b      	strh	r3, [r7, #2]
 80015f8:	4613      	mov	r3, r2
 80015fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015fc:	787b      	ldrb	r3, [r7, #1]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001602:	887a      	ldrh	r2, [r7, #2]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001608:	e002      	b.n	8001610 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800160a:	887a      	ldrh	r2, [r7, #2]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001626:	4b08      	ldr	r3, [pc, #32]	; (8001648 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001628:	695a      	ldr	r2, [r3, #20]
 800162a:	88fb      	ldrh	r3, [r7, #6]
 800162c:	4013      	ands	r3, r2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d006      	beq.n	8001640 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001632:	4a05      	ldr	r2, [pc, #20]	; (8001648 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001634:	88fb      	ldrh	r3, [r7, #6]
 8001636:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001638:	88fb      	ldrh	r3, [r7, #6]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fb98 	bl	8000d70 <HAL_GPIO_EXTI_Callback>
  }
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40010400 	.word	0x40010400

0800164c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d141      	bne.n	80016de <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800165a:	4b4b      	ldr	r3, [pc, #300]	; (8001788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001666:	d131      	bne.n	80016cc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001668:	4b47      	ldr	r3, [pc, #284]	; (8001788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800166a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800166e:	4a46      	ldr	r2, [pc, #280]	; (8001788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001674:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001678:	4b43      	ldr	r3, [pc, #268]	; (8001788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001680:	4a41      	ldr	r2, [pc, #260]	; (8001788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001682:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001686:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001688:	4b40      	ldr	r3, [pc, #256]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2232      	movs	r2, #50	; 0x32
 800168e:	fb02 f303 	mul.w	r3, r2, r3
 8001692:	4a3f      	ldr	r2, [pc, #252]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001694:	fba2 2303 	umull	r2, r3, r2, r3
 8001698:	0c9b      	lsrs	r3, r3, #18
 800169a:	3301      	adds	r3, #1
 800169c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800169e:	e002      	b.n	80016a6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016a6:	4b38      	ldr	r3, [pc, #224]	; (8001788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016b2:	d102      	bne.n	80016ba <HAL_PWREx_ControlVoltageScaling+0x6e>
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1f2      	bne.n	80016a0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016ba:	4b33      	ldr	r3, [pc, #204]	; (8001788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016c6:	d158      	bne.n	800177a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e057      	b.n	800177c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016cc:	4b2e      	ldr	r3, [pc, #184]	; (8001788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016d2:	4a2d      	ldr	r2, [pc, #180]	; (8001788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80016dc:	e04d      	b.n	800177a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016e4:	d141      	bne.n	800176a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016e6:	4b28      	ldr	r3, [pc, #160]	; (8001788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016f2:	d131      	bne.n	8001758 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016f4:	4b24      	ldr	r3, [pc, #144]	; (8001788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016fa:	4a23      	ldr	r2, [pc, #140]	; (8001788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001700:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001704:	4b20      	ldr	r3, [pc, #128]	; (8001788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800170c:	4a1e      	ldr	r2, [pc, #120]	; (8001788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800170e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001712:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001714:	4b1d      	ldr	r3, [pc, #116]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2232      	movs	r2, #50	; 0x32
 800171a:	fb02 f303 	mul.w	r3, r2, r3
 800171e:	4a1c      	ldr	r2, [pc, #112]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001720:	fba2 2303 	umull	r2, r3, r2, r3
 8001724:	0c9b      	lsrs	r3, r3, #18
 8001726:	3301      	adds	r3, #1
 8001728:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800172a:	e002      	b.n	8001732 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	3b01      	subs	r3, #1
 8001730:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001732:	4b15      	ldr	r3, [pc, #84]	; (8001788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800173a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800173e:	d102      	bne.n	8001746 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f2      	bne.n	800172c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001746:	4b10      	ldr	r3, [pc, #64]	; (8001788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800174e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001752:	d112      	bne.n	800177a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e011      	b.n	800177c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001758:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800175a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800175e:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001764:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001768:	e007      	b.n	800177a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800176a:	4b07      	ldr	r3, [pc, #28]	; (8001788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001772:	4a05      	ldr	r2, [pc, #20]	; (8001788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001774:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001778:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	40007000 	.word	0x40007000
 800178c:	2000001c 	.word	0x2000001c
 8001790:	431bde83 	.word	0x431bde83

08001794 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001798:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800179e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a2:	6093      	str	r3, [r2, #8]
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40007000 	.word	0x40007000

080017b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b088      	sub	sp, #32
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e308      	b.n	8001dd8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d075      	beq.n	80018be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017d2:	4ba3      	ldr	r3, [pc, #652]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 030c 	and.w	r3, r3, #12
 80017da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017dc:	4ba0      	ldr	r3, [pc, #640]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	f003 0303 	and.w	r3, r3, #3
 80017e4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	2b0c      	cmp	r3, #12
 80017ea:	d102      	bne.n	80017f2 <HAL_RCC_OscConfig+0x3e>
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	d002      	beq.n	80017f8 <HAL_RCC_OscConfig+0x44>
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	2b08      	cmp	r3, #8
 80017f6:	d10b      	bne.n	8001810 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f8:	4b99      	ldr	r3, [pc, #612]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d05b      	beq.n	80018bc <HAL_RCC_OscConfig+0x108>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d157      	bne.n	80018bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e2e3      	b.n	8001dd8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001818:	d106      	bne.n	8001828 <HAL_RCC_OscConfig+0x74>
 800181a:	4b91      	ldr	r3, [pc, #580]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a90      	ldr	r2, [pc, #576]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 8001820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	e01d      	b.n	8001864 <HAL_RCC_OscConfig+0xb0>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001830:	d10c      	bne.n	800184c <HAL_RCC_OscConfig+0x98>
 8001832:	4b8b      	ldr	r3, [pc, #556]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a8a      	ldr	r2, [pc, #552]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 8001838:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	4b88      	ldr	r3, [pc, #544]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a87      	ldr	r2, [pc, #540]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 8001844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	e00b      	b.n	8001864 <HAL_RCC_OscConfig+0xb0>
 800184c:	4b84      	ldr	r3, [pc, #528]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a83      	ldr	r2, [pc, #524]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 8001852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	4b81      	ldr	r3, [pc, #516]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a80      	ldr	r2, [pc, #512]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 800185e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001862:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d013      	beq.n	8001894 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186c:	f7ff fc08 	bl	8001080 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001874:	f7ff fc04 	bl	8001080 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b64      	cmp	r3, #100	; 0x64
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e2a8      	b.n	8001dd8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001886:	4b76      	ldr	r3, [pc, #472]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0f0      	beq.n	8001874 <HAL_RCC_OscConfig+0xc0>
 8001892:	e014      	b.n	80018be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001894:	f7ff fbf4 	bl	8001080 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800189c:	f7ff fbf0 	bl	8001080 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b64      	cmp	r3, #100	; 0x64
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e294      	b.n	8001dd8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018ae:	4b6c      	ldr	r3, [pc, #432]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0xe8>
 80018ba:	e000      	b.n	80018be <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d075      	beq.n	80019b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ca:	4b65      	ldr	r3, [pc, #404]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 030c 	and.w	r3, r3, #12
 80018d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018d4:	4b62      	ldr	r3, [pc, #392]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	f003 0303 	and.w	r3, r3, #3
 80018dc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	2b0c      	cmp	r3, #12
 80018e2:	d102      	bne.n	80018ea <HAL_RCC_OscConfig+0x136>
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d002      	beq.n	80018f0 <HAL_RCC_OscConfig+0x13c>
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	2b04      	cmp	r3, #4
 80018ee:	d11f      	bne.n	8001930 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018f0:	4b5b      	ldr	r3, [pc, #364]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d005      	beq.n	8001908 <HAL_RCC_OscConfig+0x154>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d101      	bne.n	8001908 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e267      	b.n	8001dd8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001908:	4b55      	ldr	r3, [pc, #340]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	061b      	lsls	r3, r3, #24
 8001916:	4952      	ldr	r1, [pc, #328]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 8001918:	4313      	orrs	r3, r2
 800191a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800191c:	4b51      	ldr	r3, [pc, #324]	; (8001a64 <HAL_RCC_OscConfig+0x2b0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fb61 	bl	8000fe8 <HAL_InitTick>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d043      	beq.n	80019b4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e253      	b.n	8001dd8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d023      	beq.n	8001980 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001938:	4b49      	ldr	r3, [pc, #292]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a48      	ldr	r2, [pc, #288]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 800193e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001944:	f7ff fb9c 	bl	8001080 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800194c:	f7ff fb98 	bl	8001080 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e23c      	b.n	8001dd8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800195e:	4b40      	ldr	r3, [pc, #256]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0f0      	beq.n	800194c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196a:	4b3d      	ldr	r3, [pc, #244]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	061b      	lsls	r3, r3, #24
 8001978:	4939      	ldr	r1, [pc, #228]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 800197a:	4313      	orrs	r3, r2
 800197c:	604b      	str	r3, [r1, #4]
 800197e:	e01a      	b.n	80019b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001980:	4b37      	ldr	r3, [pc, #220]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a36      	ldr	r2, [pc, #216]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 8001986:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800198a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198c:	f7ff fb78 	bl	8001080 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001994:	f7ff fb74 	bl	8001080 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e218      	b.n	8001dd8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019a6:	4b2e      	ldr	r3, [pc, #184]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f0      	bne.n	8001994 <HAL_RCC_OscConfig+0x1e0>
 80019b2:	e000      	b.n	80019b6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d03c      	beq.n	8001a3c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d01c      	beq.n	8001a04 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ca:	4b25      	ldr	r3, [pc, #148]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 80019cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019d0:	4a23      	ldr	r2, [pc, #140]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019da:	f7ff fb51 	bl	8001080 <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e2:	f7ff fb4d 	bl	8001080 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e1f1      	b.n	8001dd8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019f4:	4b1a      	ldr	r3, [pc, #104]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 80019f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0ef      	beq.n	80019e2 <HAL_RCC_OscConfig+0x22e>
 8001a02:	e01b      	b.n	8001a3c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a04:	4b16      	ldr	r3, [pc, #88]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 8001a06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a0a:	4a15      	ldr	r2, [pc, #84]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 8001a0c:	f023 0301 	bic.w	r3, r3, #1
 8001a10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a14:	f7ff fb34 	bl	8001080 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a1c:	f7ff fb30 	bl	8001080 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e1d4      	b.n	8001dd8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 8001a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1ef      	bne.n	8001a1c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f000 80ab 	beq.w	8001ba0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a4e:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <HAL_RCC_OscConfig+0x2ac>)
 8001a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d106      	bne.n	8001a68 <HAL_RCC_OscConfig+0x2b4>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e005      	b.n	8001a6a <HAL_RCC_OscConfig+0x2b6>
 8001a5e:	bf00      	nop
 8001a60:	40021000 	.word	0x40021000
 8001a64:	20000020 	.word	0x20000020
 8001a68:	2300      	movs	r3, #0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d00d      	beq.n	8001a8a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a6e:	4baf      	ldr	r3, [pc, #700]	; (8001d2c <HAL_RCC_OscConfig+0x578>)
 8001a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a72:	4aae      	ldr	r2, [pc, #696]	; (8001d2c <HAL_RCC_OscConfig+0x578>)
 8001a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a78:	6593      	str	r3, [r2, #88]	; 0x58
 8001a7a:	4bac      	ldr	r3, [pc, #688]	; (8001d2c <HAL_RCC_OscConfig+0x578>)
 8001a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a86:	2301      	movs	r3, #1
 8001a88:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a8a:	4ba9      	ldr	r3, [pc, #676]	; (8001d30 <HAL_RCC_OscConfig+0x57c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d118      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a96:	4ba6      	ldr	r3, [pc, #664]	; (8001d30 <HAL_RCC_OscConfig+0x57c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4aa5      	ldr	r2, [pc, #660]	; (8001d30 <HAL_RCC_OscConfig+0x57c>)
 8001a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aa2:	f7ff faed 	bl	8001080 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aaa:	f7ff fae9 	bl	8001080 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e18d      	b.n	8001dd8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001abc:	4b9c      	ldr	r3, [pc, #624]	; (8001d30 <HAL_RCC_OscConfig+0x57c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0f0      	beq.n	8001aaa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d108      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x32e>
 8001ad0:	4b96      	ldr	r3, [pc, #600]	; (8001d2c <HAL_RCC_OscConfig+0x578>)
 8001ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad6:	4a95      	ldr	r2, [pc, #596]	; (8001d2c <HAL_RCC_OscConfig+0x578>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ae0:	e024      	b.n	8001b2c <HAL_RCC_OscConfig+0x378>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	2b05      	cmp	r3, #5
 8001ae8:	d110      	bne.n	8001b0c <HAL_RCC_OscConfig+0x358>
 8001aea:	4b90      	ldr	r3, [pc, #576]	; (8001d2c <HAL_RCC_OscConfig+0x578>)
 8001aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af0:	4a8e      	ldr	r2, [pc, #568]	; (8001d2c <HAL_RCC_OscConfig+0x578>)
 8001af2:	f043 0304 	orr.w	r3, r3, #4
 8001af6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001afa:	4b8c      	ldr	r3, [pc, #560]	; (8001d2c <HAL_RCC_OscConfig+0x578>)
 8001afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b00:	4a8a      	ldr	r2, [pc, #552]	; (8001d2c <HAL_RCC_OscConfig+0x578>)
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b0a:	e00f      	b.n	8001b2c <HAL_RCC_OscConfig+0x378>
 8001b0c:	4b87      	ldr	r3, [pc, #540]	; (8001d2c <HAL_RCC_OscConfig+0x578>)
 8001b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b12:	4a86      	ldr	r2, [pc, #536]	; (8001d2c <HAL_RCC_OscConfig+0x578>)
 8001b14:	f023 0301 	bic.w	r3, r3, #1
 8001b18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b1c:	4b83      	ldr	r3, [pc, #524]	; (8001d2c <HAL_RCC_OscConfig+0x578>)
 8001b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b22:	4a82      	ldr	r2, [pc, #520]	; (8001d2c <HAL_RCC_OscConfig+0x578>)
 8001b24:	f023 0304 	bic.w	r3, r3, #4
 8001b28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d016      	beq.n	8001b62 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b34:	f7ff faa4 	bl	8001080 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b3a:	e00a      	b.n	8001b52 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b3c:	f7ff faa0 	bl	8001080 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e142      	b.n	8001dd8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b52:	4b76      	ldr	r3, [pc, #472]	; (8001d2c <HAL_RCC_OscConfig+0x578>)
 8001b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0ed      	beq.n	8001b3c <HAL_RCC_OscConfig+0x388>
 8001b60:	e015      	b.n	8001b8e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b62:	f7ff fa8d 	bl	8001080 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b68:	e00a      	b.n	8001b80 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b6a:	f7ff fa89 	bl	8001080 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e12b      	b.n	8001dd8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b80:	4b6a      	ldr	r3, [pc, #424]	; (8001d2c <HAL_RCC_OscConfig+0x578>)
 8001b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1ed      	bne.n	8001b6a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b8e:	7ffb      	ldrb	r3, [r7, #31]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d105      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b94:	4b65      	ldr	r3, [pc, #404]	; (8001d2c <HAL_RCC_OscConfig+0x578>)
 8001b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b98:	4a64      	ldr	r2, [pc, #400]	; (8001d2c <HAL_RCC_OscConfig+0x578>)
 8001b9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0320 	and.w	r3, r3, #32
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d03c      	beq.n	8001c26 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d01c      	beq.n	8001bee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bb4:	4b5d      	ldr	r3, [pc, #372]	; (8001d2c <HAL_RCC_OscConfig+0x578>)
 8001bb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bba:	4a5c      	ldr	r2, [pc, #368]	; (8001d2c <HAL_RCC_OscConfig+0x578>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc4:	f7ff fa5c 	bl	8001080 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bcc:	f7ff fa58 	bl	8001080 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e0fc      	b.n	8001dd8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bde:	4b53      	ldr	r3, [pc, #332]	; (8001d2c <HAL_RCC_OscConfig+0x578>)
 8001be0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0ef      	beq.n	8001bcc <HAL_RCC_OscConfig+0x418>
 8001bec:	e01b      	b.n	8001c26 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bee:	4b4f      	ldr	r3, [pc, #316]	; (8001d2c <HAL_RCC_OscConfig+0x578>)
 8001bf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bf4:	4a4d      	ldr	r2, [pc, #308]	; (8001d2c <HAL_RCC_OscConfig+0x578>)
 8001bf6:	f023 0301 	bic.w	r3, r3, #1
 8001bfa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bfe:	f7ff fa3f 	bl	8001080 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c06:	f7ff fa3b 	bl	8001080 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e0df      	b.n	8001dd8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c18:	4b44      	ldr	r3, [pc, #272]	; (8001d2c <HAL_RCC_OscConfig+0x578>)
 8001c1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1ef      	bne.n	8001c06 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 80d3 	beq.w	8001dd6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c30:	4b3e      	ldr	r3, [pc, #248]	; (8001d2c <HAL_RCC_OscConfig+0x578>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 030c 	and.w	r3, r3, #12
 8001c38:	2b0c      	cmp	r3, #12
 8001c3a:	f000 808d 	beq.w	8001d58 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d15a      	bne.n	8001cfc <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c46:	4b39      	ldr	r3, [pc, #228]	; (8001d2c <HAL_RCC_OscConfig+0x578>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a38      	ldr	r2, [pc, #224]	; (8001d2c <HAL_RCC_OscConfig+0x578>)
 8001c4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c52:	f7ff fa15 	bl	8001080 <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5a:	f7ff fa11 	bl	8001080 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e0b5      	b.n	8001dd8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c6c:	4b2f      	ldr	r3, [pc, #188]	; (8001d2c <HAL_RCC_OscConfig+0x578>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1f0      	bne.n	8001c5a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c78:	4b2c      	ldr	r3, [pc, #176]	; (8001d2c <HAL_RCC_OscConfig+0x578>)
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	4b2d      	ldr	r3, [pc, #180]	; (8001d34 <HAL_RCC_OscConfig+0x580>)
 8001c7e:	4013      	ands	r3, r2
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	6a11      	ldr	r1, [r2, #32]
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c88:	3a01      	subs	r2, #1
 8001c8a:	0112      	lsls	r2, r2, #4
 8001c8c:	4311      	orrs	r1, r2
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001c92:	0212      	lsls	r2, r2, #8
 8001c94:	4311      	orrs	r1, r2
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c9a:	0852      	lsrs	r2, r2, #1
 8001c9c:	3a01      	subs	r2, #1
 8001c9e:	0552      	lsls	r2, r2, #21
 8001ca0:	4311      	orrs	r1, r2
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ca6:	0852      	lsrs	r2, r2, #1
 8001ca8:	3a01      	subs	r2, #1
 8001caa:	0652      	lsls	r2, r2, #25
 8001cac:	4311      	orrs	r1, r2
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001cb2:	06d2      	lsls	r2, r2, #27
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	491d      	ldr	r1, [pc, #116]	; (8001d2c <HAL_RCC_OscConfig+0x578>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cbc:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <HAL_RCC_OscConfig+0x578>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a1a      	ldr	r2, [pc, #104]	; (8001d2c <HAL_RCC_OscConfig+0x578>)
 8001cc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cc6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cc8:	4b18      	ldr	r3, [pc, #96]	; (8001d2c <HAL_RCC_OscConfig+0x578>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	4a17      	ldr	r2, [pc, #92]	; (8001d2c <HAL_RCC_OscConfig+0x578>)
 8001cce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cd2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd4:	f7ff f9d4 	bl	8001080 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cdc:	f7ff f9d0 	bl	8001080 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e074      	b.n	8001dd8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cee:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <HAL_RCC_OscConfig+0x578>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0f0      	beq.n	8001cdc <HAL_RCC_OscConfig+0x528>
 8001cfa:	e06c      	b.n	8001dd6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <HAL_RCC_OscConfig+0x578>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <HAL_RCC_OscConfig+0x578>)
 8001d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d06:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001d08:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <HAL_RCC_OscConfig+0x578>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	4a07      	ldr	r2, [pc, #28]	; (8001d2c <HAL_RCC_OscConfig+0x578>)
 8001d0e:	f023 0303 	bic.w	r3, r3, #3
 8001d12:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001d14:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <HAL_RCC_OscConfig+0x578>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	4a04      	ldr	r2, [pc, #16]	; (8001d2c <HAL_RCC_OscConfig+0x578>)
 8001d1a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001d1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d22:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d24:	f7ff f9ac 	bl	8001080 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d2a:	e00e      	b.n	8001d4a <HAL_RCC_OscConfig+0x596>
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	40007000 	.word	0x40007000
 8001d34:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d38:	f7ff f9a2 	bl	8001080 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e046      	b.n	8001dd8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d4a:	4b25      	ldr	r3, [pc, #148]	; (8001de0 <HAL_RCC_OscConfig+0x62c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0x584>
 8001d56:	e03e      	b.n	8001dd6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	69db      	ldr	r3, [r3, #28]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d101      	bne.n	8001d64 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e039      	b.n	8001dd8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001d64:	4b1e      	ldr	r3, [pc, #120]	; (8001de0 <HAL_RCC_OscConfig+0x62c>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	f003 0203 	and.w	r2, r3, #3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d12c      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	3b01      	subs	r3, #1
 8001d84:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d123      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d94:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d11b      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d113      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db4:	085b      	lsrs	r3, r3, #1
 8001db6:	3b01      	subs	r3, #1
 8001db8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d109      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc8:	085b      	lsrs	r3, r3, #1
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d001      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3720      	adds	r7, #32
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40021000 	.word	0x40021000

08001de4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e11e      	b.n	800203a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dfc:	4b91      	ldr	r3, [pc, #580]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 030f 	and.w	r3, r3, #15
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d910      	bls.n	8001e2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0a:	4b8e      	ldr	r3, [pc, #568]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f023 020f 	bic.w	r2, r3, #15
 8001e12:	498c      	ldr	r1, [pc, #560]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1a:	4b8a      	ldr	r3, [pc, #552]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d001      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e106      	b.n	800203a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d073      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	d129      	bne.n	8001e94 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e40:	4b81      	ldr	r3, [pc, #516]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e0f4      	b.n	800203a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001e50:	f000 f99e 	bl	8002190 <RCC_GetSysClockFreqFromPLLSource>
 8001e54:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	4a7c      	ldr	r2, [pc, #496]	; (800204c <HAL_RCC_ClockConfig+0x268>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d93f      	bls.n	8001ede <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e5e:	4b7a      	ldr	r3, [pc, #488]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d009      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d033      	beq.n	8001ede <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d12f      	bne.n	8001ede <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e7e:	4b72      	ldr	r3, [pc, #456]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e86:	4a70      	ldr	r2, [pc, #448]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e8c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e8e:	2380      	movs	r3, #128	; 0x80
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	e024      	b.n	8001ede <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d107      	bne.n	8001eac <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e9c:	4b6a      	ldr	r3, [pc, #424]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d109      	bne.n	8001ebc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e0c6      	b.n	800203a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eac:	4b66      	ldr	r3, [pc, #408]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0be      	b.n	800203a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001ebc:	f000 f8ce 	bl	800205c <HAL_RCC_GetSysClockFreq>
 8001ec0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	4a61      	ldr	r2, [pc, #388]	; (800204c <HAL_RCC_ClockConfig+0x268>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d909      	bls.n	8001ede <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001eca:	4b5f      	ldr	r3, [pc, #380]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ed2:	4a5d      	ldr	r2, [pc, #372]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ed8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001eda:	2380      	movs	r3, #128	; 0x80
 8001edc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ede:	4b5a      	ldr	r3, [pc, #360]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f023 0203 	bic.w	r2, r3, #3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	4957      	ldr	r1, [pc, #348]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ef0:	f7ff f8c6 	bl	8001080 <HAL_GetTick>
 8001ef4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef6:	e00a      	b.n	8001f0e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef8:	f7ff f8c2 	bl	8001080 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e095      	b.n	800203a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f0e:	4b4e      	ldr	r3, [pc, #312]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 020c 	and.w	r2, r3, #12
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d1eb      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d023      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d005      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f38:	4b43      	ldr	r3, [pc, #268]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	4a42      	ldr	r2, [pc, #264]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001f3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f42:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d007      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001f50:	4b3d      	ldr	r3, [pc, #244]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001f58:	4a3b      	ldr	r2, [pc, #236]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001f5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f5e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f60:	4b39      	ldr	r3, [pc, #228]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	4936      	ldr	r1, [pc, #216]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	608b      	str	r3, [r1, #8]
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	2b80      	cmp	r3, #128	; 0x80
 8001f78:	d105      	bne.n	8001f86 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001f7a:	4b33      	ldr	r3, [pc, #204]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	4a32      	ldr	r2, [pc, #200]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001f80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f84:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f86:	4b2f      	ldr	r3, [pc, #188]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d21d      	bcs.n	8001fd0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f94:	4b2b      	ldr	r3, [pc, #172]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f023 020f 	bic.w	r2, r3, #15
 8001f9c:	4929      	ldr	r1, [pc, #164]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fa4:	f7ff f86c 	bl	8001080 <HAL_GetTick>
 8001fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001faa:	e00a      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fac:	f7ff f868 	bl	8001080 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e03b      	b.n	800203a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc2:	4b20      	ldr	r3, [pc, #128]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d1ed      	bne.n	8001fac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d008      	beq.n	8001fee <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fdc:	4b1a      	ldr	r3, [pc, #104]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	4917      	ldr	r1, [pc, #92]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d009      	beq.n	800200e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ffa:	4b13      	ldr	r3, [pc, #76]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	490f      	ldr	r1, [pc, #60]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 800200a:	4313      	orrs	r3, r2
 800200c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800200e:	f000 f825 	bl	800205c <HAL_RCC_GetSysClockFreq>
 8002012:	4601      	mov	r1, r0
 8002014:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	091b      	lsrs	r3, r3, #4
 800201a:	f003 030f 	and.w	r3, r3, #15
 800201e:	4a0c      	ldr	r2, [pc, #48]	; (8002050 <HAL_RCC_ClockConfig+0x26c>)
 8002020:	5cd3      	ldrb	r3, [r2, r3]
 8002022:	f003 031f 	and.w	r3, r3, #31
 8002026:	fa21 f303 	lsr.w	r3, r1, r3
 800202a:	4a0a      	ldr	r2, [pc, #40]	; (8002054 <HAL_RCC_ClockConfig+0x270>)
 800202c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800202e:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <HAL_RCC_ClockConfig+0x274>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe ffd8 	bl	8000fe8 <HAL_InitTick>
 8002038:	4603      	mov	r3, r0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40022000 	.word	0x40022000
 8002048:	40021000 	.word	0x40021000
 800204c:	04c4b400 	.word	0x04c4b400
 8002050:	08006084 	.word	0x08006084
 8002054:	2000001c 	.word	0x2000001c
 8002058:	20000020 	.word	0x20000020

0800205c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800205c:	b480      	push	{r7}
 800205e:	b087      	sub	sp, #28
 8002060:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002062:	4b2c      	ldr	r3, [pc, #176]	; (8002114 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 030c 	and.w	r3, r3, #12
 800206a:	2b04      	cmp	r3, #4
 800206c:	d102      	bne.n	8002074 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800206e:	4b2a      	ldr	r3, [pc, #168]	; (8002118 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002070:	613b      	str	r3, [r7, #16]
 8002072:	e047      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002074:	4b27      	ldr	r3, [pc, #156]	; (8002114 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 030c 	and.w	r3, r3, #12
 800207c:	2b08      	cmp	r3, #8
 800207e:	d102      	bne.n	8002086 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002080:	4b26      	ldr	r3, [pc, #152]	; (800211c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	e03e      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002086:	4b23      	ldr	r3, [pc, #140]	; (8002114 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 030c 	and.w	r3, r3, #12
 800208e:	2b0c      	cmp	r3, #12
 8002090:	d136      	bne.n	8002100 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002092:	4b20      	ldr	r3, [pc, #128]	; (8002114 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800209c:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <HAL_RCC_GetSysClockFreq+0xb8>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	091b      	lsrs	r3, r3, #4
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	3301      	adds	r3, #1
 80020a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2b03      	cmp	r3, #3
 80020ae:	d10c      	bne.n	80020ca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020b0:	4a1a      	ldr	r2, [pc, #104]	; (800211c <HAL_RCC_GetSysClockFreq+0xc0>)
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b8:	4a16      	ldr	r2, [pc, #88]	; (8002114 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020ba:	68d2      	ldr	r2, [r2, #12]
 80020bc:	0a12      	lsrs	r2, r2, #8
 80020be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020c2:	fb02 f303 	mul.w	r3, r2, r3
 80020c6:	617b      	str	r3, [r7, #20]
      break;
 80020c8:	e00c      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020ca:	4a13      	ldr	r2, [pc, #76]	; (8002118 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d2:	4a10      	ldr	r2, [pc, #64]	; (8002114 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020d4:	68d2      	ldr	r2, [r2, #12]
 80020d6:	0a12      	lsrs	r2, r2, #8
 80020d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020dc:	fb02 f303 	mul.w	r3, r2, r3
 80020e0:	617b      	str	r3, [r7, #20]
      break;
 80020e2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	0e5b      	lsrs	r3, r3, #25
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	3301      	adds	r3, #1
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fc:	613b      	str	r3, [r7, #16]
 80020fe:	e001      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002104:	693b      	ldr	r3, [r7, #16]
}
 8002106:	4618      	mov	r0, r3
 8002108:	371c      	adds	r7, #28
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40021000 	.word	0x40021000
 8002118:	00f42400 	.word	0x00f42400
 800211c:	007a1200 	.word	0x007a1200

08002120 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002124:	4b03      	ldr	r3, [pc, #12]	; (8002134 <HAL_RCC_GetHCLKFreq+0x14>)
 8002126:	681b      	ldr	r3, [r3, #0]
}
 8002128:	4618      	mov	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	2000001c 	.word	0x2000001c

08002138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800213c:	f7ff fff0 	bl	8002120 <HAL_RCC_GetHCLKFreq>
 8002140:	4601      	mov	r1, r0
 8002142:	4b06      	ldr	r3, [pc, #24]	; (800215c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	0a1b      	lsrs	r3, r3, #8
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	4a04      	ldr	r2, [pc, #16]	; (8002160 <HAL_RCC_GetPCLK1Freq+0x28>)
 800214e:	5cd3      	ldrb	r3, [r2, r3]
 8002150:	f003 031f 	and.w	r3, r3, #31
 8002154:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002158:	4618      	mov	r0, r3
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40021000 	.word	0x40021000
 8002160:	08006094 	.word	0x08006094

08002164 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002168:	f7ff ffda 	bl	8002120 <HAL_RCC_GetHCLKFreq>
 800216c:	4601      	mov	r1, r0
 800216e:	4b06      	ldr	r3, [pc, #24]	; (8002188 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	0adb      	lsrs	r3, r3, #11
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	4a04      	ldr	r2, [pc, #16]	; (800218c <HAL_RCC_GetPCLK2Freq+0x28>)
 800217a:	5cd3      	ldrb	r3, [r2, r3]
 800217c:	f003 031f 	and.w	r3, r3, #31
 8002180:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002184:	4618      	mov	r0, r3
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40021000 	.word	0x40021000
 800218c:	08006094 	.word	0x08006094

08002190 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002190:	b480      	push	{r7}
 8002192:	b087      	sub	sp, #28
 8002194:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002196:	4b1e      	ldr	r3, [pc, #120]	; (8002210 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021a0:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	091b      	lsrs	r3, r3, #4
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	3301      	adds	r3, #1
 80021ac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	2b03      	cmp	r3, #3
 80021b2:	d10c      	bne.n	80021ce <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021b4:	4a17      	ldr	r2, [pc, #92]	; (8002214 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021bc:	4a14      	ldr	r2, [pc, #80]	; (8002210 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021be:	68d2      	ldr	r2, [r2, #12]
 80021c0:	0a12      	lsrs	r2, r2, #8
 80021c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021c6:	fb02 f303 	mul.w	r3, r2, r3
 80021ca:	617b      	str	r3, [r7, #20]
    break;
 80021cc:	e00c      	b.n	80021e8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021ce:	4a12      	ldr	r2, [pc, #72]	; (8002218 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d6:	4a0e      	ldr	r2, [pc, #56]	; (8002210 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021d8:	68d2      	ldr	r2, [r2, #12]
 80021da:	0a12      	lsrs	r2, r2, #8
 80021dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021e0:	fb02 f303 	mul.w	r3, r2, r3
 80021e4:	617b      	str	r3, [r7, #20]
    break;
 80021e6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021e8:	4b09      	ldr	r3, [pc, #36]	; (8002210 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	0e5b      	lsrs	r3, r3, #25
 80021ee:	f003 0303 	and.w	r3, r3, #3
 80021f2:	3301      	adds	r3, #1
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002200:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002202:	687b      	ldr	r3, [r7, #4]
}
 8002204:	4618      	mov	r0, r3
 8002206:	371c      	adds	r7, #28
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	40021000 	.word	0x40021000
 8002214:	007a1200 	.word	0x007a1200
 8002218:	00f42400 	.word	0x00f42400

0800221c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002224:	2300      	movs	r3, #0
 8002226:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002228:	2300      	movs	r3, #0
 800222a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 8098 	beq.w	800236a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800223a:	2300      	movs	r3, #0
 800223c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800223e:	4b43      	ldr	r3, [pc, #268]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10d      	bne.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800224a:	4b40      	ldr	r3, [pc, #256]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800224c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224e:	4a3f      	ldr	r2, [pc, #252]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002254:	6593      	str	r3, [r2, #88]	; 0x58
 8002256:	4b3d      	ldr	r3, [pc, #244]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225e:	60bb      	str	r3, [r7, #8]
 8002260:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002262:	2301      	movs	r3, #1
 8002264:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002266:	4b3a      	ldr	r3, [pc, #232]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a39      	ldr	r2, [pc, #228]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800226c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002270:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002272:	f7fe ff05 	bl	8001080 <HAL_GetTick>
 8002276:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002278:	e009      	b.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800227a:	f7fe ff01 	bl	8001080 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d902      	bls.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	74fb      	strb	r3, [r7, #19]
        break;
 800228c:	e005      	b.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800228e:	4b30      	ldr	r3, [pc, #192]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0ef      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800229a:	7cfb      	ldrb	r3, [r7, #19]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d159      	bne.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022a0:	4b2a      	ldr	r3, [pc, #168]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022aa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d01e      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d019      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022bc:	4b23      	ldr	r3, [pc, #140]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022c8:	4b20      	ldr	r3, [pc, #128]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ce:	4a1f      	ldr	r2, [pc, #124]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022d8:	4b1c      	ldr	r3, [pc, #112]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022de:	4a1b      	ldr	r2, [pc, #108]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022e8:	4a18      	ldr	r2, [pc, #96]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d016      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fa:	f7fe fec1 	bl	8001080 <HAL_GetTick>
 80022fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002300:	e00b      	b.n	800231a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002302:	f7fe febd 	bl	8001080 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002310:	4293      	cmp	r3, r2
 8002312:	d902      	bls.n	800231a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	74fb      	strb	r3, [r7, #19]
            break;
 8002318:	e006      	b.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800231a:	4b0c      	ldr	r3, [pc, #48]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800231c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0ec      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002328:	7cfb      	ldrb	r3, [r7, #19]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10b      	bne.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800232e:	4b07      	ldr	r3, [pc, #28]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002334:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233c:	4903      	ldr	r1, [pc, #12]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800233e:	4313      	orrs	r3, r2
 8002340:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002344:	e008      	b.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002346:	7cfb      	ldrb	r3, [r7, #19]
 8002348:	74bb      	strb	r3, [r7, #18]
 800234a:	e005      	b.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800234c:	40021000 	.word	0x40021000
 8002350:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002354:	7cfb      	ldrb	r3, [r7, #19]
 8002356:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002358:	7c7b      	ldrb	r3, [r7, #17]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d105      	bne.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800235e:	4ba6      	ldr	r3, [pc, #664]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002362:	4aa5      	ldr	r2, [pc, #660]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002368:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00a      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002376:	4ba0      	ldr	r3, [pc, #640]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237c:	f023 0203 	bic.w	r2, r3, #3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	499c      	ldr	r1, [pc, #624]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002386:	4313      	orrs	r3, r2
 8002388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00a      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002398:	4b97      	ldr	r3, [pc, #604]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800239a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239e:	f023 020c 	bic.w	r2, r3, #12
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	4994      	ldr	r1, [pc, #592]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0304 	and.w	r3, r3, #4
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00a      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023ba:	4b8f      	ldr	r3, [pc, #572]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	498b      	ldr	r1, [pc, #556]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00a      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023dc:	4b86      	ldr	r3, [pc, #536]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	4983      	ldr	r1, [pc, #524]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0320 	and.w	r3, r3, #32
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00a      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023fe:	4b7e      	ldr	r3, [pc, #504]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002404:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	497a      	ldr	r1, [pc, #488]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800240e:	4313      	orrs	r3, r2
 8002410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00a      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002420:	4b75      	ldr	r3, [pc, #468]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002426:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	4972      	ldr	r1, [pc, #456]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002430:	4313      	orrs	r3, r2
 8002432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00a      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002442:	4b6d      	ldr	r3, [pc, #436]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002448:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	4969      	ldr	r1, [pc, #420]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002452:	4313      	orrs	r3, r2
 8002454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00a      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002464:	4b64      	ldr	r3, [pc, #400]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	4961      	ldr	r1, [pc, #388]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002474:	4313      	orrs	r3, r2
 8002476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00a      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002486:	4b5c      	ldr	r3, [pc, #368]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002494:	4958      	ldr	r1, [pc, #352]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002496:	4313      	orrs	r3, r2
 8002498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d015      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024a8:	4b53      	ldr	r3, [pc, #332]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b6:	4950      	ldr	r1, [pc, #320]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024c6:	d105      	bne.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024c8:	4b4b      	ldr	r3, [pc, #300]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	4a4a      	ldr	r2, [pc, #296]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024d2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d015      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024e0:	4b45      	ldr	r3, [pc, #276]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ee:	4942      	ldr	r1, [pc, #264]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024fe:	d105      	bne.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002500:	4b3d      	ldr	r3, [pc, #244]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	4a3c      	ldr	r2, [pc, #240]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002506:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800250a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d015      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002518:	4b37      	ldr	r3, [pc, #220]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	4934      	ldr	r1, [pc, #208]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002528:	4313      	orrs	r3, r2
 800252a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002536:	d105      	bne.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002538:	4b2f      	ldr	r3, [pc, #188]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	4a2e      	ldr	r2, [pc, #184]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800253e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002542:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d015      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002550:	4b29      	ldr	r3, [pc, #164]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002556:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800255e:	4926      	ldr	r1, [pc, #152]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002560:	4313      	orrs	r3, r2
 8002562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800256a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800256e:	d105      	bne.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002570:	4b21      	ldr	r3, [pc, #132]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	4a20      	ldr	r2, [pc, #128]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002576:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800257a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d015      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002588:	4b1b      	ldr	r3, [pc, #108]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800258a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002596:	4918      	ldr	r1, [pc, #96]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002598:	4313      	orrs	r3, r2
 800259a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025a6:	d105      	bne.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025a8:	4b13      	ldr	r3, [pc, #76]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	4a12      	ldr	r2, [pc, #72]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025b2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d015      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80025c0:	4b0d      	ldr	r3, [pc, #52]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ce:	490a      	ldr	r1, [pc, #40]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025de:	d105      	bne.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80025e0:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	4a04      	ldr	r2, [pc, #16]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80025ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3718      	adds	r7, #24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40021000 	.word	0x40021000

080025fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e049      	b.n	80026a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d106      	bne.n	8002628 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7fe fbfa 	bl	8000e1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3304      	adds	r3, #4
 8002638:	4619      	mov	r1, r3
 800263a:	4610      	mov	r0, r2
 800263c:	f000 f898 	bl	8002770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d001      	beq.n	80026c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e042      	b.n	800274a <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2202      	movs	r2, #2
 80026c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a21      	ldr	r2, [pc, #132]	; (8002758 <HAL_TIM_Base_Start+0xac>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d018      	beq.n	8002708 <HAL_TIM_Base_Start+0x5c>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026de:	d013      	beq.n	8002708 <HAL_TIM_Base_Start+0x5c>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a1d      	ldr	r2, [pc, #116]	; (800275c <HAL_TIM_Base_Start+0xb0>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d00e      	beq.n	8002708 <HAL_TIM_Base_Start+0x5c>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a1c      	ldr	r2, [pc, #112]	; (8002760 <HAL_TIM_Base_Start+0xb4>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d009      	beq.n	8002708 <HAL_TIM_Base_Start+0x5c>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a1a      	ldr	r2, [pc, #104]	; (8002764 <HAL_TIM_Base_Start+0xb8>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d004      	beq.n	8002708 <HAL_TIM_Base_Start+0x5c>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a19      	ldr	r2, [pc, #100]	; (8002768 <HAL_TIM_Base_Start+0xbc>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d115      	bne.n	8002734 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689a      	ldr	r2, [r3, #8]
 800270e:	4b17      	ldr	r3, [pc, #92]	; (800276c <HAL_TIM_Base_Start+0xc0>)
 8002710:	4013      	ands	r3, r2
 8002712:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2b06      	cmp	r3, #6
 8002718:	d015      	beq.n	8002746 <HAL_TIM_Base_Start+0x9a>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002720:	d011      	beq.n	8002746 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f042 0201 	orr.w	r2, r2, #1
 8002730:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002732:	e008      	b.n	8002746 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0201 	orr.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	e000      	b.n	8002748 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002746:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	40012c00 	.word	0x40012c00
 800275c:	40000400 	.word	0x40000400
 8002760:	40000800 	.word	0x40000800
 8002764:	40013400 	.word	0x40013400
 8002768:	40014000 	.word	0x40014000
 800276c:	00010007 	.word	0x00010007

08002770 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a3c      	ldr	r2, [pc, #240]	; (8002874 <TIM_Base_SetConfig+0x104>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d00f      	beq.n	80027a8 <TIM_Base_SetConfig+0x38>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800278e:	d00b      	beq.n	80027a8 <TIM_Base_SetConfig+0x38>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a39      	ldr	r2, [pc, #228]	; (8002878 <TIM_Base_SetConfig+0x108>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d007      	beq.n	80027a8 <TIM_Base_SetConfig+0x38>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a38      	ldr	r2, [pc, #224]	; (800287c <TIM_Base_SetConfig+0x10c>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d003      	beq.n	80027a8 <TIM_Base_SetConfig+0x38>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a37      	ldr	r2, [pc, #220]	; (8002880 <TIM_Base_SetConfig+0x110>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d108      	bne.n	80027ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a2d      	ldr	r2, [pc, #180]	; (8002874 <TIM_Base_SetConfig+0x104>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d01b      	beq.n	80027fa <TIM_Base_SetConfig+0x8a>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027c8:	d017      	beq.n	80027fa <TIM_Base_SetConfig+0x8a>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a2a      	ldr	r2, [pc, #168]	; (8002878 <TIM_Base_SetConfig+0x108>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d013      	beq.n	80027fa <TIM_Base_SetConfig+0x8a>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a29      	ldr	r2, [pc, #164]	; (800287c <TIM_Base_SetConfig+0x10c>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d00f      	beq.n	80027fa <TIM_Base_SetConfig+0x8a>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a28      	ldr	r2, [pc, #160]	; (8002880 <TIM_Base_SetConfig+0x110>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d00b      	beq.n	80027fa <TIM_Base_SetConfig+0x8a>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a27      	ldr	r2, [pc, #156]	; (8002884 <TIM_Base_SetConfig+0x114>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d007      	beq.n	80027fa <TIM_Base_SetConfig+0x8a>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a26      	ldr	r2, [pc, #152]	; (8002888 <TIM_Base_SetConfig+0x118>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d003      	beq.n	80027fa <TIM_Base_SetConfig+0x8a>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a25      	ldr	r2, [pc, #148]	; (800288c <TIM_Base_SetConfig+0x11c>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d108      	bne.n	800280c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	4313      	orrs	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	4313      	orrs	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a10      	ldr	r2, [pc, #64]	; (8002874 <TIM_Base_SetConfig+0x104>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d00f      	beq.n	8002858 <TIM_Base_SetConfig+0xe8>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a11      	ldr	r2, [pc, #68]	; (8002880 <TIM_Base_SetConfig+0x110>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d00b      	beq.n	8002858 <TIM_Base_SetConfig+0xe8>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a10      	ldr	r2, [pc, #64]	; (8002884 <TIM_Base_SetConfig+0x114>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d007      	beq.n	8002858 <TIM_Base_SetConfig+0xe8>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a0f      	ldr	r2, [pc, #60]	; (8002888 <TIM_Base_SetConfig+0x118>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d003      	beq.n	8002858 <TIM_Base_SetConfig+0xe8>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a0e      	ldr	r2, [pc, #56]	; (800288c <TIM_Base_SetConfig+0x11c>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d103      	bne.n	8002860 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	691a      	ldr	r2, [r3, #16]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	615a      	str	r2, [r3, #20]
}
 8002866:	bf00      	nop
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	40012c00 	.word	0x40012c00
 8002878:	40000400 	.word	0x40000400
 800287c:	40000800 	.word	0x40000800
 8002880:	40013400 	.word	0x40013400
 8002884:	40014000 	.word	0x40014000
 8002888:	40014400 	.word	0x40014400
 800288c:	40014800 	.word	0x40014800

08002890 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d101      	bne.n	80028a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028a4:	2302      	movs	r3, #2
 80028a6:	e065      	b.n	8002974 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2202      	movs	r2, #2
 80028b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a2c      	ldr	r2, [pc, #176]	; (8002980 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d004      	beq.n	80028dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a2b      	ldr	r2, [pc, #172]	; (8002984 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d108      	bne.n	80028ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80028e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80028f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	4313      	orrs	r3, r2
 8002902:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a1b      	ldr	r2, [pc, #108]	; (8002980 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d018      	beq.n	8002948 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800291e:	d013      	beq.n	8002948 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a18      	ldr	r2, [pc, #96]	; (8002988 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d00e      	beq.n	8002948 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a17      	ldr	r2, [pc, #92]	; (800298c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d009      	beq.n	8002948 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a12      	ldr	r2, [pc, #72]	; (8002984 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d004      	beq.n	8002948 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a13      	ldr	r2, [pc, #76]	; (8002990 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d10c      	bne.n	8002962 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800294e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	4313      	orrs	r3, r2
 8002958:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	40012c00 	.word	0x40012c00
 8002984:	40013400 	.word	0x40013400
 8002988:	40000400 	.word	0x40000400
 800298c:	40000800 	.word	0x40000800
 8002990:	40014000 	.word	0x40014000

08002994 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e042      	b.n	8002a2c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d106      	bne.n	80029be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7fe fa4f 	bl	8000e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2224      	movs	r2, #36	; 0x24
 80029c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0201 	bic.w	r2, r2, #1
 80029d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f82c 	bl	8002a34 <UART_SetConfig>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d101      	bne.n	80029e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e022      	b.n	8002a2c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d002      	beq.n	80029f4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 fac8 	bl	8002f84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0201 	orr.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 fb4f 	bl	80030c8 <UART_CheckIdleState>
 8002a2a:	4603      	mov	r3, r0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a34:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002a38:	b088      	sub	sp, #32
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689a      	ldr	r2, [r3, #8]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	431a      	orrs	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a5e:	69fa      	ldr	r2, [r7, #28]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	4bb0      	ldr	r3, [pc, #704]	; (8002d2c <UART_SetConfig+0x2f8>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6812      	ldr	r2, [r2, #0]
 8002a72:	69f9      	ldr	r1, [r7, #28]
 8002a74:	430b      	orrs	r3, r1
 8002a76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4aa5      	ldr	r2, [pc, #660]	; (8002d30 <UART_SetConfig+0x2fc>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d004      	beq.n	8002aa8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	69fa      	ldr	r2, [r7, #28]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002ab2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6812      	ldr	r2, [r2, #0]
 8002aba:	69f9      	ldr	r1, [r7, #28]
 8002abc:	430b      	orrs	r3, r1
 8002abe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac6:	f023 010f 	bic.w	r1, r3, #15
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a96      	ldr	r2, [pc, #600]	; (8002d34 <UART_SetConfig+0x300>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d121      	bne.n	8002b24 <UART_SetConfig+0xf0>
 8002ae0:	4b95      	ldr	r3, [pc, #596]	; (8002d38 <UART_SetConfig+0x304>)
 8002ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	2b03      	cmp	r3, #3
 8002aec:	d816      	bhi.n	8002b1c <UART_SetConfig+0xe8>
 8002aee:	a201      	add	r2, pc, #4	; (adr r2, 8002af4 <UART_SetConfig+0xc0>)
 8002af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af4:	08002b05 	.word	0x08002b05
 8002af8:	08002b11 	.word	0x08002b11
 8002afc:	08002b0b 	.word	0x08002b0b
 8002b00:	08002b17 	.word	0x08002b17
 8002b04:	2301      	movs	r3, #1
 8002b06:	76fb      	strb	r3, [r7, #27]
 8002b08:	e0be      	b.n	8002c88 <UART_SetConfig+0x254>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	76fb      	strb	r3, [r7, #27]
 8002b0e:	e0bb      	b.n	8002c88 <UART_SetConfig+0x254>
 8002b10:	2304      	movs	r3, #4
 8002b12:	76fb      	strb	r3, [r7, #27]
 8002b14:	e0b8      	b.n	8002c88 <UART_SetConfig+0x254>
 8002b16:	2308      	movs	r3, #8
 8002b18:	76fb      	strb	r3, [r7, #27]
 8002b1a:	e0b5      	b.n	8002c88 <UART_SetConfig+0x254>
 8002b1c:	2310      	movs	r3, #16
 8002b1e:	76fb      	strb	r3, [r7, #27]
 8002b20:	bf00      	nop
 8002b22:	e0b1      	b.n	8002c88 <UART_SetConfig+0x254>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a84      	ldr	r2, [pc, #528]	; (8002d3c <UART_SetConfig+0x308>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d134      	bne.n	8002b98 <UART_SetConfig+0x164>
 8002b2e:	4b82      	ldr	r3, [pc, #520]	; (8002d38 <UART_SetConfig+0x304>)
 8002b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b34:	f003 030c 	and.w	r3, r3, #12
 8002b38:	2b0c      	cmp	r3, #12
 8002b3a:	d829      	bhi.n	8002b90 <UART_SetConfig+0x15c>
 8002b3c:	a201      	add	r2, pc, #4	; (adr r2, 8002b44 <UART_SetConfig+0x110>)
 8002b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b42:	bf00      	nop
 8002b44:	08002b79 	.word	0x08002b79
 8002b48:	08002b91 	.word	0x08002b91
 8002b4c:	08002b91 	.word	0x08002b91
 8002b50:	08002b91 	.word	0x08002b91
 8002b54:	08002b85 	.word	0x08002b85
 8002b58:	08002b91 	.word	0x08002b91
 8002b5c:	08002b91 	.word	0x08002b91
 8002b60:	08002b91 	.word	0x08002b91
 8002b64:	08002b7f 	.word	0x08002b7f
 8002b68:	08002b91 	.word	0x08002b91
 8002b6c:	08002b91 	.word	0x08002b91
 8002b70:	08002b91 	.word	0x08002b91
 8002b74:	08002b8b 	.word	0x08002b8b
 8002b78:	2300      	movs	r3, #0
 8002b7a:	76fb      	strb	r3, [r7, #27]
 8002b7c:	e084      	b.n	8002c88 <UART_SetConfig+0x254>
 8002b7e:	2302      	movs	r3, #2
 8002b80:	76fb      	strb	r3, [r7, #27]
 8002b82:	e081      	b.n	8002c88 <UART_SetConfig+0x254>
 8002b84:	2304      	movs	r3, #4
 8002b86:	76fb      	strb	r3, [r7, #27]
 8002b88:	e07e      	b.n	8002c88 <UART_SetConfig+0x254>
 8002b8a:	2308      	movs	r3, #8
 8002b8c:	76fb      	strb	r3, [r7, #27]
 8002b8e:	e07b      	b.n	8002c88 <UART_SetConfig+0x254>
 8002b90:	2310      	movs	r3, #16
 8002b92:	76fb      	strb	r3, [r7, #27]
 8002b94:	bf00      	nop
 8002b96:	e077      	b.n	8002c88 <UART_SetConfig+0x254>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a68      	ldr	r2, [pc, #416]	; (8002d40 <UART_SetConfig+0x30c>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d120      	bne.n	8002be4 <UART_SetConfig+0x1b0>
 8002ba2:	4b65      	ldr	r3, [pc, #404]	; (8002d38 <UART_SetConfig+0x304>)
 8002ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002bac:	2b10      	cmp	r3, #16
 8002bae:	d00f      	beq.n	8002bd0 <UART_SetConfig+0x19c>
 8002bb0:	2b10      	cmp	r3, #16
 8002bb2:	d802      	bhi.n	8002bba <UART_SetConfig+0x186>
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <UART_SetConfig+0x190>
 8002bb8:	e010      	b.n	8002bdc <UART_SetConfig+0x1a8>
 8002bba:	2b20      	cmp	r3, #32
 8002bbc:	d005      	beq.n	8002bca <UART_SetConfig+0x196>
 8002bbe:	2b30      	cmp	r3, #48	; 0x30
 8002bc0:	d009      	beq.n	8002bd6 <UART_SetConfig+0x1a2>
 8002bc2:	e00b      	b.n	8002bdc <UART_SetConfig+0x1a8>
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	76fb      	strb	r3, [r7, #27]
 8002bc8:	e05e      	b.n	8002c88 <UART_SetConfig+0x254>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	76fb      	strb	r3, [r7, #27]
 8002bce:	e05b      	b.n	8002c88 <UART_SetConfig+0x254>
 8002bd0:	2304      	movs	r3, #4
 8002bd2:	76fb      	strb	r3, [r7, #27]
 8002bd4:	e058      	b.n	8002c88 <UART_SetConfig+0x254>
 8002bd6:	2308      	movs	r3, #8
 8002bd8:	76fb      	strb	r3, [r7, #27]
 8002bda:	e055      	b.n	8002c88 <UART_SetConfig+0x254>
 8002bdc:	2310      	movs	r3, #16
 8002bde:	76fb      	strb	r3, [r7, #27]
 8002be0:	bf00      	nop
 8002be2:	e051      	b.n	8002c88 <UART_SetConfig+0x254>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a56      	ldr	r2, [pc, #344]	; (8002d44 <UART_SetConfig+0x310>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d120      	bne.n	8002c30 <UART_SetConfig+0x1fc>
 8002bee:	4b52      	ldr	r3, [pc, #328]	; (8002d38 <UART_SetConfig+0x304>)
 8002bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002bf8:	2b40      	cmp	r3, #64	; 0x40
 8002bfa:	d00f      	beq.n	8002c1c <UART_SetConfig+0x1e8>
 8002bfc:	2b40      	cmp	r3, #64	; 0x40
 8002bfe:	d802      	bhi.n	8002c06 <UART_SetConfig+0x1d2>
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d005      	beq.n	8002c10 <UART_SetConfig+0x1dc>
 8002c04:	e010      	b.n	8002c28 <UART_SetConfig+0x1f4>
 8002c06:	2b80      	cmp	r3, #128	; 0x80
 8002c08:	d005      	beq.n	8002c16 <UART_SetConfig+0x1e2>
 8002c0a:	2bc0      	cmp	r3, #192	; 0xc0
 8002c0c:	d009      	beq.n	8002c22 <UART_SetConfig+0x1ee>
 8002c0e:	e00b      	b.n	8002c28 <UART_SetConfig+0x1f4>
 8002c10:	2300      	movs	r3, #0
 8002c12:	76fb      	strb	r3, [r7, #27]
 8002c14:	e038      	b.n	8002c88 <UART_SetConfig+0x254>
 8002c16:	2302      	movs	r3, #2
 8002c18:	76fb      	strb	r3, [r7, #27]
 8002c1a:	e035      	b.n	8002c88 <UART_SetConfig+0x254>
 8002c1c:	2304      	movs	r3, #4
 8002c1e:	76fb      	strb	r3, [r7, #27]
 8002c20:	e032      	b.n	8002c88 <UART_SetConfig+0x254>
 8002c22:	2308      	movs	r3, #8
 8002c24:	76fb      	strb	r3, [r7, #27]
 8002c26:	e02f      	b.n	8002c88 <UART_SetConfig+0x254>
 8002c28:	2310      	movs	r3, #16
 8002c2a:	76fb      	strb	r3, [r7, #27]
 8002c2c:	bf00      	nop
 8002c2e:	e02b      	b.n	8002c88 <UART_SetConfig+0x254>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a3e      	ldr	r2, [pc, #248]	; (8002d30 <UART_SetConfig+0x2fc>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d124      	bne.n	8002c84 <UART_SetConfig+0x250>
 8002c3a:	4b3f      	ldr	r3, [pc, #252]	; (8002d38 <UART_SetConfig+0x304>)
 8002c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c48:	d012      	beq.n	8002c70 <UART_SetConfig+0x23c>
 8002c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c4e:	d802      	bhi.n	8002c56 <UART_SetConfig+0x222>
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d007      	beq.n	8002c64 <UART_SetConfig+0x230>
 8002c54:	e012      	b.n	8002c7c <UART_SetConfig+0x248>
 8002c56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c5a:	d006      	beq.n	8002c6a <UART_SetConfig+0x236>
 8002c5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c60:	d009      	beq.n	8002c76 <UART_SetConfig+0x242>
 8002c62:	e00b      	b.n	8002c7c <UART_SetConfig+0x248>
 8002c64:	2300      	movs	r3, #0
 8002c66:	76fb      	strb	r3, [r7, #27]
 8002c68:	e00e      	b.n	8002c88 <UART_SetConfig+0x254>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	76fb      	strb	r3, [r7, #27]
 8002c6e:	e00b      	b.n	8002c88 <UART_SetConfig+0x254>
 8002c70:	2304      	movs	r3, #4
 8002c72:	76fb      	strb	r3, [r7, #27]
 8002c74:	e008      	b.n	8002c88 <UART_SetConfig+0x254>
 8002c76:	2308      	movs	r3, #8
 8002c78:	76fb      	strb	r3, [r7, #27]
 8002c7a:	e005      	b.n	8002c88 <UART_SetConfig+0x254>
 8002c7c:	2310      	movs	r3, #16
 8002c7e:	76fb      	strb	r3, [r7, #27]
 8002c80:	bf00      	nop
 8002c82:	e001      	b.n	8002c88 <UART_SetConfig+0x254>
 8002c84:	2310      	movs	r3, #16
 8002c86:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a28      	ldr	r2, [pc, #160]	; (8002d30 <UART_SetConfig+0x2fc>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	f040 80a1 	bne.w	8002dd6 <UART_SetConfig+0x3a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002c94:	7efb      	ldrb	r3, [r7, #27]
 8002c96:	2b08      	cmp	r3, #8
 8002c98:	d823      	bhi.n	8002ce2 <UART_SetConfig+0x2ae>
 8002c9a:	a201      	add	r2, pc, #4	; (adr r2, 8002ca0 <UART_SetConfig+0x26c>)
 8002c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca0:	08002cc5 	.word	0x08002cc5
 8002ca4:	08002ce3 	.word	0x08002ce3
 8002ca8:	08002ccd 	.word	0x08002ccd
 8002cac:	08002ce3 	.word	0x08002ce3
 8002cb0:	08002cd3 	.word	0x08002cd3
 8002cb4:	08002ce3 	.word	0x08002ce3
 8002cb8:	08002ce3 	.word	0x08002ce3
 8002cbc:	08002ce3 	.word	0x08002ce3
 8002cc0:	08002cdb 	.word	0x08002cdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cc4:	f7ff fa38 	bl	8002138 <HAL_RCC_GetPCLK1Freq>
 8002cc8:	6178      	str	r0, [r7, #20]
        break;
 8002cca:	e00f      	b.n	8002cec <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ccc:	4b1e      	ldr	r3, [pc, #120]	; (8002d48 <UART_SetConfig+0x314>)
 8002cce:	617b      	str	r3, [r7, #20]
        break;
 8002cd0:	e00c      	b.n	8002cec <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cd2:	f7ff f9c3 	bl	800205c <HAL_RCC_GetSysClockFreq>
 8002cd6:	6178      	str	r0, [r7, #20]
        break;
 8002cd8:	e008      	b.n	8002cec <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cde:	617b      	str	r3, [r7, #20]
        break;
 8002ce0:	e004      	b.n	8002cec <UART_SetConfig+0x2b8>
      default:
        pclk = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	76bb      	strb	r3, [r7, #26]
        break;
 8002cea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 8130 	beq.w	8002f54 <UART_SetConfig+0x520>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	4a14      	ldr	r2, [pc, #80]	; (8002d4c <UART_SetConfig+0x318>)
 8002cfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d06:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	4413      	add	r3, r2
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d305      	bcc.n	8002d24 <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d915      	bls.n	8002d50 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	76bb      	strb	r3, [r7, #26]
 8002d28:	e114      	b.n	8002f54 <UART_SetConfig+0x520>
 8002d2a:	bf00      	nop
 8002d2c:	cfff69f3 	.word	0xcfff69f3
 8002d30:	40008000 	.word	0x40008000
 8002d34:	40013800 	.word	0x40013800
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	40004400 	.word	0x40004400
 8002d40:	40004800 	.word	0x40004800
 8002d44:	40004c00 	.word	0x40004c00
 8002d48:	00f42400 	.word	0x00f42400
 8002d4c:	0800609c 	.word	0x0800609c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f04f 0100 	mov.w	r1, #0
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5c:	4a87      	ldr	r2, [pc, #540]	; (8002f7c <UART_SetConfig+0x548>)
 8002d5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	f04f 0400 	mov.w	r4, #0
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4623      	mov	r3, r4
 8002d6c:	f7fd fa58 	bl	8000220 <__aeabi_uldivmod>
 8002d70:	4603      	mov	r3, r0
 8002d72:	460c      	mov	r4, r1
 8002d74:	4619      	mov	r1, r3
 8002d76:	4622      	mov	r2, r4
 8002d78:	f04f 0300 	mov.w	r3, #0
 8002d7c:	f04f 0400 	mov.w	r4, #0
 8002d80:	0214      	lsls	r4, r2, #8
 8002d82:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002d86:	020b      	lsls	r3, r1, #8
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6852      	ldr	r2, [r2, #4]
 8002d8c:	0852      	lsrs	r2, r2, #1
 8002d8e:	4611      	mov	r1, r2
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	eb13 0b01 	adds.w	fp, r3, r1
 8002d98:	eb44 0c02 	adc.w	ip, r4, r2
 8002d9c:	4658      	mov	r0, fp
 8002d9e:	4661      	mov	r1, ip
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f04f 0400 	mov.w	r4, #0
 8002da8:	461a      	mov	r2, r3
 8002daa:	4623      	mov	r3, r4
 8002dac:	f7fd fa38 	bl	8000220 <__aeabi_uldivmod>
 8002db0:	4603      	mov	r3, r0
 8002db2:	460c      	mov	r4, r1
 8002db4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dbc:	d308      	bcc.n	8002dd0 <UART_SetConfig+0x39c>
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dc4:	d204      	bcs.n	8002dd0 <UART_SetConfig+0x39c>
        {
          huart->Instance->BRR = usartdiv;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	60da      	str	r2, [r3, #12]
 8002dce:	e0c1      	b.n	8002f54 <UART_SetConfig+0x520>
        }
        else
        {
          ret = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	76bb      	strb	r3, [r7, #26]
 8002dd4:	e0be      	b.n	8002f54 <UART_SetConfig+0x520>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dde:	d164      	bne.n	8002eaa <UART_SetConfig+0x476>
  {
    switch (clocksource)
 8002de0:	7efb      	ldrb	r3, [r7, #27]
 8002de2:	2b08      	cmp	r3, #8
 8002de4:	d827      	bhi.n	8002e36 <UART_SetConfig+0x402>
 8002de6:	a201      	add	r2, pc, #4	; (adr r2, 8002dec <UART_SetConfig+0x3b8>)
 8002de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dec:	08002e11 	.word	0x08002e11
 8002df0:	08002e19 	.word	0x08002e19
 8002df4:	08002e21 	.word	0x08002e21
 8002df8:	08002e37 	.word	0x08002e37
 8002dfc:	08002e27 	.word	0x08002e27
 8002e00:	08002e37 	.word	0x08002e37
 8002e04:	08002e37 	.word	0x08002e37
 8002e08:	08002e37 	.word	0x08002e37
 8002e0c:	08002e2f 	.word	0x08002e2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e10:	f7ff f992 	bl	8002138 <HAL_RCC_GetPCLK1Freq>
 8002e14:	6178      	str	r0, [r7, #20]
        break;
 8002e16:	e013      	b.n	8002e40 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e18:	f7ff f9a4 	bl	8002164 <HAL_RCC_GetPCLK2Freq>
 8002e1c:	6178      	str	r0, [r7, #20]
        break;
 8002e1e:	e00f      	b.n	8002e40 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e20:	4b57      	ldr	r3, [pc, #348]	; (8002f80 <UART_SetConfig+0x54c>)
 8002e22:	617b      	str	r3, [r7, #20]
        break;
 8002e24:	e00c      	b.n	8002e40 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e26:	f7ff f919 	bl	800205c <HAL_RCC_GetSysClockFreq>
 8002e2a:	6178      	str	r0, [r7, #20]
        break;
 8002e2c:	e008      	b.n	8002e40 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e32:	617b      	str	r3, [r7, #20]
        break;
 8002e34:	e004      	b.n	8002e40 <UART_SetConfig+0x40c>
      default:
        pclk = 0U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	76bb      	strb	r3, [r7, #26]
        break;
 8002e3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f000 8086 	beq.w	8002f54 <UART_SetConfig+0x520>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	4a4b      	ldr	r2, [pc, #300]	; (8002f7c <UART_SetConfig+0x548>)
 8002e4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e52:	461a      	mov	r2, r3
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e5a:	005a      	lsls	r2, r3, #1
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	085b      	lsrs	r3, r3, #1
 8002e62:	441a      	add	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	2b0f      	cmp	r3, #15
 8002e74:	d916      	bls.n	8002ea4 <UART_SetConfig+0x470>
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e7c:	d212      	bcs.n	8002ea4 <UART_SetConfig+0x470>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	f023 030f 	bic.w	r3, r3, #15
 8002e86:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	085b      	lsrs	r3, r3, #1
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	89fb      	ldrh	r3, [r7, #14]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	89fa      	ldrh	r2, [r7, #14]
 8002ea0:	60da      	str	r2, [r3, #12]
 8002ea2:	e057      	b.n	8002f54 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	76bb      	strb	r3, [r7, #26]
 8002ea8:	e054      	b.n	8002f54 <UART_SetConfig+0x520>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002eaa:	7efb      	ldrb	r3, [r7, #27]
 8002eac:	2b08      	cmp	r3, #8
 8002eae:	d828      	bhi.n	8002f02 <UART_SetConfig+0x4ce>
 8002eb0:	a201      	add	r2, pc, #4	; (adr r2, 8002eb8 <UART_SetConfig+0x484>)
 8002eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb6:	bf00      	nop
 8002eb8:	08002edd 	.word	0x08002edd
 8002ebc:	08002ee5 	.word	0x08002ee5
 8002ec0:	08002eed 	.word	0x08002eed
 8002ec4:	08002f03 	.word	0x08002f03
 8002ec8:	08002ef3 	.word	0x08002ef3
 8002ecc:	08002f03 	.word	0x08002f03
 8002ed0:	08002f03 	.word	0x08002f03
 8002ed4:	08002f03 	.word	0x08002f03
 8002ed8:	08002efb 	.word	0x08002efb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002edc:	f7ff f92c 	bl	8002138 <HAL_RCC_GetPCLK1Freq>
 8002ee0:	6178      	str	r0, [r7, #20]
        break;
 8002ee2:	e013      	b.n	8002f0c <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ee4:	f7ff f93e 	bl	8002164 <HAL_RCC_GetPCLK2Freq>
 8002ee8:	6178      	str	r0, [r7, #20]
        break;
 8002eea:	e00f      	b.n	8002f0c <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002eec:	4b24      	ldr	r3, [pc, #144]	; (8002f80 <UART_SetConfig+0x54c>)
 8002eee:	617b      	str	r3, [r7, #20]
        break;
 8002ef0:	e00c      	b.n	8002f0c <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ef2:	f7ff f8b3 	bl	800205c <HAL_RCC_GetSysClockFreq>
 8002ef6:	6178      	str	r0, [r7, #20]
        break;
 8002ef8:	e008      	b.n	8002f0c <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002efa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002efe:	617b      	str	r3, [r7, #20]
        break;
 8002f00:	e004      	b.n	8002f0c <UART_SetConfig+0x4d8>
      default:
        pclk = 0U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	76bb      	strb	r3, [r7, #26]
        break;
 8002f0a:	bf00      	nop
    }

    if (pclk != 0U)
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d020      	beq.n	8002f54 <UART_SetConfig+0x520>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	4a19      	ldr	r2, [pc, #100]	; (8002f7c <UART_SetConfig+0x548>)
 8002f18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	fbb3 f2f2 	udiv	r2, r3, r2
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	085b      	lsrs	r3, r3, #1
 8002f2a:	441a      	add	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	2b0f      	cmp	r3, #15
 8002f3c:	d908      	bls.n	8002f50 <UART_SetConfig+0x51c>
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f44:	d204      	bcs.n	8002f50 <UART_SetConfig+0x51c>
      {
        huart->Instance->BRR = usartdiv;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	60da      	str	r2, [r3, #12]
 8002f4e:	e001      	b.n	8002f54 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8002f70:	7ebb      	ldrb	r3, [r7, #26]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3720      	adds	r7, #32
 8002f76:	46bd      	mov	sp, r7
 8002f78:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8002f7c:	0800609c 	.word	0x0800609c
 8002f80:	00f42400 	.word	0x00f42400

08002f84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00a      	beq.n	8002fae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00a      	beq.n	8002fd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00a      	beq.n	8002ff2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00a      	beq.n	8003014 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003018:	f003 0310 	and.w	r3, r3, #16
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00a      	beq.n	8003036 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303a:	f003 0320 	and.w	r3, r3, #32
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00a      	beq.n	8003058 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003060:	2b00      	cmp	r3, #0
 8003062:	d01a      	beq.n	800309a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003082:	d10a      	bne.n	800309a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00a      	beq.n	80030bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	605a      	str	r2, [r3, #4]
  }
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af02      	add	r7, sp, #8
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80030d8:	f7fd ffd2 	bl	8001080 <HAL_GetTick>
 80030dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0308 	and.w	r3, r3, #8
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d10e      	bne.n	800310a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f82c 	bl	8003158 <UART_WaitOnFlagUntilTimeout>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e022      	b.n	8003150 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b04      	cmp	r3, #4
 8003116:	d10e      	bne.n	8003136 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003118:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f816 	bl	8003158 <UART_WaitOnFlagUntilTimeout>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e00c      	b.n	8003150 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2220      	movs	r2, #32
 800313a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2220      	movs	r2, #32
 8003142:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	603b      	str	r3, [r7, #0]
 8003164:	4613      	mov	r3, r2
 8003166:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003168:	e062      	b.n	8003230 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003170:	d05e      	beq.n	8003230 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003172:	f7fd ff85 	bl	8001080 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	429a      	cmp	r2, r3
 8003180:	d302      	bcc.n	8003188 <UART_WaitOnFlagUntilTimeout+0x30>
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d11d      	bne.n	80031c4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003196:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0201 	bic.w	r2, r2, #1
 80031a6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2220      	movs	r2, #32
 80031ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2220      	movs	r2, #32
 80031b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e045      	b.n	8003250 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d02e      	beq.n	8003230 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031e0:	d126      	bne.n	8003230 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031ea:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80031fa:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 0201 	bic.w	r2, r2, #1
 800320a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2220      	movs	r2, #32
 8003210:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2220      	movs	r2, #32
 8003218:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2220      	movs	r2, #32
 8003220:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e00f      	b.n	8003250 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	69da      	ldr	r2, [r3, #28]
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	4013      	ands	r3, r2
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	429a      	cmp	r2, r3
 800323e:	bf0c      	ite	eq
 8003240:	2301      	moveq	r3, #1
 8003242:	2300      	movne	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	461a      	mov	r2, r3
 8003248:	79fb      	ldrb	r3, [r7, #7]
 800324a:	429a      	cmp	r2, r3
 800324c:	d08d      	beq.n	800316a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003266:	2b01      	cmp	r3, #1
 8003268:	d101      	bne.n	800326e <HAL_UARTEx_DisableFifoMode+0x16>
 800326a:	2302      	movs	r3, #2
 800326c:	e027      	b.n	80032be <HAL_UARTEx_DisableFifoMode+0x66>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2224      	movs	r2, #36	; 0x24
 800327a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0201 	bic.w	r2, r2, #1
 8003294:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800329c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2220      	movs	r2, #32
 80032b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b084      	sub	sp, #16
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
 80032d2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80032de:	2302      	movs	r3, #2
 80032e0:	e02d      	b.n	800333e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2224      	movs	r2, #36	; 0x24
 80032ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0201 	bic.w	r2, r2, #1
 8003308:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f850 	bl	80033c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2220      	movs	r2, #32
 8003330:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b084      	sub	sp, #16
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
 800334e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003356:	2b01      	cmp	r3, #1
 8003358:	d101      	bne.n	800335e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800335a:	2302      	movs	r3, #2
 800335c:	e02d      	b.n	80033ba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2224      	movs	r2, #36	; 0x24
 800336a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0201 	bic.w	r2, r2, #1
 8003384:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f812 	bl	80033c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
	...

080033c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b089      	sub	sp, #36	; 0x24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80033cc:	4a2f      	ldr	r2, [pc, #188]	; (800348c <UARTEx_SetNbDataToProcess+0xc8>)
 80033ce:	f107 0314 	add.w	r3, r7, #20
 80033d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033d6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80033da:	4a2d      	ldr	r2, [pc, #180]	; (8003490 <UARTEx_SetNbDataToProcess+0xcc>)
 80033dc:	f107 030c 	add.w	r3, r7, #12
 80033e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033e4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d108      	bne.n	8003402 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003400:	e03d      	b.n	800347e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003402:	2308      	movs	r3, #8
 8003404:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003406:	2308      	movs	r3, #8
 8003408:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	0e5b      	lsrs	r3, r3, #25
 8003412:	b2db      	uxtb	r3, r3
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	0f5b      	lsrs	r3, r3, #29
 8003422:	b2db      	uxtb	r3, r3
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800342a:	7fbb      	ldrb	r3, [r7, #30]
 800342c:	7f3a      	ldrb	r2, [r7, #28]
 800342e:	f107 0120 	add.w	r1, r7, #32
 8003432:	440a      	add	r2, r1
 8003434:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003438:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800343c:	7f3a      	ldrb	r2, [r7, #28]
 800343e:	f107 0120 	add.w	r1, r7, #32
 8003442:	440a      	add	r2, r1
 8003444:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003448:	fb93 f3f2 	sdiv	r3, r3, r2
 800344c:	b29a      	uxth	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003454:	7ffb      	ldrb	r3, [r7, #31]
 8003456:	7f7a      	ldrb	r2, [r7, #29]
 8003458:	f107 0120 	add.w	r1, r7, #32
 800345c:	440a      	add	r2, r1
 800345e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003462:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003466:	7f7a      	ldrb	r2, [r7, #29]
 8003468:	f107 0120 	add.w	r1, r7, #32
 800346c:	440a      	add	r2, r1
 800346e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003472:	fb93 f3f2 	sdiv	r3, r3, r2
 8003476:	b29a      	uxth	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800347e:	bf00      	nop
 8003480:	3724      	adds	r7, #36	; 0x24
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	08006014 	.word	0x08006014
 8003490:	0800601c 	.word	0x0800601c

08003494 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003498:	bf00      	nop
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
	...

080034a4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034aa:	f3ef 8305 	mrs	r3, IPSR
 80034ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80034b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10f      	bne.n	80034d6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034b6:	f3ef 8310 	mrs	r3, PRIMASK
 80034ba:	607b      	str	r3, [r7, #4]
  return(result);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d105      	bne.n	80034ce <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80034c2:	f3ef 8311 	mrs	r3, BASEPRI
 80034c6:	603b      	str	r3, [r7, #0]
  return(result);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d007      	beq.n	80034de <osKernelInitialize+0x3a>
 80034ce:	4b0e      	ldr	r3, [pc, #56]	; (8003508 <osKernelInitialize+0x64>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d103      	bne.n	80034de <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80034d6:	f06f 0305 	mvn.w	r3, #5
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	e00c      	b.n	80034f8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80034de:	4b0a      	ldr	r3, [pc, #40]	; (8003508 <osKernelInitialize+0x64>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d105      	bne.n	80034f2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80034e6:	4b08      	ldr	r3, [pc, #32]	; (8003508 <osKernelInitialize+0x64>)
 80034e8:	2201      	movs	r2, #1
 80034ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80034ec:	2300      	movs	r3, #0
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	e002      	b.n	80034f8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80034f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80034f8:	68fb      	ldr	r3, [r7, #12]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3714      	adds	r7, #20
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	20000054 	.word	0x20000054

0800350c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003512:	f3ef 8305 	mrs	r3, IPSR
 8003516:	60bb      	str	r3, [r7, #8]
  return(result);
 8003518:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10f      	bne.n	800353e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800351e:	f3ef 8310 	mrs	r3, PRIMASK
 8003522:	607b      	str	r3, [r7, #4]
  return(result);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d105      	bne.n	8003536 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800352a:	f3ef 8311 	mrs	r3, BASEPRI
 800352e:	603b      	str	r3, [r7, #0]
  return(result);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d007      	beq.n	8003546 <osKernelStart+0x3a>
 8003536:	4b0f      	ldr	r3, [pc, #60]	; (8003574 <osKernelStart+0x68>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b02      	cmp	r3, #2
 800353c:	d103      	bne.n	8003546 <osKernelStart+0x3a>
    stat = osErrorISR;
 800353e:	f06f 0305 	mvn.w	r3, #5
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	e010      	b.n	8003568 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003546:	4b0b      	ldr	r3, [pc, #44]	; (8003574 <osKernelStart+0x68>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d109      	bne.n	8003562 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800354e:	f7ff ffa1 	bl	8003494 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003552:	4b08      	ldr	r3, [pc, #32]	; (8003574 <osKernelStart+0x68>)
 8003554:	2202      	movs	r2, #2
 8003556:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003558:	f001 f870 	bl	800463c <vTaskStartScheduler>
      stat = osOK;
 800355c:	2300      	movs	r3, #0
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	e002      	b.n	8003568 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003562:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003566:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003568:	68fb      	ldr	r3, [r7, #12]
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	20000054 	.word	0x20000054

08003578 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003578:	b580      	push	{r7, lr}
 800357a:	b090      	sub	sp, #64	; 0x40
 800357c:	af04      	add	r7, sp, #16
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003584:	2300      	movs	r3, #0
 8003586:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003588:	f3ef 8305 	mrs	r3, IPSR
 800358c:	61fb      	str	r3, [r7, #28]
  return(result);
 800358e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003590:	2b00      	cmp	r3, #0
 8003592:	f040 808f 	bne.w	80036b4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003596:	f3ef 8310 	mrs	r3, PRIMASK
 800359a:	61bb      	str	r3, [r7, #24]
  return(result);
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d105      	bne.n	80035ae <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80035a2:	f3ef 8311 	mrs	r3, BASEPRI
 80035a6:	617b      	str	r3, [r7, #20]
  return(result);
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <osThreadNew+0x3e>
 80035ae:	4b44      	ldr	r3, [pc, #272]	; (80036c0 <osThreadNew+0x148>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d07e      	beq.n	80036b4 <osThreadNew+0x13c>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d07b      	beq.n	80036b4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80035bc:	2380      	movs	r3, #128	; 0x80
 80035be:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80035c0:	2318      	movs	r3, #24
 80035c2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80035c4:	2300      	movs	r3, #0
 80035c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80035c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035cc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d045      	beq.n	8003660 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d002      	beq.n	80035e2 <osThreadNew+0x6a>
        name = attr->name;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d008      	beq.n	8003608 <osThreadNew+0x90>
 80035f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f8:	2b38      	cmp	r3, #56	; 0x38
 80035fa:	d805      	bhi.n	8003608 <osThreadNew+0x90>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <osThreadNew+0x94>
        return (NULL);
 8003608:	2300      	movs	r3, #0
 800360a:	e054      	b.n	80036b6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	089b      	lsrs	r3, r3, #2
 800361a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00e      	beq.n	8003642 <osThreadNew+0xca>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	2b5b      	cmp	r3, #91	; 0x5b
 800362a:	d90a      	bls.n	8003642 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003630:	2b00      	cmp	r3, #0
 8003632:	d006      	beq.n	8003642 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d002      	beq.n	8003642 <osThreadNew+0xca>
        mem = 1;
 800363c:	2301      	movs	r3, #1
 800363e:	623b      	str	r3, [r7, #32]
 8003640:	e010      	b.n	8003664 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10c      	bne.n	8003664 <osThreadNew+0xec>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d108      	bne.n	8003664 <osThreadNew+0xec>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d104      	bne.n	8003664 <osThreadNew+0xec>
          mem = 0;
 800365a:	2300      	movs	r3, #0
 800365c:	623b      	str	r3, [r7, #32]
 800365e:	e001      	b.n	8003664 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003660:	2300      	movs	r3, #0
 8003662:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d110      	bne.n	800368c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003672:	9202      	str	r2, [sp, #8]
 8003674:	9301      	str	r3, [sp, #4]
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800367e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f000 fe09 	bl	8004298 <xTaskCreateStatic>
 8003686:	4603      	mov	r3, r0
 8003688:	613b      	str	r3, [r7, #16]
 800368a:	e013      	b.n	80036b4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800368c:	6a3b      	ldr	r3, [r7, #32]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d110      	bne.n	80036b4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003694:	b29a      	uxth	r2, r3
 8003696:	f107 0310 	add.w	r3, r7, #16
 800369a:	9301      	str	r3, [sp, #4]
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f000 fe51 	bl	800434c <xTaskCreate>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d001      	beq.n	80036b4 <osThreadNew+0x13c>
          hTask = NULL;
 80036b0:	2300      	movs	r3, #0
 80036b2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80036b4:	693b      	ldr	r3, [r7, #16]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3730      	adds	r7, #48	; 0x30
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	20000054 	.word	0x20000054

080036c4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036cc:	f3ef 8305 	mrs	r3, IPSR
 80036d0:	613b      	str	r3, [r7, #16]
  return(result);
 80036d2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10f      	bne.n	80036f8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036d8:	f3ef 8310 	mrs	r3, PRIMASK
 80036dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d105      	bne.n	80036f0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80036e4:	f3ef 8311 	mrs	r3, BASEPRI
 80036e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d007      	beq.n	8003700 <osDelay+0x3c>
 80036f0:	4b0a      	ldr	r3, [pc, #40]	; (800371c <osDelay+0x58>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d103      	bne.n	8003700 <osDelay+0x3c>
    stat = osErrorISR;
 80036f8:	f06f 0305 	mvn.w	r3, #5
 80036fc:	617b      	str	r3, [r7, #20]
 80036fe:	e007      	b.n	8003710 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003700:	2300      	movs	r3, #0
 8003702:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d002      	beq.n	8003710 <osDelay+0x4c>
      vTaskDelay(ticks);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 ff62 	bl	80045d4 <vTaskDelay>
    }
  }

  return (stat);
 8003710:	697b      	ldr	r3, [r7, #20]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3718      	adds	r7, #24
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	20000054 	.word	0x20000054

08003720 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4a07      	ldr	r2, [pc, #28]	; (800374c <vApplicationGetIdleTaskMemory+0x2c>)
 8003730:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	4a06      	ldr	r2, [pc, #24]	; (8003750 <vApplicationGetIdleTaskMemory+0x30>)
 8003736:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2280      	movs	r2, #128	; 0x80
 800373c:	601a      	str	r2, [r3, #0]
}
 800373e:	bf00      	nop
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	20000058 	.word	0x20000058
 8003750:	200000b4 	.word	0x200000b4

08003754 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	4a07      	ldr	r2, [pc, #28]	; (8003780 <vApplicationGetTimerTaskMemory+0x2c>)
 8003764:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	4a06      	ldr	r2, [pc, #24]	; (8003784 <vApplicationGetTimerTaskMemory+0x30>)
 800376a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003772:	601a      	str	r2, [r3, #0]
}
 8003774:	bf00      	nop
 8003776:	3714      	adds	r7, #20
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	200002b4 	.word	0x200002b4
 8003784:	20000310 	.word	0x20000310

08003788 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f103 0208 	add.w	r2, r3, #8
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f103 0208 	add.w	r2, r3, #8
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f103 0208 	add.w	r2, r3, #8
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037e2:	b480      	push	{r7}
 80037e4:	b085      	sub	sp, #20
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
 80037ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	1c5a      	adds	r2, r3, #1
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	601a      	str	r2, [r3, #0]
}
 800381e:	bf00      	nop
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800382a:	b480      	push	{r7}
 800382c:	b085      	sub	sp, #20
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
 8003832:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003840:	d103      	bne.n	800384a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	e00c      	b.n	8003864 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	3308      	adds	r3, #8
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	e002      	b.n	8003858 <vListInsert+0x2e>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	429a      	cmp	r2, r3
 8003862:	d2f6      	bcs.n	8003852 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	1c5a      	adds	r2, r3, #1
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	601a      	str	r2, [r3, #0]
}
 8003890:	bf00      	nop
 8003892:	3714      	adds	r7, #20
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6892      	ldr	r2, [r2, #8]
 80038b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6852      	ldr	r2, [r2, #4]
 80038bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d103      	bne.n	80038d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	1e5a      	subs	r2, r3, #1
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d109      	bne.n	8003918 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003908:	f383 8811 	msr	BASEPRI, r3
 800390c:	f3bf 8f6f 	isb	sy
 8003910:	f3bf 8f4f 	dsb	sy
 8003914:	60bb      	str	r3, [r7, #8]
 8003916:	e7fe      	b.n	8003916 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003918:	f002 f810 	bl	800593c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003924:	68f9      	ldr	r1, [r7, #12]
 8003926:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003928:	fb01 f303 	mul.w	r3, r1, r3
 800392c:	441a      	add	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003948:	3b01      	subs	r3, #1
 800394a:	68f9      	ldr	r1, [r7, #12]
 800394c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800394e:	fb01 f303 	mul.w	r3, r1, r3
 8003952:	441a      	add	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	22ff      	movs	r2, #255	; 0xff
 800395c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	22ff      	movs	r2, #255	; 0xff
 8003964:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d114      	bne.n	8003998 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d01a      	beq.n	80039ac <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	3310      	adds	r3, #16
 800397a:	4618      	mov	r0, r3
 800397c:	f001 f8de 	bl	8004b3c <xTaskRemoveFromEventList>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d012      	beq.n	80039ac <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003986:	4b0d      	ldr	r3, [pc, #52]	; (80039bc <xQueueGenericReset+0xcc>)
 8003988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	f3bf 8f6f 	isb	sy
 8003996:	e009      	b.n	80039ac <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	3310      	adds	r3, #16
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff fef3 	bl	8003788 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	3324      	adds	r3, #36	; 0x24
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7ff feee 	bl	8003788 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80039ac:	f001 fff4 	bl	8005998 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80039b0:	2301      	movs	r3, #1
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	e000ed04 	.word	0xe000ed04

080039c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08e      	sub	sp, #56	; 0x38
 80039c4:	af02      	add	r7, sp, #8
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
 80039cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d109      	bne.n	80039e8 <xQueueGenericCreateStatic+0x28>
 80039d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d8:	f383 8811 	msr	BASEPRI, r3
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80039e6:	e7fe      	b.n	80039e6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d109      	bne.n	8003a02 <xQueueGenericCreateStatic+0x42>
 80039ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f2:	f383 8811 	msr	BASEPRI, r3
 80039f6:	f3bf 8f6f 	isb	sy
 80039fa:	f3bf 8f4f 	dsb	sy
 80039fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003a00:	e7fe      	b.n	8003a00 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <xQueueGenericCreateStatic+0x4e>
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <xQueueGenericCreateStatic+0x52>
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e000      	b.n	8003a14 <xQueueGenericCreateStatic+0x54>
 8003a12:	2300      	movs	r3, #0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d109      	bne.n	8003a2c <xQueueGenericCreateStatic+0x6c>
 8003a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1c:	f383 8811 	msr	BASEPRI, r3
 8003a20:	f3bf 8f6f 	isb	sy
 8003a24:	f3bf 8f4f 	dsb	sy
 8003a28:	623b      	str	r3, [r7, #32]
 8003a2a:	e7fe      	b.n	8003a2a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d102      	bne.n	8003a38 <xQueueGenericCreateStatic+0x78>
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <xQueueGenericCreateStatic+0x7c>
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e000      	b.n	8003a3e <xQueueGenericCreateStatic+0x7e>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d109      	bne.n	8003a56 <xQueueGenericCreateStatic+0x96>
 8003a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a46:	f383 8811 	msr	BASEPRI, r3
 8003a4a:	f3bf 8f6f 	isb	sy
 8003a4e:	f3bf 8f4f 	dsb	sy
 8003a52:	61fb      	str	r3, [r7, #28]
 8003a54:	e7fe      	b.n	8003a54 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003a56:	2350      	movs	r3, #80	; 0x50
 8003a58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	2b50      	cmp	r3, #80	; 0x50
 8003a5e:	d009      	beq.n	8003a74 <xQueueGenericCreateStatic+0xb4>
 8003a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a64:	f383 8811 	msr	BASEPRI, r3
 8003a68:	f3bf 8f6f 	isb	sy
 8003a6c:	f3bf 8f4f 	dsb	sy
 8003a70:	61bb      	str	r3, [r7, #24]
 8003a72:	e7fe      	b.n	8003a72 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003a74:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00d      	beq.n	8003a9c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a88:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	4613      	mov	r3, r2
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	68b9      	ldr	r1, [r7, #8]
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f000 f805 	bl	8003aa6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3730      	adds	r7, #48	; 0x30
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b084      	sub	sp, #16
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	60f8      	str	r0, [r7, #12]
 8003aae:	60b9      	str	r1, [r7, #8]
 8003ab0:	607a      	str	r2, [r7, #4]
 8003ab2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d103      	bne.n	8003ac2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	e002      	b.n	8003ac8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	69b8      	ldr	r0, [r7, #24]
 8003ad8:	f7ff ff0a 	bl	80038f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	78fa      	ldrb	r2, [r7, #3]
 8003ae0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003ae4:	bf00      	nop
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b08e      	sub	sp, #56	; 0x38
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
 8003af8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003afa:	2300      	movs	r3, #0
 8003afc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d109      	bne.n	8003b1c <xQueueGenericSend+0x30>
 8003b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0c:	f383 8811 	msr	BASEPRI, r3
 8003b10:	f3bf 8f6f 	isb	sy
 8003b14:	f3bf 8f4f 	dsb	sy
 8003b18:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b1a:	e7fe      	b.n	8003b1a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d103      	bne.n	8003b2a <xQueueGenericSend+0x3e>
 8003b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <xQueueGenericSend+0x42>
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e000      	b.n	8003b30 <xQueueGenericSend+0x44>
 8003b2e:	2300      	movs	r3, #0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d109      	bne.n	8003b48 <xQueueGenericSend+0x5c>
 8003b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b38:	f383 8811 	msr	BASEPRI, r3
 8003b3c:	f3bf 8f6f 	isb	sy
 8003b40:	f3bf 8f4f 	dsb	sy
 8003b44:	627b      	str	r3, [r7, #36]	; 0x24
 8003b46:	e7fe      	b.n	8003b46 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d103      	bne.n	8003b56 <xQueueGenericSend+0x6a>
 8003b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d101      	bne.n	8003b5a <xQueueGenericSend+0x6e>
 8003b56:	2301      	movs	r3, #1
 8003b58:	e000      	b.n	8003b5c <xQueueGenericSend+0x70>
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d109      	bne.n	8003b74 <xQueueGenericSend+0x88>
 8003b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b64:	f383 8811 	msr	BASEPRI, r3
 8003b68:	f3bf 8f6f 	isb	sy
 8003b6c:	f3bf 8f4f 	dsb	sy
 8003b70:	623b      	str	r3, [r7, #32]
 8003b72:	e7fe      	b.n	8003b72 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b74:	f001 f998 	bl	8004ea8 <xTaskGetSchedulerState>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d102      	bne.n	8003b84 <xQueueGenericSend+0x98>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <xQueueGenericSend+0x9c>
 8003b84:	2301      	movs	r3, #1
 8003b86:	e000      	b.n	8003b8a <xQueueGenericSend+0x9e>
 8003b88:	2300      	movs	r3, #0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d109      	bne.n	8003ba2 <xQueueGenericSend+0xb6>
 8003b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b92:	f383 8811 	msr	BASEPRI, r3
 8003b96:	f3bf 8f6f 	isb	sy
 8003b9a:	f3bf 8f4f 	dsb	sy
 8003b9e:	61fb      	str	r3, [r7, #28]
 8003ba0:	e7fe      	b.n	8003ba0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ba2:	f001 fecb 	bl	800593c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d302      	bcc.n	8003bb8 <xQueueGenericSend+0xcc>
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d129      	bne.n	8003c0c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	68b9      	ldr	r1, [r7, #8]
 8003bbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bbe:	f000 f9ff 	bl	8003fc0 <prvCopyDataToQueue>
 8003bc2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d010      	beq.n	8003bee <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bce:	3324      	adds	r3, #36	; 0x24
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f000 ffb3 	bl	8004b3c <xTaskRemoveFromEventList>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d013      	beq.n	8003c04 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003bdc:	4b3f      	ldr	r3, [pc, #252]	; (8003cdc <xQueueGenericSend+0x1f0>)
 8003bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	f3bf 8f4f 	dsb	sy
 8003be8:	f3bf 8f6f 	isb	sy
 8003bec:	e00a      	b.n	8003c04 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d007      	beq.n	8003c04 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003bf4:	4b39      	ldr	r3, [pc, #228]	; (8003cdc <xQueueGenericSend+0x1f0>)
 8003bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	f3bf 8f4f 	dsb	sy
 8003c00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003c04:	f001 fec8 	bl	8005998 <vPortExitCritical>
				return pdPASS;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e063      	b.n	8003cd4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d103      	bne.n	8003c1a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c12:	f001 fec1 	bl	8005998 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003c16:	2300      	movs	r3, #0
 8003c18:	e05c      	b.n	8003cd4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d106      	bne.n	8003c2e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c20:	f107 0314 	add.w	r3, r7, #20
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 ffeb 	bl	8004c00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c2e:	f001 feb3 	bl	8005998 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c32:	f000 fd67 	bl	8004704 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c36:	f001 fe81 	bl	800593c <vPortEnterCritical>
 8003c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c40:	b25b      	sxtb	r3, r3
 8003c42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c46:	d103      	bne.n	8003c50 <xQueueGenericSend+0x164>
 8003c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c56:	b25b      	sxtb	r3, r3
 8003c58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c5c:	d103      	bne.n	8003c66 <xQueueGenericSend+0x17a>
 8003c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c66:	f001 fe97 	bl	8005998 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c6a:	1d3a      	adds	r2, r7, #4
 8003c6c:	f107 0314 	add.w	r3, r7, #20
 8003c70:	4611      	mov	r1, r2
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 ffda 	bl	8004c2c <xTaskCheckForTimeOut>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d124      	bne.n	8003cc8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c80:	f000 fa96 	bl	80041b0 <prvIsQueueFull>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d018      	beq.n	8003cbc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8c:	3310      	adds	r3, #16
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	4611      	mov	r1, r2
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 ff04 	bl	8004aa0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003c98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c9a:	f000 fa21 	bl	80040e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003c9e:	f000 fd3f 	bl	8004720 <xTaskResumeAll>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f47f af7c 	bne.w	8003ba2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003caa:	4b0c      	ldr	r3, [pc, #48]	; (8003cdc <xQueueGenericSend+0x1f0>)
 8003cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	f3bf 8f4f 	dsb	sy
 8003cb6:	f3bf 8f6f 	isb	sy
 8003cba:	e772      	b.n	8003ba2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003cbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cbe:	f000 fa0f 	bl	80040e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003cc2:	f000 fd2d 	bl	8004720 <xTaskResumeAll>
 8003cc6:	e76c      	b.n	8003ba2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003cc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cca:	f000 fa09 	bl	80040e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003cce:	f000 fd27 	bl	8004720 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003cd2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3738      	adds	r7, #56	; 0x38
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	e000ed04 	.word	0xe000ed04

08003ce0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b08e      	sub	sp, #56	; 0x38
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
 8003cec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d109      	bne.n	8003d0c <xQueueGenericSendFromISR+0x2c>
 8003cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfc:	f383 8811 	msr	BASEPRI, r3
 8003d00:	f3bf 8f6f 	isb	sy
 8003d04:	f3bf 8f4f 	dsb	sy
 8003d08:	627b      	str	r3, [r7, #36]	; 0x24
 8003d0a:	e7fe      	b.n	8003d0a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d103      	bne.n	8003d1a <xQueueGenericSendFromISR+0x3a>
 8003d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <xQueueGenericSendFromISR+0x3e>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e000      	b.n	8003d20 <xQueueGenericSendFromISR+0x40>
 8003d1e:	2300      	movs	r3, #0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d109      	bne.n	8003d38 <xQueueGenericSendFromISR+0x58>
 8003d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d28:	f383 8811 	msr	BASEPRI, r3
 8003d2c:	f3bf 8f6f 	isb	sy
 8003d30:	f3bf 8f4f 	dsb	sy
 8003d34:	623b      	str	r3, [r7, #32]
 8003d36:	e7fe      	b.n	8003d36 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d103      	bne.n	8003d46 <xQueueGenericSendFromISR+0x66>
 8003d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d101      	bne.n	8003d4a <xQueueGenericSendFromISR+0x6a>
 8003d46:	2301      	movs	r3, #1
 8003d48:	e000      	b.n	8003d4c <xQueueGenericSendFromISR+0x6c>
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d109      	bne.n	8003d64 <xQueueGenericSendFromISR+0x84>
 8003d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d54:	f383 8811 	msr	BASEPRI, r3
 8003d58:	f3bf 8f6f 	isb	sy
 8003d5c:	f3bf 8f4f 	dsb	sy
 8003d60:	61fb      	str	r3, [r7, #28]
 8003d62:	e7fe      	b.n	8003d62 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d64:	f001 fec6 	bl	8005af4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003d68:	f3ef 8211 	mrs	r2, BASEPRI
 8003d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d70:	f383 8811 	msr	BASEPRI, r3
 8003d74:	f3bf 8f6f 	isb	sy
 8003d78:	f3bf 8f4f 	dsb	sy
 8003d7c:	61ba      	str	r2, [r7, #24]
 8003d7e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003d80:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d82:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d302      	bcc.n	8003d96 <xQueueGenericSendFromISR+0xb6>
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d12c      	bne.n	8003df0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	68b9      	ldr	r1, [r7, #8]
 8003da4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003da6:	f000 f90b 	bl	8003fc0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003daa:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003dae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003db2:	d112      	bne.n	8003dda <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d016      	beq.n	8003dea <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dbe:	3324      	adds	r3, #36	; 0x24
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f000 febb 	bl	8004b3c <xTaskRemoveFromEventList>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00e      	beq.n	8003dea <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00b      	beq.n	8003dea <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	e007      	b.n	8003dea <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003dda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003dde:	3301      	adds	r3, #1
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	b25a      	sxtb	r2, r3
 8003de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003dea:	2301      	movs	r3, #1
 8003dec:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003dee:	e001      	b.n	8003df4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003df0:	2300      	movs	r3, #0
 8003df2:	637b      	str	r3, [r7, #52]	; 0x34
 8003df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3738      	adds	r7, #56	; 0x38
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b08c      	sub	sp, #48	; 0x30
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003e14:	2300      	movs	r3, #0
 8003e16:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d109      	bne.n	8003e36 <xQueueReceive+0x2e>
	__asm volatile
 8003e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e26:	f383 8811 	msr	BASEPRI, r3
 8003e2a:	f3bf 8f6f 	isb	sy
 8003e2e:	f3bf 8f4f 	dsb	sy
 8003e32:	623b      	str	r3, [r7, #32]
 8003e34:	e7fe      	b.n	8003e34 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d103      	bne.n	8003e44 <xQueueReceive+0x3c>
 8003e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <xQueueReceive+0x40>
 8003e44:	2301      	movs	r3, #1
 8003e46:	e000      	b.n	8003e4a <xQueueReceive+0x42>
 8003e48:	2300      	movs	r3, #0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d109      	bne.n	8003e62 <xQueueReceive+0x5a>
 8003e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e52:	f383 8811 	msr	BASEPRI, r3
 8003e56:	f3bf 8f6f 	isb	sy
 8003e5a:	f3bf 8f4f 	dsb	sy
 8003e5e:	61fb      	str	r3, [r7, #28]
 8003e60:	e7fe      	b.n	8003e60 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e62:	f001 f821 	bl	8004ea8 <xTaskGetSchedulerState>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d102      	bne.n	8003e72 <xQueueReceive+0x6a>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <xQueueReceive+0x6e>
 8003e72:	2301      	movs	r3, #1
 8003e74:	e000      	b.n	8003e78 <xQueueReceive+0x70>
 8003e76:	2300      	movs	r3, #0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d109      	bne.n	8003e90 <xQueueReceive+0x88>
 8003e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e80:	f383 8811 	msr	BASEPRI, r3
 8003e84:	f3bf 8f6f 	isb	sy
 8003e88:	f3bf 8f4f 	dsb	sy
 8003e8c:	61bb      	str	r3, [r7, #24]
 8003e8e:	e7fe      	b.n	8003e8e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e90:	f001 fd54 	bl	800593c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d01f      	beq.n	8003ee0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ea0:	68b9      	ldr	r1, [r7, #8]
 8003ea2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ea4:	f000 f8f6 	bl	8004094 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	1e5a      	subs	r2, r3, #1
 8003eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eae:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00f      	beq.n	8003ed8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eba:	3310      	adds	r3, #16
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 fe3d 	bl	8004b3c <xTaskRemoveFromEventList>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d007      	beq.n	8003ed8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003ec8:	4b3c      	ldr	r3, [pc, #240]	; (8003fbc <xQueueReceive+0x1b4>)
 8003eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003ed8:	f001 fd5e 	bl	8005998 <vPortExitCritical>
				return pdPASS;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e069      	b.n	8003fb4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d103      	bne.n	8003eee <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ee6:	f001 fd57 	bl	8005998 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003eea:	2300      	movs	r3, #0
 8003eec:	e062      	b.n	8003fb4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d106      	bne.n	8003f02 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ef4:	f107 0310 	add.w	r3, r7, #16
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 fe81 	bl	8004c00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003efe:	2301      	movs	r3, #1
 8003f00:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f02:	f001 fd49 	bl	8005998 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f06:	f000 fbfd 	bl	8004704 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f0a:	f001 fd17 	bl	800593c <vPortEnterCritical>
 8003f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f14:	b25b      	sxtb	r3, r3
 8003f16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f1a:	d103      	bne.n	8003f24 <xQueueReceive+0x11c>
 8003f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f2a:	b25b      	sxtb	r3, r3
 8003f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f30:	d103      	bne.n	8003f3a <xQueueReceive+0x132>
 8003f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f3a:	f001 fd2d 	bl	8005998 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f3e:	1d3a      	adds	r2, r7, #4
 8003f40:	f107 0310 	add.w	r3, r7, #16
 8003f44:	4611      	mov	r1, r2
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fe70 	bl	8004c2c <xTaskCheckForTimeOut>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d123      	bne.n	8003f9a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f54:	f000 f916 	bl	8004184 <prvIsQueueEmpty>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d017      	beq.n	8003f8e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f60:	3324      	adds	r3, #36	; 0x24
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	4611      	mov	r1, r2
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 fd9a 	bl	8004aa0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f6e:	f000 f8b7 	bl	80040e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f72:	f000 fbd5 	bl	8004720 <xTaskResumeAll>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d189      	bne.n	8003e90 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003f7c:	4b0f      	ldr	r3, [pc, #60]	; (8003fbc <xQueueReceive+0x1b4>)
 8003f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	f3bf 8f4f 	dsb	sy
 8003f88:	f3bf 8f6f 	isb	sy
 8003f8c:	e780      	b.n	8003e90 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003f8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f90:	f000 f8a6 	bl	80040e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f94:	f000 fbc4 	bl	8004720 <xTaskResumeAll>
 8003f98:	e77a      	b.n	8003e90 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003f9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f9c:	f000 f8a0 	bl	80040e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003fa0:	f000 fbbe 	bl	8004720 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fa6:	f000 f8ed 	bl	8004184 <prvIsQueueEmpty>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f43f af6f 	beq.w	8003e90 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003fb2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3730      	adds	r7, #48	; 0x30
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	e000ed04 	.word	0xe000ed04

08003fc0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10d      	bne.n	8003ffa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d14d      	bne.n	8004082 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 ff7a 	bl	8004ee4 <xTaskPriorityDisinherit>
 8003ff0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	609a      	str	r2, [r3, #8]
 8003ff8:	e043      	b.n	8004082 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d119      	bne.n	8004034 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6858      	ldr	r0, [r3, #4]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004008:	461a      	mov	r2, r3
 800400a:	68b9      	ldr	r1, [r7, #8]
 800400c:	f001 ffaa 	bl	8005f64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004018:	441a      	add	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	429a      	cmp	r2, r3
 8004028:	d32b      	bcc.n	8004082 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	605a      	str	r2, [r3, #4]
 8004032:	e026      	b.n	8004082 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	68d8      	ldr	r0, [r3, #12]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403c:	461a      	mov	r2, r3
 800403e:	68b9      	ldr	r1, [r7, #8]
 8004040:	f001 ff90 	bl	8005f64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	68da      	ldr	r2, [r3, #12]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404c:	425b      	negs	r3, r3
 800404e:	441a      	add	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	68da      	ldr	r2, [r3, #12]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d207      	bcs.n	8004070 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004068:	425b      	negs	r3, r3
 800406a:	441a      	add	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b02      	cmp	r3, #2
 8004074:	d105      	bne.n	8004082 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d002      	beq.n	8004082 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	3b01      	subs	r3, #1
 8004080:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800408a:	697b      	ldr	r3, [r7, #20]
}
 800408c:	4618      	mov	r0, r3
 800408e:	3718      	adds	r7, #24
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d018      	beq.n	80040d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	68da      	ldr	r2, [r3, #12]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	441a      	add	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68da      	ldr	r2, [r3, #12]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d303      	bcc.n	80040c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68d9      	ldr	r1, [r3, #12]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d0:	461a      	mov	r2, r3
 80040d2:	6838      	ldr	r0, [r7, #0]
 80040d4:	f001 ff46 	bl	8005f64 <memcpy>
	}
}
 80040d8:	bf00      	nop
 80040da:	3708      	adds	r7, #8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80040e8:	f001 fc28 	bl	800593c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040f4:	e011      	b.n	800411a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d012      	beq.n	8004124 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	3324      	adds	r3, #36	; 0x24
 8004102:	4618      	mov	r0, r3
 8004104:	f000 fd1a 	bl	8004b3c <xTaskRemoveFromEventList>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800410e:	f000 fded 	bl	8004cec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004112:	7bfb      	ldrb	r3, [r7, #15]
 8004114:	3b01      	subs	r3, #1
 8004116:	b2db      	uxtb	r3, r3
 8004118:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800411a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800411e:	2b00      	cmp	r3, #0
 8004120:	dce9      	bgt.n	80040f6 <prvUnlockQueue+0x16>
 8004122:	e000      	b.n	8004126 <prvUnlockQueue+0x46>
					break;
 8004124:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	22ff      	movs	r2, #255	; 0xff
 800412a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800412e:	f001 fc33 	bl	8005998 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004132:	f001 fc03 	bl	800593c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800413c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800413e:	e011      	b.n	8004164 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d012      	beq.n	800416e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3310      	adds	r3, #16
 800414c:	4618      	mov	r0, r3
 800414e:	f000 fcf5 	bl	8004b3c <xTaskRemoveFromEventList>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004158:	f000 fdc8 	bl	8004cec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800415c:	7bbb      	ldrb	r3, [r7, #14]
 800415e:	3b01      	subs	r3, #1
 8004160:	b2db      	uxtb	r3, r3
 8004162:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004164:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004168:	2b00      	cmp	r3, #0
 800416a:	dce9      	bgt.n	8004140 <prvUnlockQueue+0x60>
 800416c:	e000      	b.n	8004170 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800416e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	22ff      	movs	r2, #255	; 0xff
 8004174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004178:	f001 fc0e 	bl	8005998 <vPortExitCritical>
}
 800417c:	bf00      	nop
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800418c:	f001 fbd6 	bl	800593c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004194:	2b00      	cmp	r3, #0
 8004196:	d102      	bne.n	800419e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004198:	2301      	movs	r3, #1
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	e001      	b.n	80041a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800419e:	2300      	movs	r3, #0
 80041a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041a2:	f001 fbf9 	bl	8005998 <vPortExitCritical>

	return xReturn;
 80041a6:	68fb      	ldr	r3, [r7, #12]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041b8:	f001 fbc0 	bl	800593c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d102      	bne.n	80041ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80041c8:	2301      	movs	r3, #1
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	e001      	b.n	80041d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80041ce:	2300      	movs	r3, #0
 80041d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041d2:	f001 fbe1 	bl	8005998 <vPortExitCritical>

	return xReturn;
 80041d6:	68fb      	ldr	r3, [r7, #12]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80041ea:	2300      	movs	r3, #0
 80041ec:	60fb      	str	r3, [r7, #12]
 80041ee:	e014      	b.n	800421a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80041f0:	4a0e      	ldr	r2, [pc, #56]	; (800422c <vQueueAddToRegistry+0x4c>)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10b      	bne.n	8004214 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80041fc:	490b      	ldr	r1, [pc, #44]	; (800422c <vQueueAddToRegistry+0x4c>)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004206:	4a09      	ldr	r2, [pc, #36]	; (800422c <vQueueAddToRegistry+0x4c>)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	4413      	add	r3, r2
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004212:	e005      	b.n	8004220 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	3301      	adds	r3, #1
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2b07      	cmp	r3, #7
 800421e:	d9e7      	bls.n	80041f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004220:	bf00      	nop
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	20001a40 	.word	0x20001a40

08004230 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004240:	f001 fb7c 	bl	800593c <vPortEnterCritical>
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800424a:	b25b      	sxtb	r3, r3
 800424c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004250:	d103      	bne.n	800425a <vQueueWaitForMessageRestricted+0x2a>
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004260:	b25b      	sxtb	r3, r3
 8004262:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004266:	d103      	bne.n	8004270 <vQueueWaitForMessageRestricted+0x40>
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004270:	f001 fb92 	bl	8005998 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004278:	2b00      	cmp	r3, #0
 800427a:	d106      	bne.n	800428a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	3324      	adds	r3, #36	; 0x24
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	68b9      	ldr	r1, [r7, #8]
 8004284:	4618      	mov	r0, r3
 8004286:	f000 fc2f 	bl	8004ae8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800428a:	6978      	ldr	r0, [r7, #20]
 800428c:	f7ff ff28 	bl	80040e0 <prvUnlockQueue>
	}
 8004290:	bf00      	nop
 8004292:	3718      	adds	r7, #24
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004298:	b580      	push	{r7, lr}
 800429a:	b08e      	sub	sp, #56	; 0x38
 800429c:	af04      	add	r7, sp, #16
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
 80042a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80042a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d109      	bne.n	80042c0 <xTaskCreateStatic+0x28>
 80042ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b0:	f383 8811 	msr	BASEPRI, r3
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	f3bf 8f4f 	dsb	sy
 80042bc:	623b      	str	r3, [r7, #32]
 80042be:	e7fe      	b.n	80042be <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80042c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d109      	bne.n	80042da <xTaskCreateStatic+0x42>
 80042c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ca:	f383 8811 	msr	BASEPRI, r3
 80042ce:	f3bf 8f6f 	isb	sy
 80042d2:	f3bf 8f4f 	dsb	sy
 80042d6:	61fb      	str	r3, [r7, #28]
 80042d8:	e7fe      	b.n	80042d8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80042da:	235c      	movs	r3, #92	; 0x5c
 80042dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	2b5c      	cmp	r3, #92	; 0x5c
 80042e2:	d009      	beq.n	80042f8 <xTaskCreateStatic+0x60>
 80042e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e8:	f383 8811 	msr	BASEPRI, r3
 80042ec:	f3bf 8f6f 	isb	sy
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	61bb      	str	r3, [r7, #24]
 80042f6:	e7fe      	b.n	80042f6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80042f8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80042fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d01e      	beq.n	800433e <xTaskCreateStatic+0xa6>
 8004300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004302:	2b00      	cmp	r3, #0
 8004304:	d01b      	beq.n	800433e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004308:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800430e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004312:	2202      	movs	r2, #2
 8004314:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004318:	2300      	movs	r3, #0
 800431a:	9303      	str	r3, [sp, #12]
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	9302      	str	r3, [sp, #8]
 8004320:	f107 0314 	add.w	r3, r7, #20
 8004324:	9301      	str	r3, [sp, #4]
 8004326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	68b9      	ldr	r1, [r7, #8]
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 f850 	bl	80043d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004336:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004338:	f000 f8dc 	bl	80044f4 <prvAddNewTaskToReadyList>
 800433c:	e001      	b.n	8004342 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800433e:	2300      	movs	r3, #0
 8004340:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004342:	697b      	ldr	r3, [r7, #20]
	}
 8004344:	4618      	mov	r0, r3
 8004346:	3728      	adds	r7, #40	; 0x28
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800434c:	b580      	push	{r7, lr}
 800434e:	b08c      	sub	sp, #48	; 0x30
 8004350:	af04      	add	r7, sp, #16
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	603b      	str	r3, [r7, #0]
 8004358:	4613      	mov	r3, r2
 800435a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800435c:	88fb      	ldrh	r3, [r7, #6]
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4618      	mov	r0, r3
 8004362:	f001 fc05 	bl	8005b70 <pvPortMalloc>
 8004366:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00e      	beq.n	800438c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800436e:	205c      	movs	r0, #92	; 0x5c
 8004370:	f001 fbfe 	bl	8005b70 <pvPortMalloc>
 8004374:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d003      	beq.n	8004384 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	631a      	str	r2, [r3, #48]	; 0x30
 8004382:	e005      	b.n	8004390 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004384:	6978      	ldr	r0, [r7, #20]
 8004386:	f001 fcb5 	bl	8005cf4 <vPortFree>
 800438a:	e001      	b.n	8004390 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800438c:	2300      	movs	r3, #0
 800438e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d017      	beq.n	80043c6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800439e:	88fa      	ldrh	r2, [r7, #6]
 80043a0:	2300      	movs	r3, #0
 80043a2:	9303      	str	r3, [sp, #12]
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	9302      	str	r3, [sp, #8]
 80043a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043aa:	9301      	str	r3, [sp, #4]
 80043ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ae:	9300      	str	r3, [sp, #0]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	68b9      	ldr	r1, [r7, #8]
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 f80e 	bl	80043d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043ba:	69f8      	ldr	r0, [r7, #28]
 80043bc:	f000 f89a 	bl	80044f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80043c0:	2301      	movs	r3, #1
 80043c2:	61bb      	str	r3, [r7, #24]
 80043c4:	e002      	b.n	80043cc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80043c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043ca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80043cc:	69bb      	ldr	r3, [r7, #24]
	}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3720      	adds	r7, #32
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b088      	sub	sp, #32
 80043da:	af00      	add	r7, sp, #0
 80043dc:	60f8      	str	r0, [r7, #12]
 80043de:	60b9      	str	r1, [r7, #8]
 80043e0:	607a      	str	r2, [r7, #4]
 80043e2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80043e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	461a      	mov	r2, r3
 80043ee:	21a5      	movs	r1, #165	; 0xa5
 80043f0:	f001 fdc3 	bl	8005f7a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80043f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80043fe:	3b01      	subs	r3, #1
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	f023 0307 	bic.w	r3, r3, #7
 800440c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	2b00      	cmp	r3, #0
 8004416:	d009      	beq.n	800442c <prvInitialiseNewTask+0x56>
 8004418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441c:	f383 8811 	msr	BASEPRI, r3
 8004420:	f3bf 8f6f 	isb	sy
 8004424:	f3bf 8f4f 	dsb	sy
 8004428:	617b      	str	r3, [r7, #20]
 800442a:	e7fe      	b.n	800442a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d01f      	beq.n	8004472 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004432:	2300      	movs	r3, #0
 8004434:	61fb      	str	r3, [r7, #28]
 8004436:	e012      	b.n	800445e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	4413      	add	r3, r2
 800443e:	7819      	ldrb	r1, [r3, #0]
 8004440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	4413      	add	r3, r2
 8004446:	3334      	adds	r3, #52	; 0x34
 8004448:	460a      	mov	r2, r1
 800444a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	4413      	add	r3, r2
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d006      	beq.n	8004466 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	3301      	adds	r3, #1
 800445c:	61fb      	str	r3, [r7, #28]
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	2b0f      	cmp	r3, #15
 8004462:	d9e9      	bls.n	8004438 <prvInitialiseNewTask+0x62>
 8004464:	e000      	b.n	8004468 <prvInitialiseNewTask+0x92>
			{
				break;
 8004466:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004470:	e003      	b.n	800447a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800447a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447c:	2b37      	cmp	r3, #55	; 0x37
 800447e:	d901      	bls.n	8004484 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004480:	2337      	movs	r3, #55	; 0x37
 8004482:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004486:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004488:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800448a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800448e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004492:	2200      	movs	r2, #0
 8004494:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004498:	3304      	adds	r3, #4
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff f994 	bl	80037c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80044a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a2:	3318      	adds	r3, #24
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7ff f98f 	bl	80037c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80044aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80044b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80044c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c2:	2200      	movs	r2, #0
 80044c4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80044c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	68f9      	ldr	r1, [r7, #12]
 80044d2:	69b8      	ldr	r0, [r7, #24]
 80044d4:	f001 f90c 	bl	80056f0 <pxPortInitialiseStack>
 80044d8:	4602      	mov	r2, r0
 80044da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80044de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d002      	beq.n	80044ea <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80044e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044ea:	bf00      	nop
 80044ec:	3720      	adds	r7, #32
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80044fc:	f001 fa1e 	bl	800593c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004500:	4b2d      	ldr	r3, [pc, #180]	; (80045b8 <prvAddNewTaskToReadyList+0xc4>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3301      	adds	r3, #1
 8004506:	4a2c      	ldr	r2, [pc, #176]	; (80045b8 <prvAddNewTaskToReadyList+0xc4>)
 8004508:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800450a:	4b2c      	ldr	r3, [pc, #176]	; (80045bc <prvAddNewTaskToReadyList+0xc8>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d109      	bne.n	8004526 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004512:	4a2a      	ldr	r2, [pc, #168]	; (80045bc <prvAddNewTaskToReadyList+0xc8>)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004518:	4b27      	ldr	r3, [pc, #156]	; (80045b8 <prvAddNewTaskToReadyList+0xc4>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d110      	bne.n	8004542 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004520:	f000 fc08 	bl	8004d34 <prvInitialiseTaskLists>
 8004524:	e00d      	b.n	8004542 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004526:	4b26      	ldr	r3, [pc, #152]	; (80045c0 <prvAddNewTaskToReadyList+0xcc>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d109      	bne.n	8004542 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800452e:	4b23      	ldr	r3, [pc, #140]	; (80045bc <prvAddNewTaskToReadyList+0xc8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004538:	429a      	cmp	r2, r3
 800453a:	d802      	bhi.n	8004542 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800453c:	4a1f      	ldr	r2, [pc, #124]	; (80045bc <prvAddNewTaskToReadyList+0xc8>)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004542:	4b20      	ldr	r3, [pc, #128]	; (80045c4 <prvAddNewTaskToReadyList+0xd0>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	3301      	adds	r3, #1
 8004548:	4a1e      	ldr	r2, [pc, #120]	; (80045c4 <prvAddNewTaskToReadyList+0xd0>)
 800454a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800454c:	4b1d      	ldr	r3, [pc, #116]	; (80045c4 <prvAddNewTaskToReadyList+0xd0>)
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004558:	4b1b      	ldr	r3, [pc, #108]	; (80045c8 <prvAddNewTaskToReadyList+0xd4>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	429a      	cmp	r2, r3
 800455e:	d903      	bls.n	8004568 <prvAddNewTaskToReadyList+0x74>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004564:	4a18      	ldr	r2, [pc, #96]	; (80045c8 <prvAddNewTaskToReadyList+0xd4>)
 8004566:	6013      	str	r3, [r2, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456c:	4613      	mov	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4413      	add	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4a15      	ldr	r2, [pc, #84]	; (80045cc <prvAddNewTaskToReadyList+0xd8>)
 8004576:	441a      	add	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	3304      	adds	r3, #4
 800457c:	4619      	mov	r1, r3
 800457e:	4610      	mov	r0, r2
 8004580:	f7ff f92f 	bl	80037e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004584:	f001 fa08 	bl	8005998 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004588:	4b0d      	ldr	r3, [pc, #52]	; (80045c0 <prvAddNewTaskToReadyList+0xcc>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00e      	beq.n	80045ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004590:	4b0a      	ldr	r3, [pc, #40]	; (80045bc <prvAddNewTaskToReadyList+0xc8>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459a:	429a      	cmp	r2, r3
 800459c:	d207      	bcs.n	80045ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800459e:	4b0c      	ldr	r3, [pc, #48]	; (80045d0 <prvAddNewTaskToReadyList+0xdc>)
 80045a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	f3bf 8f4f 	dsb	sy
 80045aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045ae:	bf00      	nop
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	20000be4 	.word	0x20000be4
 80045bc:	20000710 	.word	0x20000710
 80045c0:	20000bf0 	.word	0x20000bf0
 80045c4:	20000c00 	.word	0x20000c00
 80045c8:	20000bec 	.word	0x20000bec
 80045cc:	20000714 	.word	0x20000714
 80045d0:	e000ed04 	.word	0xe000ed04

080045d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80045dc:	2300      	movs	r3, #0
 80045de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d016      	beq.n	8004614 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80045e6:	4b13      	ldr	r3, [pc, #76]	; (8004634 <vTaskDelay+0x60>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d009      	beq.n	8004602 <vTaskDelay+0x2e>
 80045ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f2:	f383 8811 	msr	BASEPRI, r3
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	60bb      	str	r3, [r7, #8]
 8004600:	e7fe      	b.n	8004600 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004602:	f000 f87f 	bl	8004704 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004606:	2100      	movs	r1, #0
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 fcd7 	bl	8004fbc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800460e:	f000 f887 	bl	8004720 <xTaskResumeAll>
 8004612:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d107      	bne.n	800462a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800461a:	4b07      	ldr	r3, [pc, #28]	; (8004638 <vTaskDelay+0x64>)
 800461c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	f3bf 8f4f 	dsb	sy
 8004626:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800462a:	bf00      	nop
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	20000c0c 	.word	0x20000c0c
 8004638:	e000ed04 	.word	0xe000ed04

0800463c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b08a      	sub	sp, #40	; 0x28
 8004640:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004642:	2300      	movs	r3, #0
 8004644:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004646:	2300      	movs	r3, #0
 8004648:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800464a:	463a      	mov	r2, r7
 800464c:	1d39      	adds	r1, r7, #4
 800464e:	f107 0308 	add.w	r3, r7, #8
 8004652:	4618      	mov	r0, r3
 8004654:	f7ff f864 	bl	8003720 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004658:	6839      	ldr	r1, [r7, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	9202      	str	r2, [sp, #8]
 8004660:	9301      	str	r3, [sp, #4]
 8004662:	2300      	movs	r3, #0
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	2300      	movs	r3, #0
 8004668:	460a      	mov	r2, r1
 800466a:	4920      	ldr	r1, [pc, #128]	; (80046ec <vTaskStartScheduler+0xb0>)
 800466c:	4820      	ldr	r0, [pc, #128]	; (80046f0 <vTaskStartScheduler+0xb4>)
 800466e:	f7ff fe13 	bl	8004298 <xTaskCreateStatic>
 8004672:	4602      	mov	r2, r0
 8004674:	4b1f      	ldr	r3, [pc, #124]	; (80046f4 <vTaskStartScheduler+0xb8>)
 8004676:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004678:	4b1e      	ldr	r3, [pc, #120]	; (80046f4 <vTaskStartScheduler+0xb8>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004680:	2301      	movs	r3, #1
 8004682:	617b      	str	r3, [r7, #20]
 8004684:	e001      	b.n	800468a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004686:	2300      	movs	r3, #0
 8004688:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d102      	bne.n	8004696 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004690:	f000 fce8 	bl	8005064 <xTimerCreateTimerTask>
 8004694:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d115      	bne.n	80046c8 <vTaskStartScheduler+0x8c>
 800469c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a0:	f383 8811 	msr	BASEPRI, r3
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80046ae:	4b12      	ldr	r3, [pc, #72]	; (80046f8 <vTaskStartScheduler+0xbc>)
 80046b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80046b6:	4b11      	ldr	r3, [pc, #68]	; (80046fc <vTaskStartScheduler+0xc0>)
 80046b8:	2201      	movs	r2, #1
 80046ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80046bc:	4b10      	ldr	r3, [pc, #64]	; (8004700 <vTaskStartScheduler+0xc4>)
 80046be:	2200      	movs	r2, #0
 80046c0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80046c2:	f001 f89d 	bl	8005800 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80046c6:	e00d      	b.n	80046e4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046ce:	d109      	bne.n	80046e4 <vTaskStartScheduler+0xa8>
 80046d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d4:	f383 8811 	msr	BASEPRI, r3
 80046d8:	f3bf 8f6f 	isb	sy
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	e7fe      	b.n	80046e2 <vTaskStartScheduler+0xa6>
}
 80046e4:	bf00      	nop
 80046e6:	3718      	adds	r7, #24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	08006024 	.word	0x08006024
 80046f0:	08004d05 	.word	0x08004d05
 80046f4:	20000c08 	.word	0x20000c08
 80046f8:	20000c04 	.word	0x20000c04
 80046fc:	20000bf0 	.word	0x20000bf0
 8004700:	20000be8 	.word	0x20000be8

08004704 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004708:	4b04      	ldr	r3, [pc, #16]	; (800471c <vTaskSuspendAll+0x18>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	3301      	adds	r3, #1
 800470e:	4a03      	ldr	r2, [pc, #12]	; (800471c <vTaskSuspendAll+0x18>)
 8004710:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004712:	bf00      	nop
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	20000c0c 	.word	0x20000c0c

08004720 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004726:	2300      	movs	r3, #0
 8004728:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800472a:	2300      	movs	r3, #0
 800472c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800472e:	4b41      	ldr	r3, [pc, #260]	; (8004834 <xTaskResumeAll+0x114>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d109      	bne.n	800474a <xTaskResumeAll+0x2a>
 8004736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473a:	f383 8811 	msr	BASEPRI, r3
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f3bf 8f4f 	dsb	sy
 8004746:	603b      	str	r3, [r7, #0]
 8004748:	e7fe      	b.n	8004748 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800474a:	f001 f8f7 	bl	800593c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800474e:	4b39      	ldr	r3, [pc, #228]	; (8004834 <xTaskResumeAll+0x114>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	3b01      	subs	r3, #1
 8004754:	4a37      	ldr	r2, [pc, #220]	; (8004834 <xTaskResumeAll+0x114>)
 8004756:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004758:	4b36      	ldr	r3, [pc, #216]	; (8004834 <xTaskResumeAll+0x114>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d162      	bne.n	8004826 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004760:	4b35      	ldr	r3, [pc, #212]	; (8004838 <xTaskResumeAll+0x118>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d05e      	beq.n	8004826 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004768:	e02f      	b.n	80047ca <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800476a:	4b34      	ldr	r3, [pc, #208]	; (800483c <xTaskResumeAll+0x11c>)
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	3318      	adds	r3, #24
 8004776:	4618      	mov	r0, r3
 8004778:	f7ff f890 	bl	800389c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	3304      	adds	r3, #4
 8004780:	4618      	mov	r0, r3
 8004782:	f7ff f88b 	bl	800389c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800478a:	4b2d      	ldr	r3, [pc, #180]	; (8004840 <xTaskResumeAll+0x120>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	429a      	cmp	r2, r3
 8004790:	d903      	bls.n	800479a <xTaskResumeAll+0x7a>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004796:	4a2a      	ldr	r2, [pc, #168]	; (8004840 <xTaskResumeAll+0x120>)
 8004798:	6013      	str	r3, [r2, #0]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800479e:	4613      	mov	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4413      	add	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4a27      	ldr	r2, [pc, #156]	; (8004844 <xTaskResumeAll+0x124>)
 80047a8:	441a      	add	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	3304      	adds	r3, #4
 80047ae:	4619      	mov	r1, r3
 80047b0:	4610      	mov	r0, r2
 80047b2:	f7ff f816 	bl	80037e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ba:	4b23      	ldr	r3, [pc, #140]	; (8004848 <xTaskResumeAll+0x128>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d302      	bcc.n	80047ca <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80047c4:	4b21      	ldr	r3, [pc, #132]	; (800484c <xTaskResumeAll+0x12c>)
 80047c6:	2201      	movs	r2, #1
 80047c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047ca:	4b1c      	ldr	r3, [pc, #112]	; (800483c <xTaskResumeAll+0x11c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1cb      	bne.n	800476a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80047d8:	f000 fb46 	bl	8004e68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80047dc:	4b1c      	ldr	r3, [pc, #112]	; (8004850 <xTaskResumeAll+0x130>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d010      	beq.n	800480a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80047e8:	f000 f846 	bl	8004878 <xTaskIncrementTick>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80047f2:	4b16      	ldr	r3, [pc, #88]	; (800484c <xTaskResumeAll+0x12c>)
 80047f4:	2201      	movs	r2, #1
 80047f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	3b01      	subs	r3, #1
 80047fc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1f1      	bne.n	80047e8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004804:	4b12      	ldr	r3, [pc, #72]	; (8004850 <xTaskResumeAll+0x130>)
 8004806:	2200      	movs	r2, #0
 8004808:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800480a:	4b10      	ldr	r3, [pc, #64]	; (800484c <xTaskResumeAll+0x12c>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d009      	beq.n	8004826 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004812:	2301      	movs	r3, #1
 8004814:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004816:	4b0f      	ldr	r3, [pc, #60]	; (8004854 <xTaskResumeAll+0x134>)
 8004818:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800481c:	601a      	str	r2, [r3, #0]
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004826:	f001 f8b7 	bl	8005998 <vPortExitCritical>

	return xAlreadyYielded;
 800482a:	68bb      	ldr	r3, [r7, #8]
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	20000c0c 	.word	0x20000c0c
 8004838:	20000be4 	.word	0x20000be4
 800483c:	20000ba4 	.word	0x20000ba4
 8004840:	20000bec 	.word	0x20000bec
 8004844:	20000714 	.word	0x20000714
 8004848:	20000710 	.word	0x20000710
 800484c:	20000bf8 	.word	0x20000bf8
 8004850:	20000bf4 	.word	0x20000bf4
 8004854:	e000ed04 	.word	0xe000ed04

08004858 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800485e:	4b05      	ldr	r3, [pc, #20]	; (8004874 <xTaskGetTickCount+0x1c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004864:	687b      	ldr	r3, [r7, #4]
}
 8004866:	4618      	mov	r0, r3
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	20000be8 	.word	0x20000be8

08004878 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800487e:	2300      	movs	r3, #0
 8004880:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004882:	4b4e      	ldr	r3, [pc, #312]	; (80049bc <xTaskIncrementTick+0x144>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	f040 8088 	bne.w	800499c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800488c:	4b4c      	ldr	r3, [pc, #304]	; (80049c0 <xTaskIncrementTick+0x148>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	3301      	adds	r3, #1
 8004892:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004894:	4a4a      	ldr	r2, [pc, #296]	; (80049c0 <xTaskIncrementTick+0x148>)
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d11f      	bne.n	80048e0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80048a0:	4b48      	ldr	r3, [pc, #288]	; (80049c4 <xTaskIncrementTick+0x14c>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d009      	beq.n	80048be <xTaskIncrementTick+0x46>
 80048aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ae:	f383 8811 	msr	BASEPRI, r3
 80048b2:	f3bf 8f6f 	isb	sy
 80048b6:	f3bf 8f4f 	dsb	sy
 80048ba:	603b      	str	r3, [r7, #0]
 80048bc:	e7fe      	b.n	80048bc <xTaskIncrementTick+0x44>
 80048be:	4b41      	ldr	r3, [pc, #260]	; (80049c4 <xTaskIncrementTick+0x14c>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	60fb      	str	r3, [r7, #12]
 80048c4:	4b40      	ldr	r3, [pc, #256]	; (80049c8 <xTaskIncrementTick+0x150>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a3e      	ldr	r2, [pc, #248]	; (80049c4 <xTaskIncrementTick+0x14c>)
 80048ca:	6013      	str	r3, [r2, #0]
 80048cc:	4a3e      	ldr	r2, [pc, #248]	; (80049c8 <xTaskIncrementTick+0x150>)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6013      	str	r3, [r2, #0]
 80048d2:	4b3e      	ldr	r3, [pc, #248]	; (80049cc <xTaskIncrementTick+0x154>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	3301      	adds	r3, #1
 80048d8:	4a3c      	ldr	r2, [pc, #240]	; (80049cc <xTaskIncrementTick+0x154>)
 80048da:	6013      	str	r3, [r2, #0]
 80048dc:	f000 fac4 	bl	8004e68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80048e0:	4b3b      	ldr	r3, [pc, #236]	; (80049d0 <xTaskIncrementTick+0x158>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d349      	bcc.n	800497e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048ea:	4b36      	ldr	r3, [pc, #216]	; (80049c4 <xTaskIncrementTick+0x14c>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d104      	bne.n	80048fe <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048f4:	4b36      	ldr	r3, [pc, #216]	; (80049d0 <xTaskIncrementTick+0x158>)
 80048f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048fa:	601a      	str	r2, [r3, #0]
					break;
 80048fc:	e03f      	b.n	800497e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048fe:	4b31      	ldr	r3, [pc, #196]	; (80049c4 <xTaskIncrementTick+0x14c>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	429a      	cmp	r2, r3
 8004914:	d203      	bcs.n	800491e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004916:	4a2e      	ldr	r2, [pc, #184]	; (80049d0 <xTaskIncrementTick+0x158>)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800491c:	e02f      	b.n	800497e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	3304      	adds	r3, #4
 8004922:	4618      	mov	r0, r3
 8004924:	f7fe ffba 	bl	800389c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492c:	2b00      	cmp	r3, #0
 800492e:	d004      	beq.n	800493a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	3318      	adds	r3, #24
 8004934:	4618      	mov	r0, r3
 8004936:	f7fe ffb1 	bl	800389c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800493e:	4b25      	ldr	r3, [pc, #148]	; (80049d4 <xTaskIncrementTick+0x15c>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	429a      	cmp	r2, r3
 8004944:	d903      	bls.n	800494e <xTaskIncrementTick+0xd6>
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494a:	4a22      	ldr	r2, [pc, #136]	; (80049d4 <xTaskIncrementTick+0x15c>)
 800494c:	6013      	str	r3, [r2, #0]
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004952:	4613      	mov	r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4413      	add	r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	4a1f      	ldr	r2, [pc, #124]	; (80049d8 <xTaskIncrementTick+0x160>)
 800495c:	441a      	add	r2, r3
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	3304      	adds	r3, #4
 8004962:	4619      	mov	r1, r3
 8004964:	4610      	mov	r0, r2
 8004966:	f7fe ff3c 	bl	80037e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800496e:	4b1b      	ldr	r3, [pc, #108]	; (80049dc <xTaskIncrementTick+0x164>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004974:	429a      	cmp	r2, r3
 8004976:	d3b8      	bcc.n	80048ea <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004978:	2301      	movs	r3, #1
 800497a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800497c:	e7b5      	b.n	80048ea <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800497e:	4b17      	ldr	r3, [pc, #92]	; (80049dc <xTaskIncrementTick+0x164>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004984:	4914      	ldr	r1, [pc, #80]	; (80049d8 <xTaskIncrementTick+0x160>)
 8004986:	4613      	mov	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	440b      	add	r3, r1
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d907      	bls.n	80049a6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8004996:	2301      	movs	r3, #1
 8004998:	617b      	str	r3, [r7, #20]
 800499a:	e004      	b.n	80049a6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800499c:	4b10      	ldr	r3, [pc, #64]	; (80049e0 <xTaskIncrementTick+0x168>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	3301      	adds	r3, #1
 80049a2:	4a0f      	ldr	r2, [pc, #60]	; (80049e0 <xTaskIncrementTick+0x168>)
 80049a4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80049a6:	4b0f      	ldr	r3, [pc, #60]	; (80049e4 <xTaskIncrementTick+0x16c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80049ae:	2301      	movs	r3, #1
 80049b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80049b2:	697b      	ldr	r3, [r7, #20]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3718      	adds	r7, #24
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	20000c0c 	.word	0x20000c0c
 80049c0:	20000be8 	.word	0x20000be8
 80049c4:	20000b9c 	.word	0x20000b9c
 80049c8:	20000ba0 	.word	0x20000ba0
 80049cc:	20000bfc 	.word	0x20000bfc
 80049d0:	20000c04 	.word	0x20000c04
 80049d4:	20000bec 	.word	0x20000bec
 80049d8:	20000714 	.word	0x20000714
 80049dc:	20000710 	.word	0x20000710
 80049e0:	20000bf4 	.word	0x20000bf4
 80049e4:	20000bf8 	.word	0x20000bf8

080049e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80049ee:	4b27      	ldr	r3, [pc, #156]	; (8004a8c <vTaskSwitchContext+0xa4>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80049f6:	4b26      	ldr	r3, [pc, #152]	; (8004a90 <vTaskSwitchContext+0xa8>)
 80049f8:	2201      	movs	r2, #1
 80049fa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80049fc:	e040      	b.n	8004a80 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80049fe:	4b24      	ldr	r3, [pc, #144]	; (8004a90 <vTaskSwitchContext+0xa8>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a04:	4b23      	ldr	r3, [pc, #140]	; (8004a94 <vTaskSwitchContext+0xac>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	60fb      	str	r3, [r7, #12]
 8004a0a:	e00f      	b.n	8004a2c <vTaskSwitchContext+0x44>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d109      	bne.n	8004a26 <vTaskSwitchContext+0x3e>
 8004a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a16:	f383 8811 	msr	BASEPRI, r3
 8004a1a:	f3bf 8f6f 	isb	sy
 8004a1e:	f3bf 8f4f 	dsb	sy
 8004a22:	607b      	str	r3, [r7, #4]
 8004a24:	e7fe      	b.n	8004a24 <vTaskSwitchContext+0x3c>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	60fb      	str	r3, [r7, #12]
 8004a2c:	491a      	ldr	r1, [pc, #104]	; (8004a98 <vTaskSwitchContext+0xb0>)
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	4613      	mov	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4413      	add	r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	440b      	add	r3, r1
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d0e5      	beq.n	8004a0c <vTaskSwitchContext+0x24>
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	4613      	mov	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4a13      	ldr	r2, [pc, #76]	; (8004a98 <vTaskSwitchContext+0xb0>)
 8004a4c:	4413      	add	r3, r2
 8004a4e:	60bb      	str	r3, [r7, #8]
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	605a      	str	r2, [r3, #4]
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	685a      	ldr	r2, [r3, #4]
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	3308      	adds	r3, #8
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d104      	bne.n	8004a70 <vTaskSwitchContext+0x88>
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	605a      	str	r2, [r3, #4]
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	4a09      	ldr	r2, [pc, #36]	; (8004a9c <vTaskSwitchContext+0xb4>)
 8004a78:	6013      	str	r3, [r2, #0]
 8004a7a:	4a06      	ldr	r2, [pc, #24]	; (8004a94 <vTaskSwitchContext+0xac>)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6013      	str	r3, [r2, #0]
}
 8004a80:	bf00      	nop
 8004a82:	3714      	adds	r7, #20
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	20000c0c 	.word	0x20000c0c
 8004a90:	20000bf8 	.word	0x20000bf8
 8004a94:	20000bec 	.word	0x20000bec
 8004a98:	20000714 	.word	0x20000714
 8004a9c:	20000710 	.word	0x20000710

08004aa0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d109      	bne.n	8004ac4 <vTaskPlaceOnEventList+0x24>
 8004ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab4:	f383 8811 	msr	BASEPRI, r3
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	60fb      	str	r3, [r7, #12]
 8004ac2:	e7fe      	b.n	8004ac2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ac4:	4b07      	ldr	r3, [pc, #28]	; (8004ae4 <vTaskPlaceOnEventList+0x44>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	3318      	adds	r3, #24
 8004aca:	4619      	mov	r1, r3
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f7fe feac 	bl	800382a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ad2:	2101      	movs	r1, #1
 8004ad4:	6838      	ldr	r0, [r7, #0]
 8004ad6:	f000 fa71 	bl	8004fbc <prvAddCurrentTaskToDelayedList>
}
 8004ada:	bf00      	nop
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20000710 	.word	0x20000710

08004ae8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d109      	bne.n	8004b0e <vTaskPlaceOnEventListRestricted+0x26>
 8004afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	617b      	str	r3, [r7, #20]
 8004b0c:	e7fe      	b.n	8004b0c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b0e:	4b0a      	ldr	r3, [pc, #40]	; (8004b38 <vTaskPlaceOnEventListRestricted+0x50>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3318      	adds	r3, #24
 8004b14:	4619      	mov	r1, r3
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f7fe fe63 	bl	80037e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d002      	beq.n	8004b28 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004b22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b26:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004b28:	6879      	ldr	r1, [r7, #4]
 8004b2a:	68b8      	ldr	r0, [r7, #8]
 8004b2c:	f000 fa46 	bl	8004fbc <prvAddCurrentTaskToDelayedList>
	}
 8004b30:	bf00      	nop
 8004b32:	3718      	adds	r7, #24
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	20000710 	.word	0x20000710

08004b3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b086      	sub	sp, #24
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d109      	bne.n	8004b66 <xTaskRemoveFromEventList+0x2a>
 8004b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b56:	f383 8811 	msr	BASEPRI, r3
 8004b5a:	f3bf 8f6f 	isb	sy
 8004b5e:	f3bf 8f4f 	dsb	sy
 8004b62:	60fb      	str	r3, [r7, #12]
 8004b64:	e7fe      	b.n	8004b64 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	3318      	adds	r3, #24
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7fe fe96 	bl	800389c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b70:	4b1d      	ldr	r3, [pc, #116]	; (8004be8 <xTaskRemoveFromEventList+0xac>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d11d      	bne.n	8004bb4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	3304      	adds	r3, #4
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7fe fe8d 	bl	800389c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b86:	4b19      	ldr	r3, [pc, #100]	; (8004bec <xTaskRemoveFromEventList+0xb0>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d903      	bls.n	8004b96 <xTaskRemoveFromEventList+0x5a>
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b92:	4a16      	ldr	r2, [pc, #88]	; (8004bec <xTaskRemoveFromEventList+0xb0>)
 8004b94:	6013      	str	r3, [r2, #0]
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4a13      	ldr	r2, [pc, #76]	; (8004bf0 <xTaskRemoveFromEventList+0xb4>)
 8004ba4:	441a      	add	r2, r3
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	3304      	adds	r3, #4
 8004baa:	4619      	mov	r1, r3
 8004bac:	4610      	mov	r0, r2
 8004bae:	f7fe fe18 	bl	80037e2 <vListInsertEnd>
 8004bb2:	e005      	b.n	8004bc0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	3318      	adds	r3, #24
 8004bb8:	4619      	mov	r1, r3
 8004bba:	480e      	ldr	r0, [pc, #56]	; (8004bf4 <xTaskRemoveFromEventList+0xb8>)
 8004bbc:	f7fe fe11 	bl	80037e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bc4:	4b0c      	ldr	r3, [pc, #48]	; (8004bf8 <xTaskRemoveFromEventList+0xbc>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d905      	bls.n	8004bda <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004bd2:	4b0a      	ldr	r3, [pc, #40]	; (8004bfc <xTaskRemoveFromEventList+0xc0>)
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	e001      	b.n	8004bde <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004bde:	697b      	ldr	r3, [r7, #20]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3718      	adds	r7, #24
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	20000c0c 	.word	0x20000c0c
 8004bec:	20000bec 	.word	0x20000bec
 8004bf0:	20000714 	.word	0x20000714
 8004bf4:	20000ba4 	.word	0x20000ba4
 8004bf8:	20000710 	.word	0x20000710
 8004bfc:	20000bf8 	.word	0x20000bf8

08004c00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c08:	4b06      	ldr	r3, [pc, #24]	; (8004c24 <vTaskInternalSetTimeOutState+0x24>)
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c10:	4b05      	ldr	r3, [pc, #20]	; (8004c28 <vTaskInternalSetTimeOutState+0x28>)
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	605a      	str	r2, [r3, #4]
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr
 8004c24:	20000bfc 	.word	0x20000bfc
 8004c28:	20000be8 	.word	0x20000be8

08004c2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b088      	sub	sp, #32
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d109      	bne.n	8004c50 <xTaskCheckForTimeOut+0x24>
 8004c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c40:	f383 8811 	msr	BASEPRI, r3
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	613b      	str	r3, [r7, #16]
 8004c4e:	e7fe      	b.n	8004c4e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d109      	bne.n	8004c6a <xTaskCheckForTimeOut+0x3e>
 8004c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5a:	f383 8811 	msr	BASEPRI, r3
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f3bf 8f4f 	dsb	sy
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	e7fe      	b.n	8004c68 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004c6a:	f000 fe67 	bl	800593c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004c6e:	4b1d      	ldr	r3, [pc, #116]	; (8004ce4 <xTaskCheckForTimeOut+0xb8>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c86:	d102      	bne.n	8004c8e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	61fb      	str	r3, [r7, #28]
 8004c8c:	e023      	b.n	8004cd6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	4b15      	ldr	r3, [pc, #84]	; (8004ce8 <xTaskCheckForTimeOut+0xbc>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d007      	beq.n	8004caa <xTaskCheckForTimeOut+0x7e>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d302      	bcc.n	8004caa <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	61fb      	str	r3, [r7, #28]
 8004ca8:	e015      	b.n	8004cd6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d20b      	bcs.n	8004ccc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	1ad2      	subs	r2, r2, r3
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7ff ff9d 	bl	8004c00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	61fb      	str	r3, [r7, #28]
 8004cca:	e004      	b.n	8004cd6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004cd6:	f000 fe5f 	bl	8005998 <vPortExitCritical>

	return xReturn;
 8004cda:	69fb      	ldr	r3, [r7, #28]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3720      	adds	r7, #32
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	20000be8 	.word	0x20000be8
 8004ce8:	20000bfc 	.word	0x20000bfc

08004cec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004cf0:	4b03      	ldr	r3, [pc, #12]	; (8004d00 <vTaskMissedYield+0x14>)
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	601a      	str	r2, [r3, #0]
}
 8004cf6:	bf00      	nop
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	20000bf8 	.word	0x20000bf8

08004d04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d0c:	f000 f852 	bl	8004db4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d10:	4b06      	ldr	r3, [pc, #24]	; (8004d2c <prvIdleTask+0x28>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d9f9      	bls.n	8004d0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004d18:	4b05      	ldr	r3, [pc, #20]	; (8004d30 <prvIdleTask+0x2c>)
 8004d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d1e:	601a      	str	r2, [r3, #0]
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004d28:	e7f0      	b.n	8004d0c <prvIdleTask+0x8>
 8004d2a:	bf00      	nop
 8004d2c:	20000714 	.word	0x20000714
 8004d30:	e000ed04 	.word	0xe000ed04

08004d34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	607b      	str	r3, [r7, #4]
 8004d3e:	e00c      	b.n	8004d5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	4613      	mov	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4413      	add	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4a12      	ldr	r2, [pc, #72]	; (8004d94 <prvInitialiseTaskLists+0x60>)
 8004d4c:	4413      	add	r3, r2
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fe fd1a 	bl	8003788 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	3301      	adds	r3, #1
 8004d58:	607b      	str	r3, [r7, #4]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b37      	cmp	r3, #55	; 0x37
 8004d5e:	d9ef      	bls.n	8004d40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d60:	480d      	ldr	r0, [pc, #52]	; (8004d98 <prvInitialiseTaskLists+0x64>)
 8004d62:	f7fe fd11 	bl	8003788 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d66:	480d      	ldr	r0, [pc, #52]	; (8004d9c <prvInitialiseTaskLists+0x68>)
 8004d68:	f7fe fd0e 	bl	8003788 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d6c:	480c      	ldr	r0, [pc, #48]	; (8004da0 <prvInitialiseTaskLists+0x6c>)
 8004d6e:	f7fe fd0b 	bl	8003788 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d72:	480c      	ldr	r0, [pc, #48]	; (8004da4 <prvInitialiseTaskLists+0x70>)
 8004d74:	f7fe fd08 	bl	8003788 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d78:	480b      	ldr	r0, [pc, #44]	; (8004da8 <prvInitialiseTaskLists+0x74>)
 8004d7a:	f7fe fd05 	bl	8003788 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d7e:	4b0b      	ldr	r3, [pc, #44]	; (8004dac <prvInitialiseTaskLists+0x78>)
 8004d80:	4a05      	ldr	r2, [pc, #20]	; (8004d98 <prvInitialiseTaskLists+0x64>)
 8004d82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d84:	4b0a      	ldr	r3, [pc, #40]	; (8004db0 <prvInitialiseTaskLists+0x7c>)
 8004d86:	4a05      	ldr	r2, [pc, #20]	; (8004d9c <prvInitialiseTaskLists+0x68>)
 8004d88:	601a      	str	r2, [r3, #0]
}
 8004d8a:	bf00      	nop
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	20000714 	.word	0x20000714
 8004d98:	20000b74 	.word	0x20000b74
 8004d9c:	20000b88 	.word	0x20000b88
 8004da0:	20000ba4 	.word	0x20000ba4
 8004da4:	20000bb8 	.word	0x20000bb8
 8004da8:	20000bd0 	.word	0x20000bd0
 8004dac:	20000b9c 	.word	0x20000b9c
 8004db0:	20000ba0 	.word	0x20000ba0

08004db4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004dba:	e019      	b.n	8004df0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004dbc:	f000 fdbe 	bl	800593c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dc0:	4b0f      	ldr	r3, [pc, #60]	; (8004e00 <prvCheckTasksWaitingTermination+0x4c>)
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	3304      	adds	r3, #4
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7fe fd65 	bl	800389c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004dd2:	4b0c      	ldr	r3, [pc, #48]	; (8004e04 <prvCheckTasksWaitingTermination+0x50>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	4a0a      	ldr	r2, [pc, #40]	; (8004e04 <prvCheckTasksWaitingTermination+0x50>)
 8004dda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ddc:	4b0a      	ldr	r3, [pc, #40]	; (8004e08 <prvCheckTasksWaitingTermination+0x54>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	3b01      	subs	r3, #1
 8004de2:	4a09      	ldr	r2, [pc, #36]	; (8004e08 <prvCheckTasksWaitingTermination+0x54>)
 8004de4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004de6:	f000 fdd7 	bl	8005998 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f80e 	bl	8004e0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004df0:	4b05      	ldr	r3, [pc, #20]	; (8004e08 <prvCheckTasksWaitingTermination+0x54>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1e1      	bne.n	8004dbc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004df8:	bf00      	nop
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	20000bb8 	.word	0x20000bb8
 8004e04:	20000be4 	.word	0x20000be4
 8004e08:	20000bcc 	.word	0x20000bcc

08004e0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d108      	bne.n	8004e30 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 ff66 	bl	8005cf4 <vPortFree>
				vPortFree( pxTCB );
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 ff63 	bl	8005cf4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e2e:	e017      	b.n	8004e60 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d103      	bne.n	8004e42 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 ff5a 	bl	8005cf4 <vPortFree>
	}
 8004e40:	e00e      	b.n	8004e60 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d009      	beq.n	8004e60 <prvDeleteTCB+0x54>
 8004e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e50:	f383 8811 	msr	BASEPRI, r3
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	60fb      	str	r3, [r7, #12]
 8004e5e:	e7fe      	b.n	8004e5e <prvDeleteTCB+0x52>
	}
 8004e60:	bf00      	nop
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e6e:	4b0c      	ldr	r3, [pc, #48]	; (8004ea0 <prvResetNextTaskUnblockTime+0x38>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d104      	bne.n	8004e82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e78:	4b0a      	ldr	r3, [pc, #40]	; (8004ea4 <prvResetNextTaskUnblockTime+0x3c>)
 8004e7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e80:	e008      	b.n	8004e94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e82:	4b07      	ldr	r3, [pc, #28]	; (8004ea0 <prvResetNextTaskUnblockTime+0x38>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	4a04      	ldr	r2, [pc, #16]	; (8004ea4 <prvResetNextTaskUnblockTime+0x3c>)
 8004e92:	6013      	str	r3, [r2, #0]
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr
 8004ea0:	20000b9c 	.word	0x20000b9c
 8004ea4:	20000c04 	.word	0x20000c04

08004ea8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004eae:	4b0b      	ldr	r3, [pc, #44]	; (8004edc <xTaskGetSchedulerState+0x34>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d102      	bne.n	8004ebc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	607b      	str	r3, [r7, #4]
 8004eba:	e008      	b.n	8004ece <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ebc:	4b08      	ldr	r3, [pc, #32]	; (8004ee0 <xTaskGetSchedulerState+0x38>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d102      	bne.n	8004eca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	607b      	str	r3, [r7, #4]
 8004ec8:	e001      	b.n	8004ece <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004ece:	687b      	ldr	r3, [r7, #4]
	}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	20000bf0 	.word	0x20000bf0
 8004ee0:	20000c0c 	.word	0x20000c0c

08004ee4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d054      	beq.n	8004fa4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004efa:	4b2d      	ldr	r3, [pc, #180]	; (8004fb0 <xTaskPriorityDisinherit+0xcc>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d009      	beq.n	8004f18 <xTaskPriorityDisinherit+0x34>
 8004f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f08:	f383 8811 	msr	BASEPRI, r3
 8004f0c:	f3bf 8f6f 	isb	sy
 8004f10:	f3bf 8f4f 	dsb	sy
 8004f14:	60fb      	str	r3, [r7, #12]
 8004f16:	e7fe      	b.n	8004f16 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d109      	bne.n	8004f34 <xTaskPriorityDisinherit+0x50>
 8004f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f24:	f383 8811 	msr	BASEPRI, r3
 8004f28:	f3bf 8f6f 	isb	sy
 8004f2c:	f3bf 8f4f 	dsb	sy
 8004f30:	60bb      	str	r3, [r7, #8]
 8004f32:	e7fe      	b.n	8004f32 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f38:	1e5a      	subs	r2, r3, #1
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d02c      	beq.n	8004fa4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d128      	bne.n	8004fa4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	3304      	adds	r3, #4
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7fe fca0 	bl	800389c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f68:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f74:	4b0f      	ldr	r3, [pc, #60]	; (8004fb4 <xTaskPriorityDisinherit+0xd0>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d903      	bls.n	8004f84 <xTaskPriorityDisinherit+0xa0>
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f80:	4a0c      	ldr	r2, [pc, #48]	; (8004fb4 <xTaskPriorityDisinherit+0xd0>)
 8004f82:	6013      	str	r3, [r2, #0]
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f88:	4613      	mov	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	4a09      	ldr	r2, [pc, #36]	; (8004fb8 <xTaskPriorityDisinherit+0xd4>)
 8004f92:	441a      	add	r2, r3
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	3304      	adds	r3, #4
 8004f98:	4619      	mov	r1, r3
 8004f9a:	4610      	mov	r0, r2
 8004f9c:	f7fe fc21 	bl	80037e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004fa4:	697b      	ldr	r3, [r7, #20]
	}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3718      	adds	r7, #24
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	20000710 	.word	0x20000710
 8004fb4:	20000bec 	.word	0x20000bec
 8004fb8:	20000714 	.word	0x20000714

08004fbc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004fc6:	4b21      	ldr	r3, [pc, #132]	; (800504c <prvAddCurrentTaskToDelayedList+0x90>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fcc:	4b20      	ldr	r3, [pc, #128]	; (8005050 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	3304      	adds	r3, #4
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7fe fc62 	bl	800389c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fde:	d10a      	bne.n	8004ff6 <prvAddCurrentTaskToDelayedList+0x3a>
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d007      	beq.n	8004ff6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fe6:	4b1a      	ldr	r3, [pc, #104]	; (8005050 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	3304      	adds	r3, #4
 8004fec:	4619      	mov	r1, r3
 8004fee:	4819      	ldr	r0, [pc, #100]	; (8005054 <prvAddCurrentTaskToDelayedList+0x98>)
 8004ff0:	f7fe fbf7 	bl	80037e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ff4:	e026      	b.n	8005044 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ffe:	4b14      	ldr	r3, [pc, #80]	; (8005050 <prvAddCurrentTaskToDelayedList+0x94>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	429a      	cmp	r2, r3
 800500c:	d209      	bcs.n	8005022 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800500e:	4b12      	ldr	r3, [pc, #72]	; (8005058 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	4b0f      	ldr	r3, [pc, #60]	; (8005050 <prvAddCurrentTaskToDelayedList+0x94>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	3304      	adds	r3, #4
 8005018:	4619      	mov	r1, r3
 800501a:	4610      	mov	r0, r2
 800501c:	f7fe fc05 	bl	800382a <vListInsert>
}
 8005020:	e010      	b.n	8005044 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005022:	4b0e      	ldr	r3, [pc, #56]	; (800505c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	4b0a      	ldr	r3, [pc, #40]	; (8005050 <prvAddCurrentTaskToDelayedList+0x94>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	3304      	adds	r3, #4
 800502c:	4619      	mov	r1, r3
 800502e:	4610      	mov	r0, r2
 8005030:	f7fe fbfb 	bl	800382a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005034:	4b0a      	ldr	r3, [pc, #40]	; (8005060 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	429a      	cmp	r2, r3
 800503c:	d202      	bcs.n	8005044 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800503e:	4a08      	ldr	r2, [pc, #32]	; (8005060 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	6013      	str	r3, [r2, #0]
}
 8005044:	bf00      	nop
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	20000be8 	.word	0x20000be8
 8005050:	20000710 	.word	0x20000710
 8005054:	20000bd0 	.word	0x20000bd0
 8005058:	20000ba0 	.word	0x20000ba0
 800505c:	20000b9c 	.word	0x20000b9c
 8005060:	20000c04 	.word	0x20000c04

08005064 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b08a      	sub	sp, #40	; 0x28
 8005068:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800506a:	2300      	movs	r3, #0
 800506c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800506e:	f000 faff 	bl	8005670 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005072:	4b1c      	ldr	r3, [pc, #112]	; (80050e4 <xTimerCreateTimerTask+0x80>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d021      	beq.n	80050be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800507a:	2300      	movs	r3, #0
 800507c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800507e:	2300      	movs	r3, #0
 8005080:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005082:	1d3a      	adds	r2, r7, #4
 8005084:	f107 0108 	add.w	r1, r7, #8
 8005088:	f107 030c 	add.w	r3, r7, #12
 800508c:	4618      	mov	r0, r3
 800508e:	f7fe fb61 	bl	8003754 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005092:	6879      	ldr	r1, [r7, #4]
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	9202      	str	r2, [sp, #8]
 800509a:	9301      	str	r3, [sp, #4]
 800509c:	2302      	movs	r3, #2
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	2300      	movs	r3, #0
 80050a2:	460a      	mov	r2, r1
 80050a4:	4910      	ldr	r1, [pc, #64]	; (80050e8 <xTimerCreateTimerTask+0x84>)
 80050a6:	4811      	ldr	r0, [pc, #68]	; (80050ec <xTimerCreateTimerTask+0x88>)
 80050a8:	f7ff f8f6 	bl	8004298 <xTaskCreateStatic>
 80050ac:	4602      	mov	r2, r0
 80050ae:	4b10      	ldr	r3, [pc, #64]	; (80050f0 <xTimerCreateTimerTask+0x8c>)
 80050b0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80050b2:	4b0f      	ldr	r3, [pc, #60]	; (80050f0 <xTimerCreateTimerTask+0x8c>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80050ba:	2301      	movs	r3, #1
 80050bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d109      	bne.n	80050d8 <xTimerCreateTimerTask+0x74>
 80050c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c8:	f383 8811 	msr	BASEPRI, r3
 80050cc:	f3bf 8f6f 	isb	sy
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	613b      	str	r3, [r7, #16]
 80050d6:	e7fe      	b.n	80050d6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80050d8:	697b      	ldr	r3, [r7, #20]
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3718      	adds	r7, #24
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	20000c40 	.word	0x20000c40
 80050e8:	0800602c 	.word	0x0800602c
 80050ec:	08005225 	.word	0x08005225
 80050f0:	20000c44 	.word	0x20000c44

080050f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b08a      	sub	sp, #40	; 0x28
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
 8005100:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005102:	2300      	movs	r3, #0
 8005104:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d109      	bne.n	8005120 <xTimerGenericCommand+0x2c>
 800510c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005110:	f383 8811 	msr	BASEPRI, r3
 8005114:	f3bf 8f6f 	isb	sy
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	623b      	str	r3, [r7, #32]
 800511e:	e7fe      	b.n	800511e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005120:	4b19      	ldr	r3, [pc, #100]	; (8005188 <xTimerGenericCommand+0x94>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d02a      	beq.n	800517e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	2b05      	cmp	r3, #5
 8005138:	dc18      	bgt.n	800516c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800513a:	f7ff feb5 	bl	8004ea8 <xTaskGetSchedulerState>
 800513e:	4603      	mov	r3, r0
 8005140:	2b02      	cmp	r3, #2
 8005142:	d109      	bne.n	8005158 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005144:	4b10      	ldr	r3, [pc, #64]	; (8005188 <xTimerGenericCommand+0x94>)
 8005146:	6818      	ldr	r0, [r3, #0]
 8005148:	f107 0110 	add.w	r1, r7, #16
 800514c:	2300      	movs	r3, #0
 800514e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005150:	f7fe fccc 	bl	8003aec <xQueueGenericSend>
 8005154:	6278      	str	r0, [r7, #36]	; 0x24
 8005156:	e012      	b.n	800517e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005158:	4b0b      	ldr	r3, [pc, #44]	; (8005188 <xTimerGenericCommand+0x94>)
 800515a:	6818      	ldr	r0, [r3, #0]
 800515c:	f107 0110 	add.w	r1, r7, #16
 8005160:	2300      	movs	r3, #0
 8005162:	2200      	movs	r2, #0
 8005164:	f7fe fcc2 	bl	8003aec <xQueueGenericSend>
 8005168:	6278      	str	r0, [r7, #36]	; 0x24
 800516a:	e008      	b.n	800517e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800516c:	4b06      	ldr	r3, [pc, #24]	; (8005188 <xTimerGenericCommand+0x94>)
 800516e:	6818      	ldr	r0, [r3, #0]
 8005170:	f107 0110 	add.w	r1, r7, #16
 8005174:	2300      	movs	r3, #0
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	f7fe fdb2 	bl	8003ce0 <xQueueGenericSendFromISR>
 800517c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005180:	4618      	mov	r0, r3
 8005182:	3728      	adds	r7, #40	; 0x28
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	20000c40 	.word	0x20000c40

0800518c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b088      	sub	sp, #32
 8005190:	af02      	add	r7, sp, #8
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005196:	4b22      	ldr	r3, [pc, #136]	; (8005220 <prvProcessExpiredTimer+0x94>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	3304      	adds	r3, #4
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7fe fb79 	bl	800389c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051b0:	f003 0304 	and.w	r3, r3, #4
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d021      	beq.n	80051fc <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	699a      	ldr	r2, [r3, #24]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	18d1      	adds	r1, r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	6978      	ldr	r0, [r7, #20]
 80051c6:	f000 f8d1 	bl	800536c <prvInsertTimerInActiveList>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d01e      	beq.n	800520e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80051d0:	2300      	movs	r3, #0
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	2300      	movs	r3, #0
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	2100      	movs	r1, #0
 80051da:	6978      	ldr	r0, [r7, #20]
 80051dc:	f7ff ff8a 	bl	80050f4 <xTimerGenericCommand>
 80051e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d112      	bne.n	800520e <prvProcessExpiredTimer+0x82>
 80051e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ec:	f383 8811 	msr	BASEPRI, r3
 80051f0:	f3bf 8f6f 	isb	sy
 80051f4:	f3bf 8f4f 	dsb	sy
 80051f8:	60fb      	str	r3, [r7, #12]
 80051fa:	e7fe      	b.n	80051fa <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005202:	f023 0301 	bic.w	r3, r3, #1
 8005206:	b2da      	uxtb	r2, r3
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	6978      	ldr	r0, [r7, #20]
 8005214:	4798      	blx	r3
}
 8005216:	bf00      	nop
 8005218:	3718      	adds	r7, #24
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	20000c38 	.word	0x20000c38

08005224 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800522c:	f107 0308 	add.w	r3, r7, #8
 8005230:	4618      	mov	r0, r3
 8005232:	f000 f857 	bl	80052e4 <prvGetNextExpireTime>
 8005236:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	4619      	mov	r1, r3
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f000 f803 	bl	8005248 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005242:	f000 f8d5 	bl	80053f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005246:	e7f1      	b.n	800522c <prvTimerTask+0x8>

08005248 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005252:	f7ff fa57 	bl	8004704 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005256:	f107 0308 	add.w	r3, r7, #8
 800525a:	4618      	mov	r0, r3
 800525c:	f000 f866 	bl	800532c <prvSampleTimeNow>
 8005260:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d130      	bne.n	80052ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10a      	bne.n	8005284 <prvProcessTimerOrBlockTask+0x3c>
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	429a      	cmp	r2, r3
 8005274:	d806      	bhi.n	8005284 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005276:	f7ff fa53 	bl	8004720 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800527a:	68f9      	ldr	r1, [r7, #12]
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f7ff ff85 	bl	800518c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005282:	e024      	b.n	80052ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d008      	beq.n	800529c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800528a:	4b13      	ldr	r3, [pc, #76]	; (80052d8 <prvProcessTimerOrBlockTask+0x90>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <prvProcessTimerOrBlockTask+0x50>
 8005294:	2301      	movs	r3, #1
 8005296:	e000      	b.n	800529a <prvProcessTimerOrBlockTask+0x52>
 8005298:	2300      	movs	r3, #0
 800529a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800529c:	4b0f      	ldr	r3, [pc, #60]	; (80052dc <prvProcessTimerOrBlockTask+0x94>)
 800529e:	6818      	ldr	r0, [r3, #0]
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	4619      	mov	r1, r3
 80052aa:	f7fe ffc1 	bl	8004230 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80052ae:	f7ff fa37 	bl	8004720 <xTaskResumeAll>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10a      	bne.n	80052ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80052b8:	4b09      	ldr	r3, [pc, #36]	; (80052e0 <prvProcessTimerOrBlockTask+0x98>)
 80052ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052be:	601a      	str	r2, [r3, #0]
 80052c0:	f3bf 8f4f 	dsb	sy
 80052c4:	f3bf 8f6f 	isb	sy
}
 80052c8:	e001      	b.n	80052ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80052ca:	f7ff fa29 	bl	8004720 <xTaskResumeAll>
}
 80052ce:	bf00      	nop
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	20000c3c 	.word	0x20000c3c
 80052dc:	20000c40 	.word	0x20000c40
 80052e0:	e000ed04 	.word	0xe000ed04

080052e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80052ec:	4b0e      	ldr	r3, [pc, #56]	; (8005328 <prvGetNextExpireTime+0x44>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <prvGetNextExpireTime+0x16>
 80052f6:	2201      	movs	r2, #1
 80052f8:	e000      	b.n	80052fc <prvGetNextExpireTime+0x18>
 80052fa:	2200      	movs	r2, #0
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d105      	bne.n	8005314 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005308:	4b07      	ldr	r3, [pc, #28]	; (8005328 <prvGetNextExpireTime+0x44>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	60fb      	str	r3, [r7, #12]
 8005312:	e001      	b.n	8005318 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005314:	2300      	movs	r3, #0
 8005316:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005318:	68fb      	ldr	r3, [r7, #12]
}
 800531a:	4618      	mov	r0, r3
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	20000c38 	.word	0x20000c38

0800532c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005334:	f7ff fa90 	bl	8004858 <xTaskGetTickCount>
 8005338:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800533a:	4b0b      	ldr	r3, [pc, #44]	; (8005368 <prvSampleTimeNow+0x3c>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	429a      	cmp	r2, r3
 8005342:	d205      	bcs.n	8005350 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005344:	f000 f930 	bl	80055a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	e002      	b.n	8005356 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005356:	4a04      	ldr	r2, [pc, #16]	; (8005368 <prvSampleTimeNow+0x3c>)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800535c:	68fb      	ldr	r3, [r7, #12]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	20000c48 	.word	0x20000c48

0800536c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b086      	sub	sp, #24
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800537a:	2300      	movs	r3, #0
 800537c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	429a      	cmp	r2, r3
 8005390:	d812      	bhi.n	80053b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	1ad2      	subs	r2, r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	429a      	cmp	r2, r3
 800539e:	d302      	bcc.n	80053a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80053a0:	2301      	movs	r3, #1
 80053a2:	617b      	str	r3, [r7, #20]
 80053a4:	e01b      	b.n	80053de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80053a6:	4b10      	ldr	r3, [pc, #64]	; (80053e8 <prvInsertTimerInActiveList+0x7c>)
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	3304      	adds	r3, #4
 80053ae:	4619      	mov	r1, r3
 80053b0:	4610      	mov	r0, r2
 80053b2:	f7fe fa3a 	bl	800382a <vListInsert>
 80053b6:	e012      	b.n	80053de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d206      	bcs.n	80053ce <prvInsertTimerInActiveList+0x62>
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d302      	bcc.n	80053ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80053c8:	2301      	movs	r3, #1
 80053ca:	617b      	str	r3, [r7, #20]
 80053cc:	e007      	b.n	80053de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80053ce:	4b07      	ldr	r3, [pc, #28]	; (80053ec <prvInsertTimerInActiveList+0x80>)
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	3304      	adds	r3, #4
 80053d6:	4619      	mov	r1, r3
 80053d8:	4610      	mov	r0, r2
 80053da:	f7fe fa26 	bl	800382a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80053de:	697b      	ldr	r3, [r7, #20]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3718      	adds	r7, #24
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	20000c3c 	.word	0x20000c3c
 80053ec:	20000c38 	.word	0x20000c38

080053f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b08e      	sub	sp, #56	; 0x38
 80053f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80053f6:	e0c6      	b.n	8005586 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	da17      	bge.n	800542e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80053fe:	1d3b      	adds	r3, r7, #4
 8005400:	3304      	adds	r3, #4
 8005402:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005406:	2b00      	cmp	r3, #0
 8005408:	d109      	bne.n	800541e <prvProcessReceivedCommands+0x2e>
 800540a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	61fb      	str	r3, [r7, #28]
 800541c:	e7fe      	b.n	800541c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800541e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005424:	6850      	ldr	r0, [r2, #4]
 8005426:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005428:	6892      	ldr	r2, [r2, #8]
 800542a:	4611      	mov	r1, r2
 800542c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	f2c0 80a7 	blt.w	8005584 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800543a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d004      	beq.n	800544c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005444:	3304      	adds	r3, #4
 8005446:	4618      	mov	r0, r3
 8005448:	f7fe fa28 	bl	800389c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800544c:	463b      	mov	r3, r7
 800544e:	4618      	mov	r0, r3
 8005450:	f7ff ff6c 	bl	800532c <prvSampleTimeNow>
 8005454:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b09      	cmp	r3, #9
 800545a:	f200 8094 	bhi.w	8005586 <prvProcessReceivedCommands+0x196>
 800545e:	a201      	add	r2, pc, #4	; (adr r2, 8005464 <prvProcessReceivedCommands+0x74>)
 8005460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005464:	0800548d 	.word	0x0800548d
 8005468:	0800548d 	.word	0x0800548d
 800546c:	0800548d 	.word	0x0800548d
 8005470:	080054ff 	.word	0x080054ff
 8005474:	08005513 	.word	0x08005513
 8005478:	0800555b 	.word	0x0800555b
 800547c:	0800548d 	.word	0x0800548d
 8005480:	0800548d 	.word	0x0800548d
 8005484:	080054ff 	.word	0x080054ff
 8005488:	08005513 	.word	0x08005513
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800548c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005492:	f043 0301 	orr.w	r3, r3, #1
 8005496:	b2da      	uxtb	r2, r3
 8005498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800549e:	68ba      	ldr	r2, [r7, #8]
 80054a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	18d1      	adds	r1, r2, r3
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054ac:	f7ff ff5e 	bl	800536c <prvInsertTimerInActiveList>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d067      	beq.n	8005586 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80054be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054c4:	f003 0304 	and.w	r3, r3, #4
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d05c      	beq.n	8005586 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	441a      	add	r2, r3
 80054d4:	2300      	movs	r3, #0
 80054d6:	9300      	str	r3, [sp, #0]
 80054d8:	2300      	movs	r3, #0
 80054da:	2100      	movs	r1, #0
 80054dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054de:	f7ff fe09 	bl	80050f4 <xTimerGenericCommand>
 80054e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80054e4:	6a3b      	ldr	r3, [r7, #32]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d14d      	bne.n	8005586 <prvProcessReceivedCommands+0x196>
 80054ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ee:	f383 8811 	msr	BASEPRI, r3
 80054f2:	f3bf 8f6f 	isb	sy
 80054f6:	f3bf 8f4f 	dsb	sy
 80054fa:	61bb      	str	r3, [r7, #24]
 80054fc:	e7fe      	b.n	80054fc <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80054fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005500:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005504:	f023 0301 	bic.w	r3, r3, #1
 8005508:	b2da      	uxtb	r2, r3
 800550a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005510:	e039      	b.n	8005586 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005514:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005518:	f043 0301 	orr.w	r3, r3, #1
 800551c:	b2da      	uxtb	r2, r3
 800551e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005520:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005528:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800552a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d109      	bne.n	8005546 <prvProcessReceivedCommands+0x156>
 8005532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005536:	f383 8811 	msr	BASEPRI, r3
 800553a:	f3bf 8f6f 	isb	sy
 800553e:	f3bf 8f4f 	dsb	sy
 8005542:	617b      	str	r3, [r7, #20]
 8005544:	e7fe      	b.n	8005544 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005548:	699a      	ldr	r2, [r3, #24]
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	18d1      	adds	r1, r2, r3
 800554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005552:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005554:	f7ff ff0a 	bl	800536c <prvInsertTimerInActiveList>
					break;
 8005558:	e015      	b.n	8005586 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800555a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b00      	cmp	r3, #0
 8005566:	d103      	bne.n	8005570 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8005568:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800556a:	f000 fbc3 	bl	8005cf4 <vPortFree>
 800556e:	e00a      	b.n	8005586 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005572:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005576:	f023 0301 	bic.w	r3, r3, #1
 800557a:	b2da      	uxtb	r2, r3
 800557c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005582:	e000      	b.n	8005586 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005584:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005586:	4b07      	ldr	r3, [pc, #28]	; (80055a4 <prvProcessReceivedCommands+0x1b4>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	1d39      	adds	r1, r7, #4
 800558c:	2200      	movs	r2, #0
 800558e:	4618      	mov	r0, r3
 8005590:	f7fe fc3a 	bl	8003e08 <xQueueReceive>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	f47f af2e 	bne.w	80053f8 <prvProcessReceivedCommands+0x8>
	}
}
 800559c:	bf00      	nop
 800559e:	3730      	adds	r7, #48	; 0x30
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	20000c40 	.word	0x20000c40

080055a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b088      	sub	sp, #32
 80055ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80055ae:	e047      	b.n	8005640 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055b0:	4b2d      	ldr	r3, [pc, #180]	; (8005668 <prvSwitchTimerLists+0xc0>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055ba:	4b2b      	ldr	r3, [pc, #172]	; (8005668 <prvSwitchTimerLists+0xc0>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	3304      	adds	r3, #4
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7fe f967 	bl	800389c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d02d      	beq.n	8005640 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	4413      	add	r3, r2
 80055ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d90e      	bls.n	8005614 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	68ba      	ldr	r2, [r7, #8]
 80055fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005602:	4b19      	ldr	r3, [pc, #100]	; (8005668 <prvSwitchTimerLists+0xc0>)
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	3304      	adds	r3, #4
 800560a:	4619      	mov	r1, r3
 800560c:	4610      	mov	r0, r2
 800560e:	f7fe f90c 	bl	800382a <vListInsert>
 8005612:	e015      	b.n	8005640 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005614:	2300      	movs	r3, #0
 8005616:	9300      	str	r3, [sp, #0]
 8005618:	2300      	movs	r3, #0
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	2100      	movs	r1, #0
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	f7ff fd68 	bl	80050f4 <xTimerGenericCommand>
 8005624:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d109      	bne.n	8005640 <prvSwitchTimerLists+0x98>
 800562c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005630:	f383 8811 	msr	BASEPRI, r3
 8005634:	f3bf 8f6f 	isb	sy
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	603b      	str	r3, [r7, #0]
 800563e:	e7fe      	b.n	800563e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005640:	4b09      	ldr	r3, [pc, #36]	; (8005668 <prvSwitchTimerLists+0xc0>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1b2      	bne.n	80055b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800564a:	4b07      	ldr	r3, [pc, #28]	; (8005668 <prvSwitchTimerLists+0xc0>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005650:	4b06      	ldr	r3, [pc, #24]	; (800566c <prvSwitchTimerLists+0xc4>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a04      	ldr	r2, [pc, #16]	; (8005668 <prvSwitchTimerLists+0xc0>)
 8005656:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005658:	4a04      	ldr	r2, [pc, #16]	; (800566c <prvSwitchTimerLists+0xc4>)
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	6013      	str	r3, [r2, #0]
}
 800565e:	bf00      	nop
 8005660:	3718      	adds	r7, #24
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	20000c38 	.word	0x20000c38
 800566c:	20000c3c 	.word	0x20000c3c

08005670 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005676:	f000 f961 	bl	800593c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800567a:	4b15      	ldr	r3, [pc, #84]	; (80056d0 <prvCheckForValidListAndQueue+0x60>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d120      	bne.n	80056c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005682:	4814      	ldr	r0, [pc, #80]	; (80056d4 <prvCheckForValidListAndQueue+0x64>)
 8005684:	f7fe f880 	bl	8003788 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005688:	4813      	ldr	r0, [pc, #76]	; (80056d8 <prvCheckForValidListAndQueue+0x68>)
 800568a:	f7fe f87d 	bl	8003788 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800568e:	4b13      	ldr	r3, [pc, #76]	; (80056dc <prvCheckForValidListAndQueue+0x6c>)
 8005690:	4a10      	ldr	r2, [pc, #64]	; (80056d4 <prvCheckForValidListAndQueue+0x64>)
 8005692:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005694:	4b12      	ldr	r3, [pc, #72]	; (80056e0 <prvCheckForValidListAndQueue+0x70>)
 8005696:	4a10      	ldr	r2, [pc, #64]	; (80056d8 <prvCheckForValidListAndQueue+0x68>)
 8005698:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800569a:	2300      	movs	r3, #0
 800569c:	9300      	str	r3, [sp, #0]
 800569e:	4b11      	ldr	r3, [pc, #68]	; (80056e4 <prvCheckForValidListAndQueue+0x74>)
 80056a0:	4a11      	ldr	r2, [pc, #68]	; (80056e8 <prvCheckForValidListAndQueue+0x78>)
 80056a2:	2110      	movs	r1, #16
 80056a4:	200a      	movs	r0, #10
 80056a6:	f7fe f98b 	bl	80039c0 <xQueueGenericCreateStatic>
 80056aa:	4602      	mov	r2, r0
 80056ac:	4b08      	ldr	r3, [pc, #32]	; (80056d0 <prvCheckForValidListAndQueue+0x60>)
 80056ae:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80056b0:	4b07      	ldr	r3, [pc, #28]	; (80056d0 <prvCheckForValidListAndQueue+0x60>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d005      	beq.n	80056c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80056b8:	4b05      	ldr	r3, [pc, #20]	; (80056d0 <prvCheckForValidListAndQueue+0x60>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	490b      	ldr	r1, [pc, #44]	; (80056ec <prvCheckForValidListAndQueue+0x7c>)
 80056be:	4618      	mov	r0, r3
 80056c0:	f7fe fd8e 	bl	80041e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056c4:	f000 f968 	bl	8005998 <vPortExitCritical>
}
 80056c8:	bf00      	nop
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	20000c40 	.word	0x20000c40
 80056d4:	20000c10 	.word	0x20000c10
 80056d8:	20000c24 	.word	0x20000c24
 80056dc:	20000c38 	.word	0x20000c38
 80056e0:	20000c3c 	.word	0x20000c3c
 80056e4:	20000cec 	.word	0x20000cec
 80056e8:	20000c4c 	.word	0x20000c4c
 80056ec:	08006034 	.word	0x08006034

080056f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	3b04      	subs	r3, #4
 8005700:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005708:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	3b04      	subs	r3, #4
 800570e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	f023 0201 	bic.w	r2, r3, #1
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	3b04      	subs	r3, #4
 800571e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005720:	4a0c      	ldr	r2, [pc, #48]	; (8005754 <pxPortInitialiseStack+0x64>)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	3b14      	subs	r3, #20
 800572a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	3b04      	subs	r3, #4
 8005736:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f06f 0202 	mvn.w	r2, #2
 800573e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	3b20      	subs	r3, #32
 8005744:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005746:	68fb      	ldr	r3, [r7, #12]
}
 8005748:	4618      	mov	r0, r3
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	08005759 	.word	0x08005759

08005758 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800575e:	2300      	movs	r3, #0
 8005760:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005762:	4b11      	ldr	r3, [pc, #68]	; (80057a8 <prvTaskExitError+0x50>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800576a:	d009      	beq.n	8005780 <prvTaskExitError+0x28>
 800576c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005770:	f383 8811 	msr	BASEPRI, r3
 8005774:	f3bf 8f6f 	isb	sy
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	60fb      	str	r3, [r7, #12]
 800577e:	e7fe      	b.n	800577e <prvTaskExitError+0x26>
 8005780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005792:	bf00      	nop
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d0fc      	beq.n	8005794 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800579a:	bf00      	nop
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	20000028 	.word	0x20000028
 80057ac:	00000000 	.word	0x00000000

080057b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80057b0:	4b07      	ldr	r3, [pc, #28]	; (80057d0 <pxCurrentTCBConst2>)
 80057b2:	6819      	ldr	r1, [r3, #0]
 80057b4:	6808      	ldr	r0, [r1, #0]
 80057b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ba:	f380 8809 	msr	PSP, r0
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	f04f 0000 	mov.w	r0, #0
 80057c6:	f380 8811 	msr	BASEPRI, r0
 80057ca:	4770      	bx	lr
 80057cc:	f3af 8000 	nop.w

080057d0 <pxCurrentTCBConst2>:
 80057d0:	20000710 	.word	0x20000710
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80057d4:	bf00      	nop
 80057d6:	bf00      	nop

080057d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80057d8:	4808      	ldr	r0, [pc, #32]	; (80057fc <prvPortStartFirstTask+0x24>)
 80057da:	6800      	ldr	r0, [r0, #0]
 80057dc:	6800      	ldr	r0, [r0, #0]
 80057de:	f380 8808 	msr	MSP, r0
 80057e2:	f04f 0000 	mov.w	r0, #0
 80057e6:	f380 8814 	msr	CONTROL, r0
 80057ea:	b662      	cpsie	i
 80057ec:	b661      	cpsie	f
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	f3bf 8f6f 	isb	sy
 80057f6:	df00      	svc	0
 80057f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80057fa:	bf00      	nop
 80057fc:	e000ed08 	.word	0xe000ed08

08005800 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005806:	4b44      	ldr	r3, [pc, #272]	; (8005918 <xPortStartScheduler+0x118>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a44      	ldr	r2, [pc, #272]	; (800591c <xPortStartScheduler+0x11c>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d109      	bne.n	8005824 <xPortStartScheduler+0x24>
 8005810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005814:	f383 8811 	msr	BASEPRI, r3
 8005818:	f3bf 8f6f 	isb	sy
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	613b      	str	r3, [r7, #16]
 8005822:	e7fe      	b.n	8005822 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005824:	4b3c      	ldr	r3, [pc, #240]	; (8005918 <xPortStartScheduler+0x118>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a3d      	ldr	r2, [pc, #244]	; (8005920 <xPortStartScheduler+0x120>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d109      	bne.n	8005842 <xPortStartScheduler+0x42>
 800582e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005832:	f383 8811 	msr	BASEPRI, r3
 8005836:	f3bf 8f6f 	isb	sy
 800583a:	f3bf 8f4f 	dsb	sy
 800583e:	60fb      	str	r3, [r7, #12]
 8005840:	e7fe      	b.n	8005840 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005842:	4b38      	ldr	r3, [pc, #224]	; (8005924 <xPortStartScheduler+0x124>)
 8005844:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	b2db      	uxtb	r3, r3
 800584c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	22ff      	movs	r2, #255	; 0xff
 8005852:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	b2db      	uxtb	r3, r3
 800585a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800585c:	78fb      	ldrb	r3, [r7, #3]
 800585e:	b2db      	uxtb	r3, r3
 8005860:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005864:	b2da      	uxtb	r2, r3
 8005866:	4b30      	ldr	r3, [pc, #192]	; (8005928 <xPortStartScheduler+0x128>)
 8005868:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800586a:	4b30      	ldr	r3, [pc, #192]	; (800592c <xPortStartScheduler+0x12c>)
 800586c:	2207      	movs	r2, #7
 800586e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005870:	e009      	b.n	8005886 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005872:	4b2e      	ldr	r3, [pc, #184]	; (800592c <xPortStartScheduler+0x12c>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	3b01      	subs	r3, #1
 8005878:	4a2c      	ldr	r2, [pc, #176]	; (800592c <xPortStartScheduler+0x12c>)
 800587a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800587c:	78fb      	ldrb	r3, [r7, #3]
 800587e:	b2db      	uxtb	r3, r3
 8005880:	005b      	lsls	r3, r3, #1
 8005882:	b2db      	uxtb	r3, r3
 8005884:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005886:	78fb      	ldrb	r3, [r7, #3]
 8005888:	b2db      	uxtb	r3, r3
 800588a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800588e:	2b80      	cmp	r3, #128	; 0x80
 8005890:	d0ef      	beq.n	8005872 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005892:	4b26      	ldr	r3, [pc, #152]	; (800592c <xPortStartScheduler+0x12c>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f1c3 0307 	rsb	r3, r3, #7
 800589a:	2b04      	cmp	r3, #4
 800589c:	d009      	beq.n	80058b2 <xPortStartScheduler+0xb2>
 800589e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a2:	f383 8811 	msr	BASEPRI, r3
 80058a6:	f3bf 8f6f 	isb	sy
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	60bb      	str	r3, [r7, #8]
 80058b0:	e7fe      	b.n	80058b0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80058b2:	4b1e      	ldr	r3, [pc, #120]	; (800592c <xPortStartScheduler+0x12c>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	021b      	lsls	r3, r3, #8
 80058b8:	4a1c      	ldr	r2, [pc, #112]	; (800592c <xPortStartScheduler+0x12c>)
 80058ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80058bc:	4b1b      	ldr	r3, [pc, #108]	; (800592c <xPortStartScheduler+0x12c>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80058c4:	4a19      	ldr	r2, [pc, #100]	; (800592c <xPortStartScheduler+0x12c>)
 80058c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	b2da      	uxtb	r2, r3
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80058d0:	4b17      	ldr	r3, [pc, #92]	; (8005930 <xPortStartScheduler+0x130>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a16      	ldr	r2, [pc, #88]	; (8005930 <xPortStartScheduler+0x130>)
 80058d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80058dc:	4b14      	ldr	r3, [pc, #80]	; (8005930 <xPortStartScheduler+0x130>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a13      	ldr	r2, [pc, #76]	; (8005930 <xPortStartScheduler+0x130>)
 80058e2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80058e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80058e8:	f000 f8d6 	bl	8005a98 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80058ec:	4b11      	ldr	r3, [pc, #68]	; (8005934 <xPortStartScheduler+0x134>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80058f2:	f000 f8f5 	bl	8005ae0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80058f6:	4b10      	ldr	r3, [pc, #64]	; (8005938 <xPortStartScheduler+0x138>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a0f      	ldr	r2, [pc, #60]	; (8005938 <xPortStartScheduler+0x138>)
 80058fc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005900:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005902:	f7ff ff69 	bl	80057d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005906:	f7ff f86f 	bl	80049e8 <vTaskSwitchContext>
	prvTaskExitError();
 800590a:	f7ff ff25 	bl	8005758 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3718      	adds	r7, #24
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	e000ed00 	.word	0xe000ed00
 800591c:	410fc271 	.word	0x410fc271
 8005920:	410fc270 	.word	0x410fc270
 8005924:	e000e400 	.word	0xe000e400
 8005928:	20000d3c 	.word	0x20000d3c
 800592c:	20000d40 	.word	0x20000d40
 8005930:	e000ed20 	.word	0xe000ed20
 8005934:	20000028 	.word	0x20000028
 8005938:	e000ef34 	.word	0xe000ef34

0800593c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005946:	f383 8811 	msr	BASEPRI, r3
 800594a:	f3bf 8f6f 	isb	sy
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005954:	4b0e      	ldr	r3, [pc, #56]	; (8005990 <vPortEnterCritical+0x54>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	3301      	adds	r3, #1
 800595a:	4a0d      	ldr	r2, [pc, #52]	; (8005990 <vPortEnterCritical+0x54>)
 800595c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800595e:	4b0c      	ldr	r3, [pc, #48]	; (8005990 <vPortEnterCritical+0x54>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d10e      	bne.n	8005984 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005966:	4b0b      	ldr	r3, [pc, #44]	; (8005994 <vPortEnterCritical+0x58>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	b2db      	uxtb	r3, r3
 800596c:	2b00      	cmp	r3, #0
 800596e:	d009      	beq.n	8005984 <vPortEnterCritical+0x48>
 8005970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005974:	f383 8811 	msr	BASEPRI, r3
 8005978:	f3bf 8f6f 	isb	sy
 800597c:	f3bf 8f4f 	dsb	sy
 8005980:	603b      	str	r3, [r7, #0]
 8005982:	e7fe      	b.n	8005982 <vPortEnterCritical+0x46>
	}
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	20000028 	.word	0x20000028
 8005994:	e000ed04 	.word	0xe000ed04

08005998 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800599e:	4b11      	ldr	r3, [pc, #68]	; (80059e4 <vPortExitCritical+0x4c>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d109      	bne.n	80059ba <vPortExitCritical+0x22>
 80059a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059aa:	f383 8811 	msr	BASEPRI, r3
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	607b      	str	r3, [r7, #4]
 80059b8:	e7fe      	b.n	80059b8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80059ba:	4b0a      	ldr	r3, [pc, #40]	; (80059e4 <vPortExitCritical+0x4c>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	3b01      	subs	r3, #1
 80059c0:	4a08      	ldr	r2, [pc, #32]	; (80059e4 <vPortExitCritical+0x4c>)
 80059c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80059c4:	4b07      	ldr	r3, [pc, #28]	; (80059e4 <vPortExitCritical+0x4c>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d104      	bne.n	80059d6 <vPortExitCritical+0x3e>
 80059cc:	2300      	movs	r3, #0
 80059ce:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80059d6:	bf00      	nop
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	20000028 	.word	0x20000028
	...

080059f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80059f0:	f3ef 8009 	mrs	r0, PSP
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	4b15      	ldr	r3, [pc, #84]	; (8005a50 <pxCurrentTCBConst>)
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	f01e 0f10 	tst.w	lr, #16
 8005a00:	bf08      	it	eq
 8005a02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a0a:	6010      	str	r0, [r2, #0]
 8005a0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005a10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005a14:	f380 8811 	msr	BASEPRI, r0
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	f3bf 8f6f 	isb	sy
 8005a20:	f7fe ffe2 	bl	80049e8 <vTaskSwitchContext>
 8005a24:	f04f 0000 	mov.w	r0, #0
 8005a28:	f380 8811 	msr	BASEPRI, r0
 8005a2c:	bc09      	pop	{r0, r3}
 8005a2e:	6819      	ldr	r1, [r3, #0]
 8005a30:	6808      	ldr	r0, [r1, #0]
 8005a32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a36:	f01e 0f10 	tst.w	lr, #16
 8005a3a:	bf08      	it	eq
 8005a3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005a40:	f380 8809 	msr	PSP, r0
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	f3af 8000 	nop.w

08005a50 <pxCurrentTCBConst>:
 8005a50:	20000710 	.word	0x20000710
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005a54:	bf00      	nop
 8005a56:	bf00      	nop

08005a58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a62:	f383 8811 	msr	BASEPRI, r3
 8005a66:	f3bf 8f6f 	isb	sy
 8005a6a:	f3bf 8f4f 	dsb	sy
 8005a6e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a70:	f7fe ff02 	bl	8004878 <xTaskIncrementTick>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a7a:	4b06      	ldr	r3, [pc, #24]	; (8005a94 <xPortSysTickHandler+0x3c>)
 8005a7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a80:	601a      	str	r2, [r3, #0]
 8005a82:	2300      	movs	r3, #0
 8005a84:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a8c:	bf00      	nop
 8005a8e:	3708      	adds	r7, #8
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	e000ed04 	.word	0xe000ed04

08005a98 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a98:	b480      	push	{r7}
 8005a9a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a9c:	4b0b      	ldr	r3, [pc, #44]	; (8005acc <vPortSetupTimerInterrupt+0x34>)
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005aa2:	4b0b      	ldr	r3, [pc, #44]	; (8005ad0 <vPortSetupTimerInterrupt+0x38>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005aa8:	4b0a      	ldr	r3, [pc, #40]	; (8005ad4 <vPortSetupTimerInterrupt+0x3c>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a0a      	ldr	r2, [pc, #40]	; (8005ad8 <vPortSetupTimerInterrupt+0x40>)
 8005aae:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab2:	099b      	lsrs	r3, r3, #6
 8005ab4:	4a09      	ldr	r2, [pc, #36]	; (8005adc <vPortSetupTimerInterrupt+0x44>)
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005aba:	4b04      	ldr	r3, [pc, #16]	; (8005acc <vPortSetupTimerInterrupt+0x34>)
 8005abc:	2207      	movs	r2, #7
 8005abe:	601a      	str	r2, [r3, #0]
}
 8005ac0:	bf00      	nop
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	e000e010 	.word	0xe000e010
 8005ad0:	e000e018 	.word	0xe000e018
 8005ad4:	2000001c 	.word	0x2000001c
 8005ad8:	10624dd3 	.word	0x10624dd3
 8005adc:	e000e014 	.word	0xe000e014

08005ae0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ae0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005af0 <vPortEnableVFP+0x10>
 8005ae4:	6801      	ldr	r1, [r0, #0]
 8005ae6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005aea:	6001      	str	r1, [r0, #0]
 8005aec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005aee:	bf00      	nop
 8005af0:	e000ed88 	.word	0xe000ed88

08005af4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005afa:	f3ef 8305 	mrs	r3, IPSR
 8005afe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2b0f      	cmp	r3, #15
 8005b04:	d913      	bls.n	8005b2e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005b06:	4a16      	ldr	r2, [pc, #88]	; (8005b60 <vPortValidateInterruptPriority+0x6c>)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005b10:	4b14      	ldr	r3, [pc, #80]	; (8005b64 <vPortValidateInterruptPriority+0x70>)
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	7afa      	ldrb	r2, [r7, #11]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d209      	bcs.n	8005b2e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1e:	f383 8811 	msr	BASEPRI, r3
 8005b22:	f3bf 8f6f 	isb	sy
 8005b26:	f3bf 8f4f 	dsb	sy
 8005b2a:	607b      	str	r3, [r7, #4]
 8005b2c:	e7fe      	b.n	8005b2c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005b2e:	4b0e      	ldr	r3, [pc, #56]	; (8005b68 <vPortValidateInterruptPriority+0x74>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005b36:	4b0d      	ldr	r3, [pc, #52]	; (8005b6c <vPortValidateInterruptPriority+0x78>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d909      	bls.n	8005b52 <vPortValidateInterruptPriority+0x5e>
 8005b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b42:	f383 8811 	msr	BASEPRI, r3
 8005b46:	f3bf 8f6f 	isb	sy
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	603b      	str	r3, [r7, #0]
 8005b50:	e7fe      	b.n	8005b50 <vPortValidateInterruptPriority+0x5c>
	}
 8005b52:	bf00      	nop
 8005b54:	3714      	adds	r7, #20
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	e000e3f0 	.word	0xe000e3f0
 8005b64:	20000d3c 	.word	0x20000d3c
 8005b68:	e000ed0c 	.word	0xe000ed0c
 8005b6c:	20000d40 	.word	0x20000d40

08005b70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b08a      	sub	sp, #40	; 0x28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b7c:	f7fe fdc2 	bl	8004704 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b80:	4b57      	ldr	r3, [pc, #348]	; (8005ce0 <pvPortMalloc+0x170>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d101      	bne.n	8005b8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b88:	f000 f90c 	bl	8005da4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b8c:	4b55      	ldr	r3, [pc, #340]	; (8005ce4 <pvPortMalloc+0x174>)
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4013      	ands	r3, r2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f040 808c 	bne.w	8005cb2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d01c      	beq.n	8005bda <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005ba0:	2208      	movs	r2, #8
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f003 0307 	and.w	r3, r3, #7
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d013      	beq.n	8005bda <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f023 0307 	bic.w	r3, r3, #7
 8005bb8:	3308      	adds	r3, #8
 8005bba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f003 0307 	and.w	r3, r3, #7
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d009      	beq.n	8005bda <pvPortMalloc+0x6a>
 8005bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bca:	f383 8811 	msr	BASEPRI, r3
 8005bce:	f3bf 8f6f 	isb	sy
 8005bd2:	f3bf 8f4f 	dsb	sy
 8005bd6:	617b      	str	r3, [r7, #20]
 8005bd8:	e7fe      	b.n	8005bd8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d068      	beq.n	8005cb2 <pvPortMalloc+0x142>
 8005be0:	4b41      	ldr	r3, [pc, #260]	; (8005ce8 <pvPortMalloc+0x178>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d863      	bhi.n	8005cb2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005bea:	4b40      	ldr	r3, [pc, #256]	; (8005cec <pvPortMalloc+0x17c>)
 8005bec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005bee:	4b3f      	ldr	r3, [pc, #252]	; (8005cec <pvPortMalloc+0x17c>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bf4:	e004      	b.n	8005c00 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d903      	bls.n	8005c12 <pvPortMalloc+0xa2>
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1f1      	bne.n	8005bf6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c12:	4b33      	ldr	r3, [pc, #204]	; (8005ce0 <pvPortMalloc+0x170>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d04a      	beq.n	8005cb2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c1c:	6a3b      	ldr	r3, [r7, #32]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2208      	movs	r2, #8
 8005c22:	4413      	add	r3, r2
 8005c24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	6a3b      	ldr	r3, [r7, #32]
 8005c2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	1ad2      	subs	r2, r2, r3
 8005c36:	2308      	movs	r3, #8
 8005c38:	005b      	lsls	r3, r3, #1
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d91e      	bls.n	8005c7c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4413      	add	r3, r2
 8005c44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	f003 0307 	and.w	r3, r3, #7
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d009      	beq.n	8005c64 <pvPortMalloc+0xf4>
 8005c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c54:	f383 8811 	msr	BASEPRI, r3
 8005c58:	f3bf 8f6f 	isb	sy
 8005c5c:	f3bf 8f4f 	dsb	sy
 8005c60:	613b      	str	r3, [r7, #16]
 8005c62:	e7fe      	b.n	8005c62 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c66:	685a      	ldr	r2, [r3, #4]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	1ad2      	subs	r2, r2, r3
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c76:	69b8      	ldr	r0, [r7, #24]
 8005c78:	f000 f8f6 	bl	8005e68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c7c:	4b1a      	ldr	r3, [pc, #104]	; (8005ce8 <pvPortMalloc+0x178>)
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	4a18      	ldr	r2, [pc, #96]	; (8005ce8 <pvPortMalloc+0x178>)
 8005c88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c8a:	4b17      	ldr	r3, [pc, #92]	; (8005ce8 <pvPortMalloc+0x178>)
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	4b18      	ldr	r3, [pc, #96]	; (8005cf0 <pvPortMalloc+0x180>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d203      	bcs.n	8005c9e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c96:	4b14      	ldr	r3, [pc, #80]	; (8005ce8 <pvPortMalloc+0x178>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a15      	ldr	r2, [pc, #84]	; (8005cf0 <pvPortMalloc+0x180>)
 8005c9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca0:	685a      	ldr	r2, [r3, #4]
 8005ca2:	4b10      	ldr	r3, [pc, #64]	; (8005ce4 <pvPortMalloc+0x174>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005caa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cae:	2200      	movs	r2, #0
 8005cb0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005cb2:	f7fe fd35 	bl	8004720 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	f003 0307 	and.w	r3, r3, #7
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d009      	beq.n	8005cd4 <pvPortMalloc+0x164>
 8005cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc4:	f383 8811 	msr	BASEPRI, r3
 8005cc8:	f3bf 8f6f 	isb	sy
 8005ccc:	f3bf 8f4f 	dsb	sy
 8005cd0:	60fb      	str	r3, [r7, #12]
 8005cd2:	e7fe      	b.n	8005cd2 <pvPortMalloc+0x162>
	return pvReturn;
 8005cd4:	69fb      	ldr	r3, [r7, #28]
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3728      	adds	r7, #40	; 0x28
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	2000194c 	.word	0x2000194c
 8005ce4:	20001958 	.word	0x20001958
 8005ce8:	20001950 	.word	0x20001950
 8005cec:	20001944 	.word	0x20001944
 8005cf0:	20001954 	.word	0x20001954

08005cf4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d046      	beq.n	8005d94 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d06:	2308      	movs	r3, #8
 8005d08:	425b      	negs	r3, r3
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	4b20      	ldr	r3, [pc, #128]	; (8005d9c <vPortFree+0xa8>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d109      	bne.n	8005d36 <vPortFree+0x42>
 8005d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d26:	f383 8811 	msr	BASEPRI, r3
 8005d2a:	f3bf 8f6f 	isb	sy
 8005d2e:	f3bf 8f4f 	dsb	sy
 8005d32:	60fb      	str	r3, [r7, #12]
 8005d34:	e7fe      	b.n	8005d34 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d009      	beq.n	8005d52 <vPortFree+0x5e>
 8005d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d42:	f383 8811 	msr	BASEPRI, r3
 8005d46:	f3bf 8f6f 	isb	sy
 8005d4a:	f3bf 8f4f 	dsb	sy
 8005d4e:	60bb      	str	r3, [r7, #8]
 8005d50:	e7fe      	b.n	8005d50 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	685a      	ldr	r2, [r3, #4]
 8005d56:	4b11      	ldr	r3, [pc, #68]	; (8005d9c <vPortFree+0xa8>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d019      	beq.n	8005d94 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d115      	bne.n	8005d94 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	4b0b      	ldr	r3, [pc, #44]	; (8005d9c <vPortFree+0xa8>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	43db      	mvns	r3, r3
 8005d72:	401a      	ands	r2, r3
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d78:	f7fe fcc4 	bl	8004704 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	4b07      	ldr	r3, [pc, #28]	; (8005da0 <vPortFree+0xac>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4413      	add	r3, r2
 8005d86:	4a06      	ldr	r2, [pc, #24]	; (8005da0 <vPortFree+0xac>)
 8005d88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d8a:	6938      	ldr	r0, [r7, #16]
 8005d8c:	f000 f86c 	bl	8005e68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005d90:	f7fe fcc6 	bl	8004720 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005d94:	bf00      	nop
 8005d96:	3718      	adds	r7, #24
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	20001958 	.word	0x20001958
 8005da0:	20001950 	.word	0x20001950

08005da4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005daa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005dae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005db0:	4b27      	ldr	r3, [pc, #156]	; (8005e50 <prvHeapInit+0xac>)
 8005db2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f003 0307 	and.w	r3, r3, #7
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00c      	beq.n	8005dd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	3307      	adds	r3, #7
 8005dc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f023 0307 	bic.w	r3, r3, #7
 8005dca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	4a1f      	ldr	r2, [pc, #124]	; (8005e50 <prvHeapInit+0xac>)
 8005dd4:	4413      	add	r3, r2
 8005dd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ddc:	4a1d      	ldr	r2, [pc, #116]	; (8005e54 <prvHeapInit+0xb0>)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005de2:	4b1c      	ldr	r3, [pc, #112]	; (8005e54 <prvHeapInit+0xb0>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	4413      	add	r3, r2
 8005dee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005df0:	2208      	movs	r2, #8
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	1a9b      	subs	r3, r3, r2
 8005df6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f023 0307 	bic.w	r3, r3, #7
 8005dfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	4a15      	ldr	r2, [pc, #84]	; (8005e58 <prvHeapInit+0xb4>)
 8005e04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e06:	4b14      	ldr	r3, [pc, #80]	; (8005e58 <prvHeapInit+0xb4>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e0e:	4b12      	ldr	r3, [pc, #72]	; (8005e58 <prvHeapInit+0xb4>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2200      	movs	r2, #0
 8005e14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	1ad2      	subs	r2, r2, r3
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e24:	4b0c      	ldr	r3, [pc, #48]	; (8005e58 <prvHeapInit+0xb4>)
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	4a0a      	ldr	r2, [pc, #40]	; (8005e5c <prvHeapInit+0xb8>)
 8005e32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	4a09      	ldr	r2, [pc, #36]	; (8005e60 <prvHeapInit+0xbc>)
 8005e3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e3c:	4b09      	ldr	r3, [pc, #36]	; (8005e64 <prvHeapInit+0xc0>)
 8005e3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005e42:	601a      	str	r2, [r3, #0]
}
 8005e44:	bf00      	nop
 8005e46:	3714      	adds	r7, #20
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr
 8005e50:	20000d44 	.word	0x20000d44
 8005e54:	20001944 	.word	0x20001944
 8005e58:	2000194c 	.word	0x2000194c
 8005e5c:	20001954 	.word	0x20001954
 8005e60:	20001950 	.word	0x20001950
 8005e64:	20001958 	.word	0x20001958

08005e68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e70:	4b28      	ldr	r3, [pc, #160]	; (8005f14 <prvInsertBlockIntoFreeList+0xac>)
 8005e72:	60fb      	str	r3, [r7, #12]
 8005e74:	e002      	b.n	8005e7c <prvInsertBlockIntoFreeList+0x14>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	60fb      	str	r3, [r7, #12]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d8f7      	bhi.n	8005e76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	4413      	add	r3, r2
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d108      	bne.n	8005eaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	441a      	add	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	441a      	add	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d118      	bne.n	8005ef0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	4b15      	ldr	r3, [pc, #84]	; (8005f18 <prvInsertBlockIntoFreeList+0xb0>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d00d      	beq.n	8005ee6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	441a      	add	r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	601a      	str	r2, [r3, #0]
 8005ee4:	e008      	b.n	8005ef8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ee6:	4b0c      	ldr	r3, [pc, #48]	; (8005f18 <prvInsertBlockIntoFreeList+0xb0>)
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	601a      	str	r2, [r3, #0]
 8005eee:	e003      	b.n	8005ef8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d002      	beq.n	8005f06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f06:	bf00      	nop
 8005f08:	3714      	adds	r7, #20
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	20001944 	.word	0x20001944
 8005f18:	2000194c 	.word	0x2000194c

08005f1c <__libc_init_array>:
 8005f1c:	b570      	push	{r4, r5, r6, lr}
 8005f1e:	4e0d      	ldr	r6, [pc, #52]	; (8005f54 <__libc_init_array+0x38>)
 8005f20:	4c0d      	ldr	r4, [pc, #52]	; (8005f58 <__libc_init_array+0x3c>)
 8005f22:	1ba4      	subs	r4, r4, r6
 8005f24:	10a4      	asrs	r4, r4, #2
 8005f26:	2500      	movs	r5, #0
 8005f28:	42a5      	cmp	r5, r4
 8005f2a:	d109      	bne.n	8005f40 <__libc_init_array+0x24>
 8005f2c:	4e0b      	ldr	r6, [pc, #44]	; (8005f5c <__libc_init_array+0x40>)
 8005f2e:	4c0c      	ldr	r4, [pc, #48]	; (8005f60 <__libc_init_array+0x44>)
 8005f30:	f000 f840 	bl	8005fb4 <_init>
 8005f34:	1ba4      	subs	r4, r4, r6
 8005f36:	10a4      	asrs	r4, r4, #2
 8005f38:	2500      	movs	r5, #0
 8005f3a:	42a5      	cmp	r5, r4
 8005f3c:	d105      	bne.n	8005f4a <__libc_init_array+0x2e>
 8005f3e:	bd70      	pop	{r4, r5, r6, pc}
 8005f40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f44:	4798      	blx	r3
 8005f46:	3501      	adds	r5, #1
 8005f48:	e7ee      	b.n	8005f28 <__libc_init_array+0xc>
 8005f4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f4e:	4798      	blx	r3
 8005f50:	3501      	adds	r5, #1
 8005f52:	e7f2      	b.n	8005f3a <__libc_init_array+0x1e>
 8005f54:	080060bc 	.word	0x080060bc
 8005f58:	080060bc 	.word	0x080060bc
 8005f5c:	080060bc 	.word	0x080060bc
 8005f60:	080060c0 	.word	0x080060c0

08005f64 <memcpy>:
 8005f64:	b510      	push	{r4, lr}
 8005f66:	1e43      	subs	r3, r0, #1
 8005f68:	440a      	add	r2, r1
 8005f6a:	4291      	cmp	r1, r2
 8005f6c:	d100      	bne.n	8005f70 <memcpy+0xc>
 8005f6e:	bd10      	pop	{r4, pc}
 8005f70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f78:	e7f7      	b.n	8005f6a <memcpy+0x6>

08005f7a <memset>:
 8005f7a:	4402      	add	r2, r0
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d100      	bne.n	8005f84 <memset+0xa>
 8005f82:	4770      	bx	lr
 8005f84:	f803 1b01 	strb.w	r1, [r3], #1
 8005f88:	e7f9      	b.n	8005f7e <memset+0x4>

08005f8a <strncpy>:
 8005f8a:	b570      	push	{r4, r5, r6, lr}
 8005f8c:	3901      	subs	r1, #1
 8005f8e:	4604      	mov	r4, r0
 8005f90:	b902      	cbnz	r2, 8005f94 <strncpy+0xa>
 8005f92:	bd70      	pop	{r4, r5, r6, pc}
 8005f94:	4623      	mov	r3, r4
 8005f96:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8005f9a:	f803 5b01 	strb.w	r5, [r3], #1
 8005f9e:	1e56      	subs	r6, r2, #1
 8005fa0:	b92d      	cbnz	r5, 8005fae <strncpy+0x24>
 8005fa2:	4414      	add	r4, r2
 8005fa4:	42a3      	cmp	r3, r4
 8005fa6:	d0f4      	beq.n	8005f92 <strncpy+0x8>
 8005fa8:	f803 5b01 	strb.w	r5, [r3], #1
 8005fac:	e7fa      	b.n	8005fa4 <strncpy+0x1a>
 8005fae:	461c      	mov	r4, r3
 8005fb0:	4632      	mov	r2, r6
 8005fb2:	e7ed      	b.n	8005f90 <strncpy+0x6>

08005fb4 <_init>:
 8005fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fb6:	bf00      	nop
 8005fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fba:	bc08      	pop	{r3}
 8005fbc:	469e      	mov	lr, r3
 8005fbe:	4770      	bx	lr

08005fc0 <_fini>:
 8005fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fc2:	bf00      	nop
 8005fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fc6:	bc08      	pop	{r3}
 8005fc8:	469e      	mov	lr, r3
 8005fca:	4770      	bx	lr
