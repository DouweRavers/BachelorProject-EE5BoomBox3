
EE5BoomBox3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c94  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08007e74  08007e74  00017e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f70  08007f70  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  08007f70  08007f70  00017f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f78  08007f78  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f78  08007f78  00017f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f7c  08007f7c  00017f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08007f80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001acc  20000034  08007fb4  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b00  08007fb4  00021b00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   000221f3  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b30  00000000  00000000  00042257  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c10  00000000  00000000  00045d88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a58  00000000  00000000  00047998  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021eb0  00000000  00000000  000493f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000168bc  00000000  00000000  0006b2a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e3da8  00000000  00000000  00081b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00165904  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077fc  00000000  00000000  00165980  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000034 	.word	0x20000034
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007e5c 	.word	0x08007e5c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000038 	.word	0x20000038
 800021c:	08007e5c 	.word	0x08007e5c

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <delay>:
#define timer htim6


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 800052a:	4b08      	ldr	r3, [pc, #32]	; (800054c <delay+0x2c>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	2200      	movs	r2, #0
 8000530:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8000532:	bf00      	nop
 8000534:	4b05      	ldr	r3, [pc, #20]	; (800054c <delay+0x2c>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800053a:	88fb      	ldrh	r3, [r7, #6]
 800053c:	429a      	cmp	r2, r3
 800053e:	d3f9      	bcc.n	8000534 <delay+0x14>
}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	200019e4 	.word	0x200019e4

08000550 <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	6039      	str	r1, [r7, #0]
 800055a:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	b2db      	uxtb	r3, r3
 8000560:	461a      	mov	r2, r3
 8000562:	2101      	movs	r1, #1
 8000564:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000568:	f002 ffa4 	bl	80034b4 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	08db      	lsrs	r3, r3, #3
 8000570:	b2db      	uxtb	r3, r3
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	b2db      	uxtb	r3, r3
 8000578:	461a      	mov	r2, r3
 800057a:	2180      	movs	r1, #128	; 0x80
 800057c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000580:	f002 ff98 	bl	80034b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	089b      	lsrs	r3, r3, #2
 8000588:	b2db      	uxtb	r3, r3
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	b2db      	uxtb	r3, r3
 8000590:	461a      	mov	r2, r3
 8000592:	2140      	movs	r1, #64	; 0x40
 8000594:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000598:	f002 ff8c 	bl	80034b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	085b      	lsrs	r3, r3, #1
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	461a      	mov	r2, r3
 80005aa:	2120      	movs	r1, #32
 80005ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b0:	f002 ff80 	bl	80034b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	461a      	mov	r2, r3
 80005be:	2110      	movs	r1, #16
 80005c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c4:	f002 ff76 	bl	80034b4 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 80005c8:	2201      	movs	r2, #1
 80005ca:	2102      	movs	r1, #2
 80005cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d0:	f002 ff70 	bl	80034b4 <HAL_GPIO_WritePin>
	delay (20);
 80005d4:	2014      	movs	r0, #20
 80005d6:	f7ff ffa3 	bl	8000520 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 80005da:	2200      	movs	r2, #0
 80005dc:	2102      	movs	r1, #2
 80005de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e2:	f002 ff67 	bl	80034b4 <HAL_GPIO_WritePin>
	delay (20);
 80005e6:	2014      	movs	r0, #20
 80005e8:	f7ff ff9a 	bl	8000520 <delay>
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	091b      	lsrs	r3, r3, #4
 8000602:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff ffa1 	bl	8000550 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	f003 030f 	and.w	r3, r3, #15
 8000614:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ff98 	bl	8000550 <send_to_lcd>
}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	091b      	lsrs	r3, r3, #4
 8000636:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	2101      	movs	r1, #1
 800063c:	4618      	mov	r0, r3
 800063e:	f7ff ff87 	bl	8000550 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	f003 030f 	and.w	r3, r3, #15
 8000648:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	2101      	movs	r1, #1
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff ff7e 	bl	8000550 <send_to_lcd>
}
 8000654:	bf00      	nop
 8000656:	3710      	adds	r7, #16
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <lcd_clear>:

void lcd_clear (void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000660:	2001      	movs	r0, #1
 8000662:	f7ff ffc7 	bl	80005f4 <lcd_send_cmd>
	osDelay(2);
 8000666:	2002      	movs	r0, #2
 8000668:	f004 ff90 	bl	800558c <osDelay>
}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}

08000670 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
    switch (row)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d002      	beq.n	8000686 <lcd_put_cur+0x16>
 8000680:	2b01      	cmp	r3, #1
 8000682:	d005      	beq.n	8000690 <lcd_put_cur+0x20>
 8000684:	e009      	b.n	800069a <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800068c:	603b      	str	r3, [r7, #0]
            break;
 800068e:	e004      	b.n	800069a <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000696:	603b      	str	r3, [r7, #0]
            break;
 8000698:	bf00      	nop
    }

    lcd_send_cmd (col);
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff ffa8 	bl	80005f4 <lcd_send_cmd>
}
 80006a4:	bf00      	nop
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <lcd_init>:


void lcd_init (void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	osDelay(50);  // wait for >40ms
 80006b0:	2032      	movs	r0, #50	; 0x32
 80006b2:	f004 ff6b 	bl	800558c <osDelay>
	lcd_send_cmd (0x30);
 80006b6:	2030      	movs	r0, #48	; 0x30
 80006b8:	f7ff ff9c 	bl	80005f4 <lcd_send_cmd>
	osDelay(5);  // wait for >4.1ms
 80006bc:	2005      	movs	r0, #5
 80006be:	f004 ff65 	bl	800558c <osDelay>
	lcd_send_cmd (0x30);
 80006c2:	2030      	movs	r0, #48	; 0x30
 80006c4:	f7ff ff96 	bl	80005f4 <lcd_send_cmd>
	osDelay(1);  // wait for >100us
 80006c8:	2001      	movs	r0, #1
 80006ca:	f004 ff5f 	bl	800558c <osDelay>
	lcd_send_cmd (0x30);
 80006ce:	2030      	movs	r0, #48	; 0x30
 80006d0:	f7ff ff90 	bl	80005f4 <lcd_send_cmd>
	osDelay(10);
 80006d4:	200a      	movs	r0, #10
 80006d6:	f004 ff59 	bl	800558c <osDelay>
	lcd_send_cmd (0x20);  // 4bit mode
 80006da:	2020      	movs	r0, #32
 80006dc:	f7ff ff8a 	bl	80005f4 <lcd_send_cmd>
	osDelay(10);
 80006e0:	200a      	movs	r0, #10
 80006e2:	f004 ff53 	bl	800558c <osDelay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80006e6:	2028      	movs	r0, #40	; 0x28
 80006e8:	f7ff ff84 	bl	80005f4 <lcd_send_cmd>
	osDelay(1);
 80006ec:	2001      	movs	r0, #1
 80006ee:	f004 ff4d 	bl	800558c <osDelay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80006f2:	2008      	movs	r0, #8
 80006f4:	f7ff ff7e 	bl	80005f4 <lcd_send_cmd>
	osDelay(1);
 80006f8:	2001      	movs	r0, #1
 80006fa:	f004 ff47 	bl	800558c <osDelay>
	lcd_send_cmd (0x01);  // clear display
 80006fe:	2001      	movs	r0, #1
 8000700:	f7ff ff78 	bl	80005f4 <lcd_send_cmd>
	osDelay(1);
 8000704:	2001      	movs	r0, #1
 8000706:	f004 ff41 	bl	800558c <osDelay>
	osDelay(1);
 800070a:	2001      	movs	r0, #1
 800070c:	f004 ff3e 	bl	800558c <osDelay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000710:	2006      	movs	r0, #6
 8000712:	f7ff ff6f 	bl	80005f4 <lcd_send_cmd>
	osDelay(1);
 8000716:	2001      	movs	r0, #1
 8000718:	f004 ff38 	bl	800558c <osDelay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800071c:	200c      	movs	r0, #12
 800071e:	f7ff ff69 	bl	80005f4 <lcd_send_cmd>
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}

08000726 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	b082      	sub	sp, #8
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800072e:	e006      	b.n	800073e <lcd_send_string+0x18>
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	1c5a      	adds	r2, r3, #1
 8000734:	607a      	str	r2, [r7, #4]
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff ff75 	bl	8000628 <lcd_send_data>
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d1f4      	bne.n	8000730 <lcd_send_string+0xa>
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <init_app>:
#include "appmain.h"
#include "main.h"
#include "cmsis_os.h"

void init_app()
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0

}
 8000752:	bf00      	nop
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr

0800075c <tick_app>:

void tick_app()
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	osDelay(1000);
 8000760:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000764:	f004 ff12 	bl	800558c <osDelay>
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}

0800076c <init_interface>:
void buttons_update(unsigned  char frame);
void buttons_controller( uint32_t value);

// public functions
void init_interface()
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	lcd_init ();
 8000770:	f7ff ff9c 	bl	80006ac <lcd_init>
}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}

08000778 <tick_interface>:

void tick_interface(uint32_t frame)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	// at 30Hz the uint of frame will loop back after 100 years
	interface_update(frame);
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f000 f8a4 	bl	80008ce <interface_update>
	volume_update(frame);
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f000 f906 	bl	8000998 <volume_update>
	buttons_update(frame);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	b2db      	uxtb	r3, r3
 8000790:	4618      	mov	r0, r3
 8000792:	f000 f8f1 	bl	8000978 <buttons_update>
	screen_update(frame);
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f000 f8a4 	bl	80008e4 <screen_update>
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <interrupt_interface>:


void interrupt_interface(uint16_t GPIO_Pin , ADC_HandleTypeDef *hadc1)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	6039      	str	r1, [r7, #0]
 80007ae:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_9)
 80007b0:	88fb      	ldrh	r3, [r7, #6]
 80007b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80007b6:	d113      	bne.n	80007e0 <interrupt_interface+0x3c>
	{
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 1) volume_delta++;
 80007b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c0:	f002 fe60 	bl	8003484 <HAL_GPIO_ReadPin>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d105      	bne.n	80007d6 <interrupt_interface+0x32>
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <interrupt_interface+0x54>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	3301      	adds	r3, #1
 80007d0:	4a09      	ldr	r2, [pc, #36]	; (80007f8 <interrupt_interface+0x54>)
 80007d2:	6013      	str	r3, [r2, #0]
 80007d4:	e004      	b.n	80007e0 <interrupt_interface+0x3c>
		else volume_delta--;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <interrupt_interface+0x54>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	3b01      	subs	r3, #1
 80007dc:	4a06      	ldr	r2, [pc, #24]	; (80007f8 <interrupt_interface+0x54>)
 80007de:	6013      	str	r3, [r2, #0]
	}

	if(GPIO_Pin == GPIO_PIN_8){
 80007e0:	88fb      	ldrh	r3, [r7, #6]
 80007e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80007e6:	d102      	bne.n	80007ee <interrupt_interface+0x4a>
		HAL_ADC_Start_IT(hadc1);
 80007e8:	6838      	ldr	r0, [r7, #0]
 80007ea:	f001 f9c1 	bl	8001b70 <HAL_ADC_Start_IT>
	}
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000054 	.word	0x20000054

080007fc <interrupt_adc_interface>:

void interrupt_adc_interface(ADC_HandleTypeDef *hadc){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	    value_adc = HAL_ADC_GetValue(hadc);
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f001 fb22 	bl	8001e4e <HAL_ADC_GetValue>
 800080a:	4602      	mov	r2, r0
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <interrupt_adc_interface+0x2c>)
 800080e:	601a      	str	r2, [r3, #0]
	    buttons_controller ( value_adc);
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <interrupt_adc_interface+0x2c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4618      	mov	r0, r3
 8000816:	f000 f809 	bl	800082c <buttons_controller>
	    HAL_ADC_Stop_IT(hadc);
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f001 fadc 	bl	8001dd8 <HAL_ADC_Stop_IT>

}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	2000196c 	.word	0x2000196c

0800082c <buttons_controller>:


// private functions
 void buttons_controller( uint32_t value){
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]

	unsigned char button = NO_SELECTION;
 8000834:	2305      	movs	r3, #5
 8000836:	73fb      	strb	r3, [r7, #15]
	// I use a marge of +- 100
	if(value <= 100 ){
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2b64      	cmp	r3, #100	; 0x64
 800083c:	d802      	bhi.n	8000844 <buttons_controller+0x18>
		button = NO_SELECTION;
 800083e:	2305      	movs	r3, #5
 8000840:	73fb      	strb	r3, [r7, #15]
 8000842:	e039      	b.n	80008b8 <buttons_controller+0x8c>

	}
	else if ( value >= 1781 && value <= 1981){
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f240 62f4 	movw	r2, #1780	; 0x6f4
 800084a:	4293      	cmp	r3, r2
 800084c:	d907      	bls.n	800085e <buttons_controller+0x32>
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8000854:	4293      	cmp	r3, r2
 8000856:	d802      	bhi.n	800085e <buttons_controller+0x32>
		button = SELECT;
 8000858:	2300      	movs	r3, #0
 800085a:	73fb      	strb	r3, [r7, #15]
 800085c:	e02c      	b.n	80008b8 <buttons_controller+0x8c>
	}
	else if ( value >= 2109 && value <= 2309){
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	f640 023c 	movw	r2, #2108	; 0x83c
 8000864:	4293      	cmp	r3, r2
 8000866:	d907      	bls.n	8000878 <buttons_controller+0x4c>
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f640 1205 	movw	r2, #2309	; 0x905
 800086e:	4293      	cmp	r3, r2
 8000870:	d802      	bhi.n	8000878 <buttons_controller+0x4c>
		button = UP;
 8000872:	2301      	movs	r3, #1
 8000874:	73fb      	strb	r3, [r7, #15]
 8000876:	e01f      	b.n	80008b8 <buttons_controller+0x8c>
	}

	else if (value >=  2432 && value <= 2632){
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f5b3 6f18 	cmp.w	r3, #2432	; 0x980
 800087e:	d307      	bcc.n	8000890 <buttons_controller+0x64>
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f640 2248 	movw	r2, #2632	; 0xa48
 8000886:	4293      	cmp	r3, r2
 8000888:	d802      	bhi.n	8000890 <buttons_controller+0x64>
		button = RIGHT;
 800088a:	2302      	movs	r3, #2
 800088c:	73fb      	strb	r3, [r7, #15]
 800088e:	e013      	b.n	80008b8 <buttons_controller+0x8c>
	}

	else if (value >= 2953 && value <= 3153){
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f640 3288 	movw	r2, #2952	; 0xb88
 8000896:	4293      	cmp	r3, r2
 8000898:	d907      	bls.n	80008aa <buttons_controller+0x7e>
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	f640 4251 	movw	r2, #3153	; 0xc51
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d802      	bhi.n	80008aa <buttons_controller+0x7e>
		button= DOWN;
 80008a4:	2304      	movs	r3, #4
 80008a6:	73fb      	strb	r3, [r7, #15]
 80008a8:	e006      	b.n	80008b8 <buttons_controller+0x8c>
	}
	else if ( value >= 3700){
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f640 6273 	movw	r2, #3699	; 0xe73
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d901      	bls.n	80008b8 <buttons_controller+0x8c>
		button =  LEFT;
 80008b4:	2303      	movs	r3, #3
 80008b6:	73fb      	strb	r3, [r7, #15]
	}

	if(button != NO_SELECTION) buttons_update(button);
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
 80008ba:	2b05      	cmp	r3, #5
 80008bc:	d003      	beq.n	80008c6 <buttons_controller+0x9a>
 80008be:	7bfb      	ldrb	r3, [r7, #15]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 f859 	bl	8000978 <buttons_update>

}
 80008c6:	bf00      	nop
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <interface_update>:

void interface_update(uint32_t frame)
{
 80008ce:	b480      	push	{r7}
 80008d0:	b083      	sub	sp, #12
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]

}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
	...

080008e4 <screen_update>:


void screen_update(uint32_t frame)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	if(current_screen == VolumeScreen && frame - screen_start_time > 60)
 80008ec:	4b1d      	ldr	r3, [pc, #116]	; (8000964 <screen_update+0x80>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d10c      	bne.n	800090e <screen_update+0x2a>
 80008f4:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <screen_update+0x84>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	1ad3      	subs	r3, r2, r3
 80008fc:	2b3c      	cmp	r3, #60	; 0x3c
 80008fe:	d906      	bls.n	800090e <screen_update+0x2a>
	{
		current_screen = previous_screen;
 8000900:	4b1a      	ldr	r3, [pc, #104]	; (800096c <screen_update+0x88>)
 8000902:	781a      	ldrb	r2, [r3, #0]
 8000904:	4b17      	ldr	r3, [pc, #92]	; (8000964 <screen_update+0x80>)
 8000906:	701a      	strb	r2, [r3, #0]
		screen_updated = true;
 8000908:	4b19      	ldr	r3, [pc, #100]	; (8000970 <screen_update+0x8c>)
 800090a:	2201      	movs	r2, #1
 800090c:	701a      	strb	r2, [r3, #0]
	}
	if(screen_updated)
 800090e:	4b18      	ldr	r3, [pc, #96]	; (8000970 <screen_update+0x8c>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d022      	beq.n	800095c <screen_update+0x78>
	{
		lcd_clear();
 8000916:	f7ff fea1 	bl	800065c <lcd_clear>
		lcd_send_string(screens[current_screen].GetFirstLine(frame));
 800091a:	4b12      	ldr	r3, [pc, #72]	; (8000964 <screen_update+0x80>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	4a15      	ldr	r2, [pc, #84]	; (8000974 <screen_update+0x90>)
 8000920:	011b      	lsls	r3, r3, #4
 8000922:	4413      	add	r3, r2
 8000924:	3304      	adds	r3, #4
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	4798      	blx	r3
 800092c:	4603      	mov	r3, r0
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff fef9 	bl	8000726 <lcd_send_string>
		lcd_put_cur(1,0);
 8000934:	2100      	movs	r1, #0
 8000936:	2001      	movs	r0, #1
 8000938:	f7ff fe9a 	bl	8000670 <lcd_put_cur>
		lcd_send_string(screens[current_screen].GetSecondLine(frame));
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <screen_update+0x80>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	4a0c      	ldr	r2, [pc, #48]	; (8000974 <screen_update+0x90>)
 8000942:	011b      	lsls	r3, r3, #4
 8000944:	4413      	add	r3, r2
 8000946:	3308      	adds	r3, #8
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	4798      	blx	r3
 800094e:	4603      	mov	r3, r0
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fee8 	bl	8000726 <lcd_send_string>
		screen_updated = false;
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <screen_update+0x8c>)
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]
	}
}
 800095c:	bf00      	nop
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000001 	.word	0x20000001
 8000968:	2000005c 	.word	0x2000005c
 800096c:	20000000 	.word	0x20000000
 8000970:	20000058 	.word	0x20000058
 8000974:	20000004 	.word	0x20000004

08000978 <buttons_update>:

void buttons_update(unsigned char button)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	71fb      	strb	r3, [r7, #7]
	screen_updated = true;
 8000982:	4b04      	ldr	r3, [pc, #16]	; (8000994 <buttons_update+0x1c>)
 8000984:	2201      	movs	r2, #1
 8000986:	701a      	strb	r2, [r3, #0]
}
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	20000058 	.word	0x20000058

08000998 <volume_update>:

// Volume wheel driver. Handles input of volume wheel.
void volume_update(uint32_t frame)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	if(frame % 2 == 0) // prescaler (checks every 2 frames (15Hz))
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d134      	bne.n	8000a14 <volume_update+0x7c>
	{
		if(volume_delta > 0 && volume_level < 20) { volume_level++; }
 80009aa:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <volume_update+0x88>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	dd0a      	ble.n	80009c8 <volume_update+0x30>
 80009b2:	4b1c      	ldr	r3, [pc, #112]	; (8000a24 <volume_update+0x8c>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b13      	cmp	r3, #19
 80009b8:	d806      	bhi.n	80009c8 <volume_update+0x30>
 80009ba:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <volume_update+0x8c>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	3301      	adds	r3, #1
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <volume_update+0x8c>)
 80009c4:	701a      	strb	r2, [r3, #0]
 80009c6:	e00d      	b.n	80009e4 <volume_update+0x4c>
		else if(volume_delta < 0 && volume_level > 0) { volume_level--; }
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <volume_update+0x88>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	da09      	bge.n	80009e4 <volume_update+0x4c>
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <volume_update+0x8c>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d005      	beq.n	80009e4 <volume_update+0x4c>
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <volume_update+0x8c>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	3b01      	subs	r3, #1
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <volume_update+0x8c>)
 80009e2:	701a      	strb	r2, [r3, #0]
		if(volume_delta != 0) {
 80009e4:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <volume_update+0x88>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d013      	beq.n	8000a14 <volume_update+0x7c>
			volume_delta = 0;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <volume_update+0x88>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
			screen_updated = true;
 80009f2:	4b0d      	ldr	r3, [pc, #52]	; (8000a28 <volume_update+0x90>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	701a      	strb	r2, [r3, #0]
			if(current_screen != VolumeScreen) previous_screen = current_screen;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <volume_update+0x94>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d003      	beq.n	8000a08 <volume_update+0x70>
 8000a00:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <volume_update+0x94>)
 8000a02:	781a      	ldrb	r2, [r3, #0]
 8000a04:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <volume_update+0x98>)
 8000a06:	701a      	strb	r2, [r3, #0]
			current_screen = VolumeScreen;
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <volume_update+0x94>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	701a      	strb	r2, [r3, #0]
			screen_start_time = frame;
 8000a0e:	4a09      	ldr	r2, [pc, #36]	; (8000a34 <volume_update+0x9c>)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	20000054 	.word	0x20000054
 8000a24:	20000050 	.word	0x20000050
 8000a28:	20000058 	.word	0x20000058
 8000a2c:	20000001 	.word	0x20000001
 8000a30:	20000000 	.word	0x20000000
 8000a34:	2000005c 	.word	0x2000005c

08000a38 <firstVolume>:
		{ VolumeScreen, &firstVolume, &secondVolume, &windowAtVolume },
		{ StartScreen, &firstStart, &secondStart, &windowAtStart }
};

// Volume screen
char* firstVolume(uint32_t frame){ return "     Volume"; }
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	4b03      	ldr	r3, [pc, #12]	; (8000a50 <firstVolume+0x18>)
 8000a42:	4618      	mov	r0, r3
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	08007e74 	.word	0x08007e74

08000a54 <secondVolume>:

char* secondVolume(uint32_t frame){
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	char* vol = "                "; // 16 spaces
 8000a5c:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <secondVolume+0x4c>)
 8000a5e:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<16;i++)
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	e012      	b.n	8000a8c <secondVolume+0x38>
	{
		if(i * 20 < volume_level * 16 ) vol[i] = '\xff';
 8000a66:	68fa      	ldr	r2, [r7, #12]
 8000a68:	4613      	mov	r3, r2
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	4413      	add	r3, r2
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	461a      	mov	r2, r3
 8000a72:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <secondVolume+0x50>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	011b      	lsls	r3, r3, #4
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	da04      	bge.n	8000a86 <secondVolume+0x32>
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	68ba      	ldr	r2, [r7, #8]
 8000a80:	4413      	add	r3, r2
 8000a82:	22ff      	movs	r2, #255	; 0xff
 8000a84:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<16;i++)
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	2b0f      	cmp	r3, #15
 8000a90:	dde9      	ble.n	8000a66 <secondVolume+0x12>
	}
	return vol;
 8000a92:	68bb      	ldr	r3, [r7, #8]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	08007e80 	.word	0x08007e80
 8000aa4:	20000050 	.word	0x20000050

08000aa8 <windowAtVolume>:

enum screentype windowAtVolume(enum direction dir){
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
	// a button is pressed the volume screen should dissapear and the last menu one should appear
	return StartScreen;
 8000ab2:	2301      	movs	r3, #1
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <firstStart>:

// Start screen
char* firstStart(uint32_t frame){ return "    MainMenu"; }
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	4b03      	ldr	r3, [pc, #12]	; (8000ad8 <firstStart+0x18>)
 8000aca:	4618      	mov	r0, r3
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	08007e94 	.word	0x08007e94

08000adc <secondStart>:
char* secondStart(uint32_t frame){ return " In development"; }
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <secondStart+0x18>)
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	08007ea4 	.word	0x08007ea4

08000af8 <windowAtStart>:
enum screentype windowAtStart(enum direction dir){
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]
	return VolumeScreen;
 8000b02:	2300      	movs	r3, #0
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b14:	f000 fba5 	bl	8001262 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b18:	f000 f82e 	bl	8000b78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b1c:	f000 f990 	bl	8000e40 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b20:	f000 f942 	bl	8000da8 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000b24:	f000 f90a 	bl	8000d3c <MX_TIM6_Init>
  MX_ADC1_Init();
 8000b28:	f000 f890 	bl	8000c4c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 8000b2c:	480b      	ldr	r0, [pc, #44]	; (8000b5c <main+0x4c>)
 8000b2e:	f003 fd21 	bl	8004574 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b32:	f004 fc1b 	bl	800536c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mainTask */
  mainTaskHandle = osThreadNew(StartMainTask, NULL, &mainTask_attributes);
 8000b36:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <main+0x50>)
 8000b38:	2100      	movs	r1, #0
 8000b3a:	480a      	ldr	r0, [pc, #40]	; (8000b64 <main+0x54>)
 8000b3c:	f004 fc80 	bl	8005440 <osThreadNew>
 8000b40:	4602      	mov	r2, r0
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <main+0x58>)
 8000b44:	601a      	str	r2, [r3, #0]

  /* creation of InterfaceTask */
  InterfaceTaskHandle = osThreadNew(StartInterfaceTask, NULL, &InterfaceTask_attributes);
 8000b46:	4a09      	ldr	r2, [pc, #36]	; (8000b6c <main+0x5c>)
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4809      	ldr	r0, [pc, #36]	; (8000b70 <main+0x60>)
 8000b4c:	f004 fc78 	bl	8005440 <osThreadNew>
 8000b50:	4602      	mov	r2, r0
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <main+0x64>)
 8000b54:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b56:	f004 fc3d 	bl	80053d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <main+0x4a>
 8000b5c:	200019e4 	.word	0x200019e4
 8000b60:	08007ef8 	.word	0x08007ef8
 8000b64:	08000f8f 	.word	0x08000f8f
 8000b68:	20001970 	.word	0x20001970
 8000b6c:	08007f1c 	.word	0x08007f1c
 8000b70:	08000fa1 	.word	0x08000fa1
 8000b74:	20001974 	.word	0x20001974

08000b78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b0a4      	sub	sp, #144	; 0x90
 8000b7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b7e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b82:	2238      	movs	r2, #56	; 0x38
 8000b84:	2100      	movs	r1, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f007 f95f 	bl	8007e4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b8c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	2244      	movs	r2, #68	; 0x44
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f007 f951 	bl	8007e4a <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f002 fcb3 	bl	8003514 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bb6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bb8:	2340      	movs	r3, #64	; 0x40
 8000bba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000bc4:	2304      	movs	r3, #4
 8000bc6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000bc8:	2355      	movs	r3, #85	; 0x55
 8000bca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000be4:	4618      	mov	r0, r3
 8000be6:	f002 fd49 	bl	800367c <HAL_RCC_OscConfig>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000bf0:	f000 f9e8 	bl	8000fc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf4:	230f      	movs	r3, #15
 8000bf6:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c04:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c0a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c0e:	2104      	movs	r1, #4
 8000c10:	4618      	mov	r0, r3
 8000c12:	f003 f84b 	bl	8003cac <HAL_RCC_ClockConfig>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000c1c:	f000 f9d2 	bl	8000fc4 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 8000c20:	f248 0302 	movw	r3, #32770	; 0x8002
 8000c24:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000c2a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c30:	463b      	mov	r3, r7
 8000c32:	4618      	mov	r0, r3
 8000c34:	f003 fa56 	bl	80040e4 <HAL_RCCEx_PeriphCLKConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000c3e:	f000 f9c1 	bl	8000fc4 <Error_Handler>
  }
}
 8000c42:	bf00      	nop
 8000c44:	3790      	adds	r7, #144	; 0x90
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08c      	sub	sp, #48	; 0x30
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	2220      	movs	r2, #32
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f007 f8f0 	bl	8007e4a <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c6a:	4b32      	ldr	r3, [pc, #200]	; (8000d34 <MX_ADC1_Init+0xe8>)
 8000c6c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c70:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c72:	4b30      	ldr	r3, [pc, #192]	; (8000d34 <MX_ADC1_Init+0xe8>)
 8000c74:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c78:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c7a:	4b2e      	ldr	r3, [pc, #184]	; (8000d34 <MX_ADC1_Init+0xe8>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c80:	4b2c      	ldr	r3, [pc, #176]	; (8000d34 <MX_ADC1_Init+0xe8>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000c86:	4b2b      	ldr	r3, [pc, #172]	; (8000d34 <MX_ADC1_Init+0xe8>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c8c:	4b29      	ldr	r3, [pc, #164]	; (8000d34 <MX_ADC1_Init+0xe8>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c92:	4b28      	ldr	r3, [pc, #160]	; (8000d34 <MX_ADC1_Init+0xe8>)
 8000c94:	2204      	movs	r2, #4
 8000c96:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c98:	4b26      	ldr	r3, [pc, #152]	; (8000d34 <MX_ADC1_Init+0xe8>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c9e:	4b25      	ldr	r3, [pc, #148]	; (8000d34 <MX_ADC1_Init+0xe8>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000ca4:	4b23      	ldr	r3, [pc, #140]	; (8000d34 <MX_ADC1_Init+0xe8>)
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000caa:	4b22      	ldr	r3, [pc, #136]	; (8000d34 <MX_ADC1_Init+0xe8>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cb2:	4b20      	ldr	r3, [pc, #128]	; (8000d34 <MX_ADC1_Init+0xe8>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cb8:	4b1e      	ldr	r3, [pc, #120]	; (8000d34 <MX_ADC1_Init+0xe8>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <MX_ADC1_Init+0xe8>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cc6:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <MX_ADC1_Init+0xe8>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000ccc:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <MX_ADC1_Init+0xe8>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cd4:	4817      	ldr	r0, [pc, #92]	; (8000d34 <MX_ADC1_Init+0xe8>)
 8000cd6:	f000 fdc3 	bl	8001860 <HAL_ADC_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000ce0:	f000 f970 	bl	8000fc4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cec:	4619      	mov	r1, r3
 8000cee:	4811      	ldr	r0, [pc, #68]	; (8000d34 <MX_ADC1_Init+0xe8>)
 8000cf0:	f002 f896 	bl	8002e20 <HAL_ADCEx_MultiModeConfigChannel>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000cfa:	f000 f963 	bl	8000fc4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <MX_ADC1_Init+0xec>)
 8000d00:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d02:	2306      	movs	r3, #6
 8000d04:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d0a:	237f      	movs	r3, #127	; 0x7f
 8000d0c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d0e:	2304      	movs	r3, #4
 8000d10:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4806      	ldr	r0, [pc, #24]	; (8000d34 <MX_ADC1_Init+0xe8>)
 8000d1c:	f001 fad2 	bl	80022c4 <HAL_ADC_ConfigChannel>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000d26:	f000 f94d 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d2a:	bf00      	nop
 8000d2c:	3730      	adds	r7, #48	; 0x30
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20001978 	.word	0x20001978
 8000d38:	3ef08000 	.word	0x3ef08000

08000d3c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d4c:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <MX_TIM6_Init+0x64>)
 8000d4e:	4a15      	ldr	r2, [pc, #84]	; (8000da4 <MX_TIM6_Init+0x68>)
 8000d50:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 170-1;
 8000d52:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <MX_TIM6_Init+0x64>)
 8000d54:	22a9      	movs	r2, #169	; 0xa9
 8000d56:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d58:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <MX_TIM6_Init+0x64>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65534;
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <MX_TIM6_Init+0x64>)
 8000d60:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000d64:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <MX_TIM6_Init+0x64>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d6c:	480c      	ldr	r0, [pc, #48]	; (8000da0 <MX_TIM6_Init+0x64>)
 8000d6e:	f003 fba9 	bl	80044c4 <HAL_TIM_Base_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000d78:	f000 f924 	bl	8000fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	4619      	mov	r1, r3
 8000d88:	4805      	ldr	r0, [pc, #20]	; (8000da0 <MX_TIM6_Init+0x64>)
 8000d8a:	f003 fce5 	bl	8004758 <HAL_TIMEx_MasterConfigSynchronization>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000d94:	f000 f916 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	200019e4 	.word	0x200019e4
 8000da4:	40001000 	.word	0x40001000

08000da8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dac:	4b22      	ldr	r3, [pc, #136]	; (8000e38 <MX_USART2_UART_Init+0x90>)
 8000dae:	4a23      	ldr	r2, [pc, #140]	; (8000e3c <MX_USART2_UART_Init+0x94>)
 8000db0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000db2:	4b21      	ldr	r3, [pc, #132]	; (8000e38 <MX_USART2_UART_Init+0x90>)
 8000db4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000db8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dba:	4b1f      	ldr	r3, [pc, #124]	; (8000e38 <MX_USART2_UART_Init+0x90>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dc0:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <MX_USART2_UART_Init+0x90>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dc6:	4b1c      	ldr	r3, [pc, #112]	; (8000e38 <MX_USART2_UART_Init+0x90>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dcc:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <MX_USART2_UART_Init+0x90>)
 8000dce:	220c      	movs	r2, #12
 8000dd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd2:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <MX_USART2_UART_Init+0x90>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd8:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <MX_USART2_UART_Init+0x90>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dde:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <MX_USART2_UART_Init+0x90>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000de4:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <MX_USART2_UART_Init+0x90>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dea:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <MX_USART2_UART_Init+0x90>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000df0:	4811      	ldr	r0, [pc, #68]	; (8000e38 <MX_USART2_UART_Init+0x90>)
 8000df2:	f003 fd33 	bl	800485c <HAL_UART_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000dfc:	f000 f8e2 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e00:	2100      	movs	r1, #0
 8000e02:	480d      	ldr	r0, [pc, #52]	; (8000e38 <MX_USART2_UART_Init+0x90>)
 8000e04:	f004 f9c5 	bl	8005192 <HAL_UARTEx_SetTxFifoThreshold>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000e0e:	f000 f8d9 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e12:	2100      	movs	r1, #0
 8000e14:	4808      	ldr	r0, [pc, #32]	; (8000e38 <MX_USART2_UART_Init+0x90>)
 8000e16:	f004 f9fa 	bl	800520e <HAL_UARTEx_SetRxFifoThreshold>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000e20:	f000 f8d0 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e24:	4804      	ldr	r0, [pc, #16]	; (8000e38 <MX_USART2_UART_Init+0x90>)
 8000e26:	f004 f97b 	bl	8005120 <HAL_UARTEx_DisableFifoMode>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000e30:	f000 f8c8 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20001a30 	.word	0x20001a30
 8000e3c:	40004400 	.word	0x40004400

08000e40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e46:	f107 030c 	add.w	r3, r7, #12
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
 8000e54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	4b3c      	ldr	r3, [pc, #240]	; (8000f48 <MX_GPIO_Init+0x108>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5a:	4a3b      	ldr	r2, [pc, #236]	; (8000f48 <MX_GPIO_Init+0x108>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e62:	4b39      	ldr	r3, [pc, #228]	; (8000f48 <MX_GPIO_Init+0x108>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6e:	4b36      	ldr	r3, [pc, #216]	; (8000f48 <MX_GPIO_Init+0x108>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e72:	4a35      	ldr	r2, [pc, #212]	; (8000f48 <MX_GPIO_Init+0x108>)
 8000e74:	f043 0302 	orr.w	r3, r3, #2
 8000e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7a:	4b33      	ldr	r3, [pc, #204]	; (8000f48 <MX_GPIO_Init+0x108>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RS_Pin|LCD_E_Pin|LCD_D4_Pin|LCD_D5_Pin
 8000e86:	2200      	movs	r2, #0
 8000e88:	21f3      	movs	r1, #243	; 0xf3
 8000e8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8e:	f002 fb11 	bl	80034b4 <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e98:	482c      	ldr	r0, [pc, #176]	; (8000f4c <MX_GPIO_Init+0x10c>)
 8000e9a:	f002 fb0b 	bl	80034b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RS_Pin LCD_E_Pin LCD_D4_Pin LCD_D5_Pin
                           LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_E_Pin|LCD_D4_Pin|LCD_D5_Pin
 8000e9e:	23f3      	movs	r3, #243	; 0xf3
 8000ea0:	60fb      	str	r3, [r7, #12]
                          |LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	f107 030c 	add.w	r3, r7, #12
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb8:	f002 f962 	bl	8003180 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONTROL_INTERUPT_Pin */
  GPIO_InitStruct.Pin = CONTROL_INTERUPT_Pin;
 8000ebc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ec0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000ec2:	4b23      	ldr	r3, [pc, #140]	; (8000f50 <MX_GPIO_Init+0x110>)
 8000ec4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CONTROL_INTERUPT_GPIO_Port, &GPIO_InitStruct);
 8000eca:	f107 030c 	add.w	r3, r7, #12
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed4:	f002 f954 	bl	8003180 <HAL_GPIO_Init>

  /*Configure GPIO pin : VOL_B_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = VOL_B_INTERRUPT_Pin;
 8000ed8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000edc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ede:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <MX_GPIO_Init+0x114>)
 8000ee0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(VOL_B_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 8000ee6:	f107 030c 	add.w	r3, r7, #12
 8000eea:	4619      	mov	r1, r3
 8000eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef0:	f002 f946 	bl	8003180 <HAL_GPIO_Init>

  /*Configure GPIO pin : VOL_A_READ_Pin */
  GPIO_InitStruct.Pin = VOL_A_READ_Pin;
 8000ef4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ef8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(VOL_A_READ_GPIO_Port, &GPIO_InitStruct);
 8000f02:	f107 030c 	add.w	r3, r7, #12
 8000f06:	4619      	mov	r1, r3
 8000f08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0c:	f002 f938 	bl	8003180 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f16:	2301      	movs	r3, #1
 8000f18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f22:	f107 030c 	add.w	r3, r7, #12
 8000f26:	4619      	mov	r1, r3
 8000f28:	4808      	ldr	r0, [pc, #32]	; (8000f4c <MX_GPIO_Init+0x10c>)
 8000f2a:	f002 f929 	bl	8003180 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2105      	movs	r1, #5
 8000f32:	2017      	movs	r0, #23
 8000f34:	f002 f8ef 	bl	8003116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f38:	2017      	movs	r0, #23
 8000f3a:	f002 f906 	bl	800314a <HAL_NVIC_EnableIRQ>

}
 8000f3e:	bf00      	nop
 8000f40:	3720      	adds	r7, #32
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	48000400 	.word	0x48000400
 8000f50:	10310000 	.word	0x10310000
 8000f54:	10210000 	.word	0x10210000

08000f58 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	80fb      	strh	r3, [r7, #6]
	interrupt_interface( GPIO_Pin , &hadc1);
 8000f62:	88fb      	ldrh	r3, [r7, #6]
 8000f64:	4903      	ldr	r1, [pc, #12]	; (8000f74 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fc1c 	bl	80007a4 <interrupt_interface>
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20001978 	.word	0x20001978

08000f78 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	interrupt_adc_interface(hadc);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff fc3b 	bl	80007fc <interrupt_adc_interface>


}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <StartMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void *argument)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	init_app();
 8000f96:	f7ff fbda 	bl	800074e <init_app>
	for(;;)
	{
		tick_app();
 8000f9a:	f7ff fbdf 	bl	800075c <tick_app>
 8000f9e:	e7fc      	b.n	8000f9a <StartMainTask+0xc>

08000fa0 <StartInterfaceTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartInterfaceTask */
void StartInterfaceTask(void *argument)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartInterfaceTask */
	init_interface();
 8000fa8:	f7ff fbe0 	bl	800076c <init_interface>
	for(uint32_t frame = 0;1;frame++)
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
	{
		osDelay(33); // Interface will update at 30FPS
 8000fb0:	2021      	movs	r0, #33	; 0x21
 8000fb2:	f004 faeb 	bl	800558c <osDelay>
		tick_interface(frame);
 8000fb6:	68f8      	ldr	r0, [r7, #12]
 8000fb8:	f7ff fbde 	bl	8000778 <tick_interface>
	for(uint32_t frame = 0;1;frame++)
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	60fb      	str	r3, [r7, #12]
		osDelay(33); // Interface will update at 30FPS
 8000fc2:	e7f5      	b.n	8000fb0 <StartInterfaceTask+0x10>

08000fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fca:	e7fe      	b.n	8000fca <Error_Handler+0x6>

08000fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_MspInit+0x50>)
 8000fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd6:	4a11      	ldr	r2, [pc, #68]	; (800101c <HAL_MspInit+0x50>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6613      	str	r3, [r2, #96]	; 0x60
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <HAL_MspInit+0x50>)
 8000fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fea:	4b0c      	ldr	r3, [pc, #48]	; (800101c <HAL_MspInit+0x50>)
 8000fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fee:	4a0b      	ldr	r2, [pc, #44]	; (800101c <HAL_MspInit+0x50>)
 8000ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <HAL_MspInit+0x50>)
 8000ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	210f      	movs	r1, #15
 8001006:	f06f 0001 	mvn.w	r0, #1
 800100a:	f002 f884 	bl	8003116 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800100e:	f002 fb25 	bl	800365c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40021000 	.word	0x40021000

08001020 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001040:	d12b      	bne.n	800109a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001042:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <HAL_ADC_MspInit+0x84>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	4a17      	ldr	r2, [pc, #92]	; (80010a4 <HAL_ADC_MspInit+0x84>)
 8001048:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800104c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104e:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <HAL_ADC_MspInit+0x84>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800105a:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <HAL_ADC_MspInit+0x84>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105e:	4a11      	ldr	r2, [pc, #68]	; (80010a4 <HAL_ADC_MspInit+0x84>)
 8001060:	f043 0302 	orr.w	r3, r3, #2
 8001064:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001066:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <HAL_ADC_MspInit+0x84>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001072:	2301      	movs	r3, #1
 8001074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001076:	2303      	movs	r3, #3
 8001078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	4619      	mov	r1, r3
 8001084:	4808      	ldr	r0, [pc, #32]	; (80010a8 <HAL_ADC_MspInit+0x88>)
 8001086:	f002 f87b 	bl	8003180 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2105      	movs	r1, #5
 800108e:	2012      	movs	r0, #18
 8001090:	f002 f841 	bl	8003116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001094:	2012      	movs	r0, #18
 8001096:	f002 f858 	bl	800314a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800109a:	bf00      	nop
 800109c:	3728      	adds	r7, #40	; 0x28
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40021000 	.word	0x40021000
 80010a8:	48000400 	.word	0x48000400

080010ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <HAL_TIM_Base_MspInit+0x38>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d10b      	bne.n	80010d6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80010be:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <HAL_TIM_Base_MspInit+0x3c>)
 80010c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c2:	4a09      	ldr	r2, [pc, #36]	; (80010e8 <HAL_TIM_Base_MspInit+0x3c>)
 80010c4:	f043 0310 	orr.w	r3, r3, #16
 80010c8:	6593      	str	r3, [r2, #88]	; 0x58
 80010ca:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <HAL_TIM_Base_MspInit+0x3c>)
 80010cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ce:	f003 0310 	and.w	r3, r3, #16
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80010d6:	bf00      	nop
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40001000 	.word	0x40001000
 80010e8:	40021000 	.word	0x40021000

080010ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	; 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a17      	ldr	r2, [pc, #92]	; (8001168 <HAL_UART_MspInit+0x7c>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d128      	bne.n	8001160 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800110e:	4b17      	ldr	r3, [pc, #92]	; (800116c <HAL_UART_MspInit+0x80>)
 8001110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001112:	4a16      	ldr	r2, [pc, #88]	; (800116c <HAL_UART_MspInit+0x80>)
 8001114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001118:	6593      	str	r3, [r2, #88]	; 0x58
 800111a:	4b14      	ldr	r3, [pc, #80]	; (800116c <HAL_UART_MspInit+0x80>)
 800111c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <HAL_UART_MspInit+0x80>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112a:	4a10      	ldr	r2, [pc, #64]	; (800116c <HAL_UART_MspInit+0x80>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <HAL_UART_MspInit+0x80>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800113e:	230c      	movs	r3, #12
 8001140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800114e:	2307      	movs	r3, #7
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4619      	mov	r1, r3
 8001158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115c:	f002 f810 	bl	8003180 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001160:	bf00      	nop
 8001162:	3728      	adds	r7, #40	; 0x28
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40004400 	.word	0x40004400
 800116c:	40021000 	.word	0x40021000

08001170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <NMI_Handler+0x4>

08001176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800117a:	e7fe      	b.n	800117a <HardFault_Handler+0x4>

0800117c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <MemManage_Handler+0x4>

08001182 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <BusFault_Handler+0x4>

08001188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800118c:	e7fe      	b.n	800118c <UsageFault_Handler+0x4>

0800118e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a0:	f000 f8b2 	bl	8001308 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80011a4:	f005 fde4 	bl	8006d70 <xTaskGetSchedulerState>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d001      	beq.n	80011b2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80011ae:	f006 fbbb 	bl	8007928 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80011bc:	4802      	ldr	r0, [pc, #8]	; (80011c8 <ADC1_2_IRQHandler+0x10>)
 80011be:	f000 fe53 	bl	8001e68 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20001978 	.word	0x20001978

080011cc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80011d0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80011d4:	f002 f986 	bl	80034e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80011d8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011dc:	f002 f982 	bl	80034e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <SystemInit+0x28>)
 80011ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ee:	4a07      	ldr	r2, [pc, #28]	; (800120c <SystemInit+0x28>)
 80011f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011f8:	4b04      	ldr	r3, [pc, #16]	; (800120c <SystemInit+0x28>)
 80011fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011fe:	609a      	str	r2, [r3, #8]
#endif
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <Reset_Handler>:
 8001210:	480d      	ldr	r0, [pc, #52]	; (8001248 <LoopForever+0x2>)
 8001212:	4685      	mov	sp, r0
 8001214:	480d      	ldr	r0, [pc, #52]	; (800124c <LoopForever+0x6>)
 8001216:	490e      	ldr	r1, [pc, #56]	; (8001250 <LoopForever+0xa>)
 8001218:	4a0e      	ldr	r2, [pc, #56]	; (8001254 <LoopForever+0xe>)
 800121a:	2300      	movs	r3, #0
 800121c:	e002      	b.n	8001224 <LoopCopyDataInit>

0800121e <CopyDataInit>:
 800121e:	58d4      	ldr	r4, [r2, r3]
 8001220:	50c4      	str	r4, [r0, r3]
 8001222:	3304      	adds	r3, #4

08001224 <LoopCopyDataInit>:
 8001224:	18c4      	adds	r4, r0, r3
 8001226:	428c      	cmp	r4, r1
 8001228:	d3f9      	bcc.n	800121e <CopyDataInit>
 800122a:	4a0b      	ldr	r2, [pc, #44]	; (8001258 <LoopForever+0x12>)
 800122c:	4c0b      	ldr	r4, [pc, #44]	; (800125c <LoopForever+0x16>)
 800122e:	2300      	movs	r3, #0
 8001230:	e001      	b.n	8001236 <LoopFillZerobss>

08001232 <FillZerobss>:
 8001232:	6013      	str	r3, [r2, #0]
 8001234:	3204      	adds	r2, #4

08001236 <LoopFillZerobss>:
 8001236:	42a2      	cmp	r2, r4
 8001238:	d3fb      	bcc.n	8001232 <FillZerobss>
 800123a:	f7ff ffd3 	bl	80011e4 <SystemInit>
 800123e:	f006 fdd5 	bl	8007dec <__libc_init_array>
 8001242:	f7ff fc65 	bl	8000b10 <main>

08001246 <LoopForever>:
 8001246:	e7fe      	b.n	8001246 <LoopForever>
 8001248:	20008000 	.word	0x20008000
 800124c:	20000000 	.word	0x20000000
 8001250:	20000034 	.word	0x20000034
 8001254:	08007f80 	.word	0x08007f80
 8001258:	20000034 	.word	0x20000034
 800125c:	20001b00 	.word	0x20001b00

08001260 <COMP1_2_3_IRQHandler>:
 8001260:	e7fe      	b.n	8001260 <COMP1_2_3_IRQHandler>

08001262 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001268:	2300      	movs	r3, #0
 800126a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800126c:	2003      	movs	r0, #3
 800126e:	f001 ff47 	bl	8003100 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001272:	200f      	movs	r0, #15
 8001274:	f000 f80e 	bl	8001294 <HAL_InitTick>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d002      	beq.n	8001284 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	71fb      	strb	r3, [r7, #7]
 8001282:	e001      	b.n	8001288 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001284:	f7ff fea2 	bl	8000fcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001288:	79fb      	ldrb	r3, [r7, #7]

}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800129c:	2300      	movs	r3, #0
 800129e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80012a0:	4b16      	ldr	r3, [pc, #88]	; (80012fc <HAL_InitTick+0x68>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d022      	beq.n	80012ee <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80012a8:	4b15      	ldr	r3, [pc, #84]	; (8001300 <HAL_InitTick+0x6c>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4b13      	ldr	r3, [pc, #76]	; (80012fc <HAL_InitTick+0x68>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80012b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80012bc:	4618      	mov	r0, r3
 80012be:	f001 ff52 	bl	8003166 <HAL_SYSTICK_Config>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d10f      	bne.n	80012e8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b0f      	cmp	r3, #15
 80012cc:	d809      	bhi.n	80012e2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ce:	2200      	movs	r2, #0
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012d6:	f001 ff1e 	bl	8003116 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012da:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <HAL_InitTick+0x70>)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6013      	str	r3, [r2, #0]
 80012e0:	e007      	b.n	80012f2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	73fb      	strb	r3, [r7, #15]
 80012e6:	e004      	b.n	80012f2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	73fb      	strb	r3, [r7, #15]
 80012ec:	e001      	b.n	80012f2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	2000002c 	.word	0x2000002c
 8001300:	20000024 	.word	0x20000024
 8001304:	20000028 	.word	0x20000028

08001308 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <HAL_IncTick+0x1c>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4b05      	ldr	r3, [pc, #20]	; (8001328 <HAL_IncTick+0x20>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4413      	add	r3, r2
 8001316:	4a03      	ldr	r2, [pc, #12]	; (8001324 <HAL_IncTick+0x1c>)
 8001318:	6013      	str	r3, [r2, #0]
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	20001abc 	.word	0x20001abc
 8001328:	2000002c 	.word	0x2000002c

0800132c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return uwTick;
 8001330:	4b03      	ldr	r3, [pc, #12]	; (8001340 <HAL_GetTick+0x14>)
 8001332:	681b      	ldr	r3, [r3, #0]
}
 8001334:	4618      	mov	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	20001abc 	.word	0x20001abc

08001344 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	431a      	orrs	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	609a      	str	r2, [r3, #8]
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
 8001372:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	431a      	orrs	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	609a      	str	r2, [r3, #8]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b087      	sub	sp, #28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
 80013b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	3360      	adds	r3, #96	; 0x60
 80013be:	461a      	mov	r2, r3
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <LL_ADC_SetOffset+0x44>)
 80013ce:	4013      	ands	r3, r2
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	430a      	orrs	r2, r1
 80013da:	4313      	orrs	r3, r2
 80013dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80013e4:	bf00      	nop
 80013e6:	371c      	adds	r7, #28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	03fff000 	.word	0x03fff000

080013f4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3360      	adds	r3, #96	; 0x60
 8001402:	461a      	mov	r2, r3
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001414:	4618      	mov	r0, r3
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001420:	b480      	push	{r7}
 8001422:	b087      	sub	sp, #28
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	3360      	adds	r3, #96	; 0x60
 8001430:	461a      	mov	r2, r3
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	431a      	orrs	r2, r3
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800144a:	bf00      	nop
 800144c:	371c      	adds	r7, #28
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001456:	b480      	push	{r7}
 8001458:	b087      	sub	sp, #28
 800145a:	af00      	add	r7, sp, #0
 800145c:	60f8      	str	r0, [r7, #12]
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	3360      	adds	r3, #96	; 0x60
 8001466:	461a      	mov	r2, r3
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	431a      	orrs	r2, r3
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001480:	bf00      	nop
 8001482:	371c      	adds	r7, #28
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800148c:	b480      	push	{r7}
 800148e:	b087      	sub	sp, #28
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	3360      	adds	r3, #96	; 0x60
 800149c:	461a      	mov	r2, r3
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	431a      	orrs	r2, r3
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80014b6:	bf00      	nop
 80014b8:	371c      	adds	r7, #28
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b083      	sub	sp, #12
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	695b      	ldr	r3, [r3, #20]
 80014d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	431a      	orrs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	615a      	str	r2, [r3, #20]
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d101      	bne.n	8001500 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80014fc:	2301      	movs	r3, #1
 80014fe:	e000      	b.n	8001502 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800150e:	b480      	push	{r7}
 8001510:	b087      	sub	sp, #28
 8001512:	af00      	add	r7, sp, #0
 8001514:	60f8      	str	r0, [r7, #12]
 8001516:	60b9      	str	r1, [r7, #8]
 8001518:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	3330      	adds	r3, #48	; 0x30
 800151e:	461a      	mov	r2, r3
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	0a1b      	lsrs	r3, r3, #8
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	f003 030c 	and.w	r3, r3, #12
 800152a:	4413      	add	r3, r2
 800152c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	f003 031f 	and.w	r3, r3, #31
 8001538:	211f      	movs	r1, #31
 800153a:	fa01 f303 	lsl.w	r3, r1, r3
 800153e:	43db      	mvns	r3, r3
 8001540:	401a      	ands	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	0e9b      	lsrs	r3, r3, #26
 8001546:	f003 011f 	and.w	r1, r3, #31
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	f003 031f 	and.w	r3, r3, #31
 8001550:	fa01 f303 	lsl.w	r3, r1, r3
 8001554:	431a      	orrs	r2, r3
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800155a:	bf00      	nop
 800155c:	371c      	adds	r7, #28
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800157a:	2301      	movs	r3, #1
 800157c:	e000      	b.n	8001580 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800158c:	b480      	push	{r7}
 800158e:	b087      	sub	sp, #28
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	3314      	adds	r3, #20
 800159c:	461a      	mov	r2, r3
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	0e5b      	lsrs	r3, r3, #25
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	4413      	add	r3, r2
 80015aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	0d1b      	lsrs	r3, r3, #20
 80015b4:	f003 031f 	and.w	r3, r3, #31
 80015b8:	2107      	movs	r1, #7
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	43db      	mvns	r3, r3
 80015c0:	401a      	ands	r2, r3
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	0d1b      	lsrs	r3, r3, #20
 80015c6:	f003 031f 	and.w	r3, r3, #31
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	fa01 f303 	lsl.w	r3, r1, r3
 80015d0:	431a      	orrs	r2, r3
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80015d6:	bf00      	nop
 80015d8:	371c      	adds	r7, #28
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
	...

080015e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015fc:	43db      	mvns	r3, r3
 80015fe:	401a      	ands	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f003 0318 	and.w	r3, r3, #24
 8001606:	4908      	ldr	r1, [pc, #32]	; (8001628 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001608:	40d9      	lsrs	r1, r3
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	400b      	ands	r3, r1
 800160e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001612:	431a      	orrs	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800161a:	bf00      	nop
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	0007ffff 	.word	0x0007ffff

0800162c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f003 031f 	and.w	r3, r3, #31
}
 800163c:	4618      	mov	r0, r3
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001658:	4618      	mov	r0, r3
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001674:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6093      	str	r3, [r2, #8]
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001698:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800169c:	d101      	bne.n	80016a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800169e:	2301      	movs	r3, #1
 80016a0:	e000      	b.n	80016a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80016c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80016ec:	d101      	bne.n	80016f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80016ee:	2301      	movs	r3, #1
 80016f0:	e000      	b.n	80016f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001710:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001714:	f043 0201 	orr.w	r2, r3, #1
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001738:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800173c:	f043 0202 	orr.w	r2, r3, #2
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	2b01      	cmp	r3, #1
 8001762:	d101      	bne.n	8001768 <LL_ADC_IsEnabled+0x18>
 8001764:	2301      	movs	r3, #1
 8001766:	e000      	b.n	800176a <LL_ADC_IsEnabled+0x1a>
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b02      	cmp	r3, #2
 8001788:	d101      	bne.n	800178e <LL_ADC_IsDisableOngoing+0x18>
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <LL_ADC_IsDisableOngoing+0x1a>
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017b0:	f043 0204 	orr.w	r2, r3, #4
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017d8:	f043 0210 	orr.w	r2, r3, #16
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	d101      	bne.n	8001804 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001800:	2301      	movs	r3, #1
 8001802:	e000      	b.n	8001806 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001822:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001826:	f043 0220 	orr.w	r2, r3, #32
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 0308 	and.w	r3, r3, #8
 800184a:	2b08      	cmp	r3, #8
 800184c:	d101      	bne.n	8001852 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800184e:	2301      	movs	r3, #1
 8001850:	e000      	b.n	8001854 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001860:	b590      	push	{r4, r7, lr}
 8001862:	b089      	sub	sp, #36	; 0x24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001868:	2300      	movs	r3, #0
 800186a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800186c:	2300      	movs	r3, #0
 800186e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e16b      	b.n	8001b52 <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001884:	2b00      	cmp	r3, #0
 8001886:	d109      	bne.n	800189c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff fbc9 	bl	8001020 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fef1 	bl	8001688 <LL_ADC_IsDeepPowerDownEnabled>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d004      	beq.n	80018b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fed7 	bl	8001664 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff ff0c 	bl	80016d8 <LL_ADC_IsInternalRegulatorEnabled>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d113      	bne.n	80018ee <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff fef0 	bl	80016b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80018d0:	4ba2      	ldr	r3, [pc, #648]	; (8001b5c <HAL_ADC_Init+0x2fc>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	099b      	lsrs	r3, r3, #6
 80018d6:	4aa2      	ldr	r2, [pc, #648]	; (8001b60 <HAL_ADC_Init+0x300>)
 80018d8:	fba2 2303 	umull	r2, r3, r2, r3
 80018dc:	099b      	lsrs	r3, r3, #6
 80018de:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018e0:	e002      	b.n	80018e8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	3b01      	subs	r3, #1
 80018e6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f9      	bne.n	80018e2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fef0 	bl	80016d8 <LL_ADC_IsInternalRegulatorEnabled>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10d      	bne.n	800191a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001902:	f043 0210 	orr.w	r2, r3, #16
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800190e:	f043 0201 	orr.w	r2, r3, #1
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff ff64 	bl	80017ec <LL_ADC_REG_IsConversionOngoing>
 8001924:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800192a:	f003 0310 	and.w	r3, r3, #16
 800192e:	2b00      	cmp	r3, #0
 8001930:	f040 8106 	bne.w	8001b40 <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	2b00      	cmp	r3, #0
 8001938:	f040 8102 	bne.w	8001b40 <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001940:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001944:	f043 0202 	orr.w	r2, r3, #2
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff fefd 	bl	8001750 <LL_ADC_IsEnabled>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d111      	bne.n	8001980 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800195c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001960:	f7ff fef6 	bl	8001750 <LL_ADC_IsEnabled>
 8001964:	4604      	mov	r4, r0
 8001966:	487f      	ldr	r0, [pc, #508]	; (8001b64 <HAL_ADC_Init+0x304>)
 8001968:	f7ff fef2 	bl	8001750 <LL_ADC_IsEnabled>
 800196c:	4603      	mov	r3, r0
 800196e:	4323      	orrs	r3, r4
 8001970:	2b00      	cmp	r3, #0
 8001972:	d105      	bne.n	8001980 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	4619      	mov	r1, r3
 800197a:	487b      	ldr	r0, [pc, #492]	; (8001b68 <HAL_ADC_Init+0x308>)
 800197c:	f7ff fce2 	bl	8001344 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	7f5b      	ldrb	r3, [r3, #29]
 8001984:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800198a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001990:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001996:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800199e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d106      	bne.n	80019bc <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b2:	3b01      	subs	r3, #1
 80019b4:	045b      	lsls	r3, r3, #17
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d009      	beq.n	80019d8 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68da      	ldr	r2, [r3, #12]
 80019de:	4b63      	ldr	r3, [pc, #396]	; (8001b6c <HAL_ADC_Init+0x30c>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	6812      	ldr	r2, [r2, #0]
 80019e6:	69b9      	ldr	r1, [r7, #24]
 80019e8:	430b      	orrs	r3, r1
 80019ea:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fef0 	bl	80017ec <LL_ADC_REG_IsConversionOngoing>
 8001a0c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff ff11 	bl	800183a <LL_ADC_INJ_IsConversionOngoing>
 8001a18:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d16d      	bne.n	8001afc <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d16a      	bne.n	8001afc <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a2a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a32:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a42:	f023 0302 	bic.w	r3, r3, #2
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	6812      	ldr	r2, [r2, #0]
 8001a4a:	69b9      	ldr	r1, [r7, #24]
 8001a4c:	430b      	orrs	r3, r1
 8001a4e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d017      	beq.n	8001a88 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	691a      	ldr	r2, [r3, #16]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001a66:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001a70:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001a74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6911      	ldr	r1, [r2, #16]
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6812      	ldr	r2, [r2, #0]
 8001a80:	430b      	orrs	r3, r1
 8001a82:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001a86:	e013      	b.n	8001ab0 <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	691a      	ldr	r2, [r3, #16]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a96:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6812      	ldr	r2, [r2, #0]
 8001aa4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001aa8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001aac:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d118      	bne.n	8001aec <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001ac4:	f023 0304 	bic.w	r3, r3, #4
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ad0:	4311      	orrs	r1, r2
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001ad6:	4311      	orrs	r1, r2
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001adc:	430a      	orrs	r2, r1
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f042 0201 	orr.w	r2, r2, #1
 8001ae8:	611a      	str	r2, [r3, #16]
 8001aea:	e007      	b.n	8001afc <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	691a      	ldr	r2, [r3, #16]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0201 	bic.w	r2, r2, #1
 8001afa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d10c      	bne.n	8001b1e <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f023 010f 	bic.w	r1, r3, #15
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	1e5a      	subs	r2, r3, #1
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	631a      	str	r2, [r3, #48]	; 0x30
 8001b1c:	e007      	b.n	8001b2e <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 020f 	bic.w	r2, r2, #15
 8001b2c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b32:	f023 0303 	bic.w	r3, r3, #3
 8001b36:	f043 0201 	orr.w	r2, r3, #1
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b3e:	e007      	b.n	8001b50 <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b44:	f043 0210 	orr.w	r2, r3, #16
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b50:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3724      	adds	r7, #36	; 0x24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd90      	pop	{r4, r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000024 	.word	0x20000024
 8001b60:	053e2d63 	.word	0x053e2d63
 8001b64:	50000100 	.word	0x50000100
 8001b68:	50000300 	.word	0x50000300
 8001b6c:	fff04007 	.word	0xfff04007

08001b70 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b78:	4895      	ldr	r0, [pc, #596]	; (8001dd0 <HAL_ADC_Start_IT+0x260>)
 8001b7a:	f7ff fd57 	bl	800162c <LL_ADC_GetMultimode>
 8001b7e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fe31 	bl	80017ec <LL_ADC_REG_IsConversionOngoing>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f040 8115 	bne.w	8001dbc <HAL_ADC_Start_IT+0x24c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d101      	bne.n	8001ba0 <HAL_ADC_Start_IT+0x30>
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	e112      	b.n	8001dc6 <HAL_ADC_Start_IT+0x256>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f001 f82f 	bl	8002c0c <ADC_Enable>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001bb2:	7dfb      	ldrb	r3, [r7, #23]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f040 80fc 	bne.w	8001db2 <HAL_ADC_Start_IT+0x242>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bbe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001bc2:	f023 0301 	bic.w	r3, r3, #1
 8001bc6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a80      	ldr	r2, [pc, #512]	; (8001dd4 <HAL_ADC_Start_IT+0x264>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d002      	beq.n	8001bde <HAL_ADC_Start_IT+0x6e>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	e001      	b.n	8001be2 <HAL_ADC_Start_IT+0x72>
 8001bde:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	6812      	ldr	r2, [r2, #0]
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d002      	beq.n	8001bf0 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d105      	bne.n	8001bfc <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d006      	beq.n	8001c16 <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c0c:	f023 0206 	bic.w	r2, r3, #6
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	661a      	str	r2, [r3, #96]	; 0x60
 8001c14:	e002      	b.n	8001c1c <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	221c      	movs	r2, #28
 8001c22:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 021c 	bic.w	r2, r2, #28
 8001c3a:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	2b08      	cmp	r3, #8
 8001c42:	d108      	bne.n	8001c56 <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f042 0208 	orr.w	r2, r2, #8
 8001c52:	605a      	str	r2, [r3, #4]
          break;
 8001c54:	e008      	b.n	8001c68 <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f042 0204 	orr.w	r2, r2, #4
 8001c64:	605a      	str	r2, [r3, #4]
          break;
 8001c66:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d107      	bne.n	8001c80 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 0210 	orr.w	r2, r2, #16
 8001c7e:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a53      	ldr	r2, [pc, #332]	; (8001dd4 <HAL_ADC_Start_IT+0x264>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d002      	beq.n	8001c90 <HAL_ADC_Start_IT+0x120>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	e001      	b.n	8001c94 <HAL_ADC_Start_IT+0x124>
 8001c90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	6812      	ldr	r2, [r2, #0]
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d008      	beq.n	8001cae <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d005      	beq.n	8001cae <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	2b05      	cmp	r3, #5
 8001ca6:	d002      	beq.n	8001cae <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	2b09      	cmp	r3, #9
 8001cac:	d13b      	bne.n	8001d26 <HAL_ADC_Start_IT+0x1b6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d02d      	beq.n	8001d18 <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cc4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d110      	bne.n	8001cf6 <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 0220 	bic.w	r2, r2, #32
 8001ce2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cf2:	605a      	str	r2, [r3, #4]
              break;
 8001cf4:	e011      	b.n	8001d1a <HAL_ADC_Start_IT+0x1aa>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d04:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f042 0220 	orr.w	r2, r2, #32
 8001d14:	605a      	str	r2, [r3, #4]
              break;
 8001d16:	e000      	b.n	8001d1a <HAL_ADC_Start_IT+0x1aa>
          }
        }
 8001d18:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff fd3c 	bl	800179c <LL_ADC_REG_StartConversion>
 8001d24:	e04e      	b.n	8001dc4 <HAL_ADC_Start_IT+0x254>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a27      	ldr	r2, [pc, #156]	; (8001dd4 <HAL_ADC_Start_IT+0x264>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d002      	beq.n	8001d42 <HAL_ADC_Start_IT+0x1d2>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	e001      	b.n	8001d46 <HAL_ADC_Start_IT+0x1d6>
 8001d42:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d46:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d036      	beq.n	8001dc2 <HAL_ADC_Start_IT+0x252>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d58:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d5c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d110      	bne.n	8001d8e <HAL_ADC_Start_IT+0x21e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0220 	bic.w	r2, r2, #32
 8001d7a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d8a:	605a      	str	r2, [r3, #4]
              break;
 8001d8c:	e01a      	b.n	8001dc4 <HAL_ADC_Start_IT+0x254>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d9c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f042 0220 	orr.w	r2, r2, #32
 8001dac:	605a      	str	r2, [r3, #4]
              break;
 8001dae:	bf00      	nop
 8001db0:	e008      	b.n	8001dc4 <HAL_ADC_Start_IT+0x254>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001dba:	e003      	b.n	8001dc4 <HAL_ADC_Start_IT+0x254>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	75fb      	strb	r3, [r7, #23]
 8001dc0:	e000      	b.n	8001dc4 <HAL_ADC_Start_IT+0x254>
        }
 8001dc2:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8001dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	50000300 	.word	0x50000300
 8001dd4:	50000100 	.word	0x50000100

08001dd8 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d101      	bne.n	8001dee <HAL_ADC_Stop_IT+0x16>
 8001dea:	2302      	movs	r3, #2
 8001dec:	e02b      	b.n	8001e46 <HAL_ADC_Stop_IT+0x6e>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001df6:	2103      	movs	r1, #3
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 fe53 	bl	8002aa4 <ADC_ConversionStop>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d119      	bne.n	8001e3c <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 021c 	bic.w	r2, r2, #28
 8001e16:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 ff51 	bl	8002cc0 <ADC_Disable>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d109      	bne.n	8001e3c <HAL_ADC_Stop_IT+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e30:	f023 0301 	bic.w	r3, r3, #1
 8001e34:	f043 0201 	orr.w	r2, r3, #1
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08a      	sub	sp, #40	; 0x28
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001e70:	2300      	movs	r3, #0
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e84:	4883      	ldr	r0, [pc, #524]	; (8002094 <HAL_ADC_IRQHandler+0x22c>)
 8001e86:	f7ff fbd1 	bl	800162c <LL_ADC_GetMultimode>
 8001e8a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d017      	beq.n	8001ec6 <HAL_ADC_IRQHandler+0x5e>
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d012      	beq.n	8001ec6 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea4:	f003 0310 	and.w	r3, r3, #16
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d105      	bne.n	8001eb8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 ffa7 	bl	8002e0c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d004      	beq.n	8001eda <HAL_ADC_IRQHandler+0x72>
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10a      	bne.n	8001ef0 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f000 8085 	beq.w	8001ff0 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	f003 0308 	and.w	r3, r3, #8
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d07f      	beq.n	8001ff0 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef4:	f003 0310 	and.w	r3, r3, #16
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d105      	bne.n	8001f08 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f00:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff faeb 	bl	80014e8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d064      	beq.n	8001fe2 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a5e      	ldr	r2, [pc, #376]	; (8002098 <HAL_ADC_IRQHandler+0x230>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d002      	beq.n	8001f28 <HAL_ADC_IRQHandler+0xc0>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	e001      	b.n	8001f2c <HAL_ADC_IRQHandler+0xc4>
 8001f28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6812      	ldr	r2, [r2, #0]
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d008      	beq.n	8001f46 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d005      	beq.n	8001f46 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	2b05      	cmp	r3, #5
 8001f3e:	d002      	beq.n	8001f46 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	2b09      	cmp	r3, #9
 8001f44:	d104      	bne.n	8001f50 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	623b      	str	r3, [r7, #32]
 8001f4e:	e00d      	b.n	8001f6c <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a50      	ldr	r2, [pc, #320]	; (8002098 <HAL_ADC_IRQHandler+0x230>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d002      	beq.n	8001f60 <HAL_ADC_IRQHandler+0xf8>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	e001      	b.n	8001f64 <HAL_ADC_IRQHandler+0xfc>
 8001f60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f64:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001f6c:	6a3b      	ldr	r3, [r7, #32]
 8001f6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d135      	bne.n	8001fe2 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0308 	and.w	r3, r3, #8
 8001f80:	2b08      	cmp	r3, #8
 8001f82:	d12e      	bne.n	8001fe2 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff fc2f 	bl	80017ec <LL_ADC_REG_IsConversionOngoing>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d11a      	bne.n	8001fca <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 020c 	bic.w	r2, r2, #12
 8001fa2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d112      	bne.n	8001fe2 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc0:	f043 0201 	orr.w	r2, r3, #1
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fc8:	e00b      	b.n	8001fe2 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fce:	f043 0210 	orr.w	r2, r3, #16
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fda:	f043 0201 	orr.w	r2, r3, #1
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7fe ffc8 	bl	8000f78 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	220c      	movs	r2, #12
 8001fee:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f003 0320 	and.w	r3, r3, #32
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d004      	beq.n	8002004 <HAL_ADC_IRQHandler+0x19c>
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	f003 0320 	and.w	r3, r3, #32
 8002000:	2b00      	cmp	r3, #0
 8002002:	d10b      	bne.n	800201c <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 809e 	beq.w	800214c <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002016:	2b00      	cmp	r3, #0
 8002018:	f000 8098 	beq.w	800214c <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002020:	f003 0310 	and.w	r3, r3, #16
 8002024:	2b00      	cmp	r3, #0
 8002026:	d105      	bne.n	8002034 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff fa94 	bl	8001566 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800203e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff fa4f 	bl	80014e8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800204a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a11      	ldr	r2, [pc, #68]	; (8002098 <HAL_ADC_IRQHandler+0x230>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d002      	beq.n	800205c <HAL_ADC_IRQHandler+0x1f4>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	e001      	b.n	8002060 <HAL_ADC_IRQHandler+0x1f8>
 800205c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6812      	ldr	r2, [r2, #0]
 8002064:	4293      	cmp	r3, r2
 8002066:	d008      	beq.n	800207a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d005      	beq.n	800207a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	2b06      	cmp	r3, #6
 8002072:	d002      	beq.n	800207a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	2b07      	cmp	r3, #7
 8002078:	d104      	bne.n	8002084 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	623b      	str	r3, [r7, #32]
 8002082:	e011      	b.n	80020a8 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a03      	ldr	r2, [pc, #12]	; (8002098 <HAL_ADC_IRQHandler+0x230>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d006      	beq.n	800209c <HAL_ADC_IRQHandler+0x234>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	e005      	b.n	80020a0 <HAL_ADC_IRQHandler+0x238>
 8002094:	50000300 	.word	0x50000300
 8002098:	50000100 	.word	0x50000100
 800209c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80020a0:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10c      	bne.n	80020c8 <HAL_ADC_IRQHandler+0x260>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80020ae:	6a3b      	ldr	r3, [r7, #32]
 80020b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d142      	bne.n	800213e <HAL_ADC_IRQHandler+0x2d6>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d03f      	beq.n	800213e <HAL_ADC_IRQHandler+0x2d6>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 80020be:	6a3b      	ldr	r3, [r7, #32]
 80020c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d13a      	bne.n	800213e <HAL_ADC_IRQHandler+0x2d6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d2:	2b40      	cmp	r3, #64	; 0x40
 80020d4:	d133      	bne.n	800213e <HAL_ADC_IRQHandler+0x2d6>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d12e      	bne.n	800213e <HAL_ADC_IRQHandler+0x2d6>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff fba8 	bl	800183a <LL_ADC_INJ_IsConversionOngoing>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d11a      	bne.n	8002126 <HAL_ADC_IRQHandler+0x2be>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80020fe:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002104:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002114:	2b00      	cmp	r3, #0
 8002116:	d112      	bne.n	800213e <HAL_ADC_IRQHandler+0x2d6>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800211c:	f043 0201 	orr.w	r2, r3, #1
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	65da      	str	r2, [r3, #92]	; 0x5c
 8002124:	e00b      	b.n	800213e <HAL_ADC_IRQHandler+0x2d6>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212a:	f043 0210 	orr.w	r2, r3, #16
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002136:	f043 0201 	orr.w	r2, r3, #1
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 fe3c 	bl	8002dbc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2260      	movs	r2, #96	; 0x60
 800214a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002152:	2b00      	cmp	r3, #0
 8002154:	d011      	beq.n	800217a <HAL_ADC_IRQHandler+0x312>
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00c      	beq.n	800217a <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002164:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 f895 	bl	800229c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2280      	movs	r2, #128	; 0x80
 8002178:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002180:	2b00      	cmp	r3, #0
 8002182:	d012      	beq.n	80021aa <HAL_ADC_IRQHandler+0x342>
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00d      	beq.n	80021aa <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002192:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 fe22 	bl	8002de4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021a8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d012      	beq.n	80021da <HAL_ADC_IRQHandler+0x372>
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00d      	beq.n	80021da <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 fe14 	bl	8002df8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021d8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	f003 0310 	and.w	r3, r3, #16
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d036      	beq.n	8002252 <HAL_ADC_IRQHandler+0x3ea>
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	f003 0310 	and.w	r3, r3, #16
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d031      	beq.n	8002252 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d102      	bne.n	80021fc <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80021f6:	2301      	movs	r3, #1
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
 80021fa:	e014      	b.n	8002226 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d008      	beq.n	8002214 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002202:	4825      	ldr	r0, [pc, #148]	; (8002298 <HAL_ADC_IRQHandler+0x430>)
 8002204:	f7ff fa20 	bl	8001648 <LL_ADC_GetMultiDMATransfer>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00b      	beq.n	8002226 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800220e:	2301      	movs	r3, #1
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
 8002212:	e008      	b.n	8002226 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002222:	2301      	movs	r3, #1
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	2b01      	cmp	r3, #1
 800222a:	d10e      	bne.n	800224a <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002230:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800223c:	f043 0202 	orr.w	r2, r3, #2
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 f833 	bl	80022b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2210      	movs	r2, #16
 8002250:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002258:	2b00      	cmp	r3, #0
 800225a:	d018      	beq.n	800228e <HAL_ADC_IRQHandler+0x426>
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002262:	2b00      	cmp	r3, #0
 8002264:	d013      	beq.n	800228e <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002276:	f043 0208 	orr.w	r2, r3, #8
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002286:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 fda1 	bl	8002dd0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800228e:	bf00      	nop
 8002290:	3728      	adds	r7, #40	; 0x28
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	50000300 	.word	0x50000300

0800229c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b0b6      	sub	sp, #216	; 0xd8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d101      	bne.n	80022e6 <HAL_ADC_ConfigChannel+0x22>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e3c7      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x7b2>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff fa7a 	bl	80017ec <LL_ADC_REG_IsConversionOngoing>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f040 83ac 	bne.w	8002a58 <HAL_ADC_ConfigChannel+0x794>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6818      	ldr	r0, [r3, #0]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	6859      	ldr	r1, [r3, #4]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	461a      	mov	r2, r3
 800230e:	f7ff f8fe 	bl	800150e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff fa68 	bl	80017ec <LL_ADC_REG_IsConversionOngoing>
 800231c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff fa88 	bl	800183a <LL_ADC_INJ_IsConversionOngoing>
 800232a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800232e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002332:	2b00      	cmp	r3, #0
 8002334:	f040 81d9 	bne.w	80026ea <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002338:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800233c:	2b00      	cmp	r3, #0
 800233e:	f040 81d4 	bne.w	80026ea <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800234a:	d10f      	bne.n	800236c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6818      	ldr	r0, [r3, #0]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2200      	movs	r2, #0
 8002356:	4619      	mov	r1, r3
 8002358:	f7ff f918 	bl	800158c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff f8ac 	bl	80014c2 <LL_ADC_SetSamplingTimeCommonConfig>
 800236a:	e00e      	b.n	800238a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6818      	ldr	r0, [r3, #0]
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	6819      	ldr	r1, [r3, #0]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	461a      	mov	r2, r3
 800237a:	f7ff f907 	bl	800158c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2100      	movs	r1, #0
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff f89c 	bl	80014c2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	695a      	ldr	r2, [r3, #20]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	08db      	lsrs	r3, r3, #3
 8002396:	f003 0303 	and.w	r3, r3, #3
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d022      	beq.n	80023f2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6818      	ldr	r0, [r3, #0]
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	6919      	ldr	r1, [r3, #16]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80023bc:	f7fe fff6 	bl	80013ac <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6818      	ldr	r0, [r3, #0]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	6919      	ldr	r1, [r3, #16]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	461a      	mov	r2, r3
 80023ce:	f7ff f842 	bl	8001456 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6818      	ldr	r0, [r3, #0]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	6919      	ldr	r1, [r3, #16]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	7f1b      	ldrb	r3, [r3, #28]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d102      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x124>
 80023e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023e6:	e000      	b.n	80023ea <HAL_ADC_ConfigChannel+0x126>
 80023e8:	2300      	movs	r3, #0
 80023ea:	461a      	mov	r2, r3
 80023ec:	f7ff f84e 	bl	800148c <LL_ADC_SetOffsetSaturation>
 80023f0:	e17b      	b.n	80026ea <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2100      	movs	r1, #0
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7fe fffb 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 80023fe:	4603      	mov	r3, r0
 8002400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002404:	2b00      	cmp	r3, #0
 8002406:	d10a      	bne.n	800241e <HAL_ADC_ConfigChannel+0x15a>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2100      	movs	r1, #0
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe fff0 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 8002414:	4603      	mov	r3, r0
 8002416:	0e9b      	lsrs	r3, r3, #26
 8002418:	f003 021f 	and.w	r2, r3, #31
 800241c:	e01e      	b.n	800245c <HAL_ADC_ConfigChannel+0x198>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2100      	movs	r1, #0
 8002424:	4618      	mov	r0, r3
 8002426:	f7fe ffe5 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 800242a:	4603      	mov	r3, r0
 800242c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002430:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002434:	fa93 f3a3 	rbit	r3, r3
 8002438:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800243c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002440:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002444:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800244c:	2320      	movs	r3, #32
 800244e:	e004      	b.n	800245a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002450:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002454:	fab3 f383 	clz	r3, r3
 8002458:	b2db      	uxtb	r3, r3
 800245a:	461a      	mov	r2, r3
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002464:	2b00      	cmp	r3, #0
 8002466:	d105      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x1b0>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	0e9b      	lsrs	r3, r3, #26
 800246e:	f003 031f 	and.w	r3, r3, #31
 8002472:	e018      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x1e2>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002480:	fa93 f3a3 	rbit	r3, r3
 8002484:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002488:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800248c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002490:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002498:	2320      	movs	r3, #32
 800249a:	e004      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 800249c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80024a0:	fab3 f383 	clz	r3, r3
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d106      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2200      	movs	r2, #0
 80024b0:	2100      	movs	r1, #0
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7fe ffb4 	bl	8001420 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2101      	movs	r1, #1
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe ff98 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 80024c4:	4603      	mov	r3, r0
 80024c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10a      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x220>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2101      	movs	r1, #1
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fe ff8d 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 80024da:	4603      	mov	r3, r0
 80024dc:	0e9b      	lsrs	r3, r3, #26
 80024de:	f003 021f 	and.w	r2, r3, #31
 80024e2:	e01e      	b.n	8002522 <HAL_ADC_ConfigChannel+0x25e>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2101      	movs	r1, #1
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe ff82 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 80024f0:	4603      	mov	r3, r0
 80024f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024fa:	fa93 f3a3 	rbit	r3, r3
 80024fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002502:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002506:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800250a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002512:	2320      	movs	r3, #32
 8002514:	e004      	b.n	8002520 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002516:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800251a:	fab3 f383 	clz	r3, r3
 800251e:	b2db      	uxtb	r3, r3
 8002520:	461a      	mov	r2, r3
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800252a:	2b00      	cmp	r3, #0
 800252c:	d105      	bne.n	800253a <HAL_ADC_ConfigChannel+0x276>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	0e9b      	lsrs	r3, r3, #26
 8002534:	f003 031f 	and.w	r3, r3, #31
 8002538:	e018      	b.n	800256c <HAL_ADC_ConfigChannel+0x2a8>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002542:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002546:	fa93 f3a3 	rbit	r3, r3
 800254a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800254e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002552:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002556:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800255e:	2320      	movs	r3, #32
 8002560:	e004      	b.n	800256c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002562:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002566:	fab3 f383 	clz	r3, r3
 800256a:	b2db      	uxtb	r3, r3
 800256c:	429a      	cmp	r2, r3
 800256e:	d106      	bne.n	800257e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2200      	movs	r2, #0
 8002576:	2101      	movs	r1, #1
 8002578:	4618      	mov	r0, r3
 800257a:	f7fe ff51 	bl	8001420 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2102      	movs	r1, #2
 8002584:	4618      	mov	r0, r3
 8002586:	f7fe ff35 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 800258a:	4603      	mov	r3, r0
 800258c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10a      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x2e6>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2102      	movs	r1, #2
 800259a:	4618      	mov	r0, r3
 800259c:	f7fe ff2a 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 80025a0:	4603      	mov	r3, r0
 80025a2:	0e9b      	lsrs	r3, r3, #26
 80025a4:	f003 021f 	and.w	r2, r3, #31
 80025a8:	e01e      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x324>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2102      	movs	r1, #2
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fe ff1f 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 80025b6:	4603      	mov	r3, r0
 80025b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025c0:	fa93 f3a3 	rbit	r3, r3
 80025c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80025c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80025d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80025d8:	2320      	movs	r3, #32
 80025da:	e004      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80025dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025e0:	fab3 f383 	clz	r3, r3
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	461a      	mov	r2, r3
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d105      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x33c>
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	0e9b      	lsrs	r3, r3, #26
 80025fa:	f003 031f 	and.w	r3, r3, #31
 80025fe:	e016      	b.n	800262e <HAL_ADC_ConfigChannel+0x36a>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002608:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800260c:	fa93 f3a3 	rbit	r3, r3
 8002610:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002612:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002614:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002618:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002620:	2320      	movs	r3, #32
 8002622:	e004      	b.n	800262e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002624:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002628:	fab3 f383 	clz	r3, r3
 800262c:	b2db      	uxtb	r3, r3
 800262e:	429a      	cmp	r2, r3
 8002630:	d106      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2200      	movs	r2, #0
 8002638:	2102      	movs	r1, #2
 800263a:	4618      	mov	r0, r3
 800263c:	f7fe fef0 	bl	8001420 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2103      	movs	r1, #3
 8002646:	4618      	mov	r0, r3
 8002648:	f7fe fed4 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 800264c:	4603      	mov	r3, r0
 800264e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10a      	bne.n	800266c <HAL_ADC_ConfigChannel+0x3a8>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2103      	movs	r1, #3
 800265c:	4618      	mov	r0, r3
 800265e:	f7fe fec9 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 8002662:	4603      	mov	r3, r0
 8002664:	0e9b      	lsrs	r3, r3, #26
 8002666:	f003 021f 	and.w	r2, r3, #31
 800266a:	e017      	b.n	800269c <HAL_ADC_ConfigChannel+0x3d8>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2103      	movs	r1, #3
 8002672:	4618      	mov	r0, r3
 8002674:	f7fe febe 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 8002678:	4603      	mov	r3, r0
 800267a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800267e:	fa93 f3a3 	rbit	r3, r3
 8002682:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002684:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002686:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002688:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800268e:	2320      	movs	r3, #32
 8002690:	e003      	b.n	800269a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002692:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002694:	fab3 f383 	clz	r3, r3
 8002698:	b2db      	uxtb	r3, r3
 800269a:	461a      	mov	r2, r3
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d105      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0x3f0>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	0e9b      	lsrs	r3, r3, #26
 80026ae:	f003 031f 	and.w	r3, r3, #31
 80026b2:	e011      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x414>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026bc:	fa93 f3a3 	rbit	r3, r3
 80026c0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80026c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80026c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80026cc:	2320      	movs	r3, #32
 80026ce:	e003      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80026d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d2:	fab3 f383 	clz	r3, r3
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	429a      	cmp	r2, r3
 80026da:	d106      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2200      	movs	r2, #0
 80026e2:	2103      	movs	r1, #3
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fe fe9b 	bl	8001420 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff f82e 	bl	8001750 <LL_ADC_IsEnabled>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f040 8140 	bne.w	800297c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6818      	ldr	r0, [r3, #0]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	6819      	ldr	r1, [r3, #0]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	461a      	mov	r2, r3
 800270a:	f7fe ff6b 	bl	80015e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	4a8f      	ldr	r2, [pc, #572]	; (8002950 <HAL_ADC_ConfigChannel+0x68c>)
 8002714:	4293      	cmp	r3, r2
 8002716:	f040 8131 	bne.w	800297c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10b      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x47e>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	0e9b      	lsrs	r3, r3, #26
 8002730:	3301      	adds	r3, #1
 8002732:	f003 031f 	and.w	r3, r3, #31
 8002736:	2b09      	cmp	r3, #9
 8002738:	bf94      	ite	ls
 800273a:	2301      	movls	r3, #1
 800273c:	2300      	movhi	r3, #0
 800273e:	b2db      	uxtb	r3, r3
 8002740:	e019      	b.n	8002776 <HAL_ADC_ConfigChannel+0x4b2>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002748:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800274a:	fa93 f3a3 	rbit	r3, r3
 800274e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002750:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002752:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002754:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800275a:	2320      	movs	r3, #32
 800275c:	e003      	b.n	8002766 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800275e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002760:	fab3 f383 	clz	r3, r3
 8002764:	b2db      	uxtb	r3, r3
 8002766:	3301      	adds	r3, #1
 8002768:	f003 031f 	and.w	r3, r3, #31
 800276c:	2b09      	cmp	r3, #9
 800276e:	bf94      	ite	ls
 8002770:	2301      	movls	r3, #1
 8002772:	2300      	movhi	r3, #0
 8002774:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002776:	2b00      	cmp	r3, #0
 8002778:	d079      	beq.n	800286e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002782:	2b00      	cmp	r3, #0
 8002784:	d107      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x4d2>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	0e9b      	lsrs	r3, r3, #26
 800278c:	3301      	adds	r3, #1
 800278e:	069b      	lsls	r3, r3, #26
 8002790:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002794:	e015      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x4fe>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800279e:	fa93 f3a3 	rbit	r3, r3
 80027a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80027a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027a6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80027a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80027ae:	2320      	movs	r3, #32
 80027b0:	e003      	b.n	80027ba <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80027b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b4:	fab3 f383 	clz	r3, r3
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	3301      	adds	r3, #1
 80027bc:	069b      	lsls	r3, r3, #26
 80027be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d109      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x51e>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	0e9b      	lsrs	r3, r3, #26
 80027d4:	3301      	adds	r3, #1
 80027d6:	f003 031f 	and.w	r3, r3, #31
 80027da:	2101      	movs	r1, #1
 80027dc:	fa01 f303 	lsl.w	r3, r1, r3
 80027e0:	e017      	b.n	8002812 <HAL_ADC_ConfigChannel+0x54e>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ea:	fa93 f3a3 	rbit	r3, r3
 80027ee:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80027f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027f2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80027f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80027fa:	2320      	movs	r3, #32
 80027fc:	e003      	b.n	8002806 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80027fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002800:	fab3 f383 	clz	r3, r3
 8002804:	b2db      	uxtb	r3, r3
 8002806:	3301      	adds	r3, #1
 8002808:	f003 031f 	and.w	r3, r3, #31
 800280c:	2101      	movs	r1, #1
 800280e:	fa01 f303 	lsl.w	r3, r1, r3
 8002812:	ea42 0103 	orr.w	r1, r2, r3
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10a      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x574>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	0e9b      	lsrs	r3, r3, #26
 8002828:	3301      	adds	r3, #1
 800282a:	f003 021f 	and.w	r2, r3, #31
 800282e:	4613      	mov	r3, r2
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	4413      	add	r3, r2
 8002834:	051b      	lsls	r3, r3, #20
 8002836:	e018      	b.n	800286a <HAL_ADC_ConfigChannel+0x5a6>
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002840:	fa93 f3a3 	rbit	r3, r3
 8002844:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002848:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800284a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002850:	2320      	movs	r3, #32
 8002852:	e003      	b.n	800285c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002856:	fab3 f383 	clz	r3, r3
 800285a:	b2db      	uxtb	r3, r3
 800285c:	3301      	adds	r3, #1
 800285e:	f003 021f 	and.w	r2, r3, #31
 8002862:	4613      	mov	r3, r2
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	4413      	add	r3, r2
 8002868:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800286a:	430b      	orrs	r3, r1
 800286c:	e081      	b.n	8002972 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002876:	2b00      	cmp	r3, #0
 8002878:	d107      	bne.n	800288a <HAL_ADC_ConfigChannel+0x5c6>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	0e9b      	lsrs	r3, r3, #26
 8002880:	3301      	adds	r3, #1
 8002882:	069b      	lsls	r3, r3, #26
 8002884:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002888:	e015      	b.n	80028b6 <HAL_ADC_ConfigChannel+0x5f2>
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002892:	fa93 f3a3 	rbit	r3, r3
 8002896:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800289c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80028a2:	2320      	movs	r3, #32
 80028a4:	e003      	b.n	80028ae <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80028a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a8:	fab3 f383 	clz	r3, r3
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	3301      	adds	r3, #1
 80028b0:	069b      	lsls	r3, r3, #26
 80028b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d109      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x612>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	0e9b      	lsrs	r3, r3, #26
 80028c8:	3301      	adds	r3, #1
 80028ca:	f003 031f 	and.w	r3, r3, #31
 80028ce:	2101      	movs	r1, #1
 80028d0:	fa01 f303 	lsl.w	r3, r1, r3
 80028d4:	e017      	b.n	8002906 <HAL_ADC_ConfigChannel+0x642>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028dc:	6a3b      	ldr	r3, [r7, #32]
 80028de:	fa93 f3a3 	rbit	r3, r3
 80028e2:	61fb      	str	r3, [r7, #28]
  return result;
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80028ee:	2320      	movs	r3, #32
 80028f0:	e003      	b.n	80028fa <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	fab3 f383 	clz	r3, r3
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	3301      	adds	r3, #1
 80028fc:	f003 031f 	and.w	r3, r3, #31
 8002900:	2101      	movs	r1, #1
 8002902:	fa01 f303 	lsl.w	r3, r1, r3
 8002906:	ea42 0103 	orr.w	r1, r2, r3
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10d      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x66e>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	0e9b      	lsrs	r3, r3, #26
 800291c:	3301      	adds	r3, #1
 800291e:	f003 021f 	and.w	r2, r3, #31
 8002922:	4613      	mov	r3, r2
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	4413      	add	r3, r2
 8002928:	3b1e      	subs	r3, #30
 800292a:	051b      	lsls	r3, r3, #20
 800292c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002930:	e01e      	b.n	8002970 <HAL_ADC_ConfigChannel+0x6ac>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	fa93 f3a3 	rbit	r3, r3
 800293e:	613b      	str	r3, [r7, #16]
  return result;
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d104      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800294a:	2320      	movs	r3, #32
 800294c:	e006      	b.n	800295c <HAL_ADC_ConfigChannel+0x698>
 800294e:	bf00      	nop
 8002950:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	fab3 f383 	clz	r3, r3
 800295a:	b2db      	uxtb	r3, r3
 800295c:	3301      	adds	r3, #1
 800295e:	f003 021f 	and.w	r2, r3, #31
 8002962:	4613      	mov	r3, r2
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	4413      	add	r3, r2
 8002968:	3b1e      	subs	r3, #30
 800296a:	051b      	lsls	r3, r3, #20
 800296c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002970:	430b      	orrs	r3, r1
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	6892      	ldr	r2, [r2, #8]
 8002976:	4619      	mov	r1, r3
 8002978:	f7fe fe08 	bl	800158c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	4b3f      	ldr	r3, [pc, #252]	; (8002a80 <HAL_ADC_ConfigChannel+0x7bc>)
 8002982:	4013      	ands	r3, r2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d070      	beq.n	8002a6a <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002988:	483e      	ldr	r0, [pc, #248]	; (8002a84 <HAL_ADC_ConfigChannel+0x7c0>)
 800298a:	f7fe fd01 	bl	8001390 <LL_ADC_GetCommonPathInternalCh>
 800298e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a3c      	ldr	r2, [pc, #240]	; (8002a88 <HAL_ADC_ConfigChannel+0x7c4>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d004      	beq.n	80029a6 <HAL_ADC_ConfigChannel+0x6e2>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a3a      	ldr	r2, [pc, #232]	; (8002a8c <HAL_ADC_ConfigChannel+0x7c8>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d126      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x730>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d120      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x730>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029ba:	d156      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029c4:	4619      	mov	r1, r3
 80029c6:	482f      	ldr	r0, [pc, #188]	; (8002a84 <HAL_ADC_ConfigChannel+0x7c0>)
 80029c8:	f7fe fccf 	bl	800136a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80029cc:	4b30      	ldr	r3, [pc, #192]	; (8002a90 <HAL_ADC_ConfigChannel+0x7cc>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	099b      	lsrs	r3, r3, #6
 80029d2:	4a30      	ldr	r2, [pc, #192]	; (8002a94 <HAL_ADC_ConfigChannel+0x7d0>)
 80029d4:	fba2 2303 	umull	r2, r3, r2, r3
 80029d8:	099a      	lsrs	r2, r3, #6
 80029da:	4613      	mov	r3, r2
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	4413      	add	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029e4:	e002      	b.n	80029ec <HAL_ADC_ConfigChannel+0x728>
          {
            wait_loop_index--;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	3b01      	subs	r3, #1
 80029ea:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f9      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x722>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029f2:	e03a      	b.n	8002a6a <HAL_ADC_ConfigChannel+0x7a6>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a27      	ldr	r2, [pc, #156]	; (8002a98 <HAL_ADC_ConfigChannel+0x7d4>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d113      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x762>
 80029fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10d      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x762>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a23      	ldr	r2, [pc, #140]	; (8002a9c <HAL_ADC_ConfigChannel+0x7d8>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d02a      	beq.n	8002a6a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4819      	ldr	r0, [pc, #100]	; (8002a84 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a20:	f7fe fca3 	bl	800136a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a24:	e021      	b.n	8002a6a <HAL_ADC_ConfigChannel+0x7a6>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a1d      	ldr	r2, [pc, #116]	; (8002aa0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d11c      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d116      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a16      	ldr	r2, [pc, #88]	; (8002a9c <HAL_ADC_ConfigChannel+0x7d8>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d011      	beq.n	8002a6a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a4e:	4619      	mov	r1, r3
 8002a50:	480c      	ldr	r0, [pc, #48]	; (8002a84 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a52:	f7fe fc8a 	bl	800136a <LL_ADC_SetCommonPathInternalCh>
 8002a56:	e008      	b.n	8002a6a <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5c:	f043 0220 	orr.w	r2, r3, #32
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002a72:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	37d8      	adds	r7, #216	; 0xd8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	80080000 	.word	0x80080000
 8002a84:	50000300 	.word	0x50000300
 8002a88:	c3210000 	.word	0xc3210000
 8002a8c:	90c00010 	.word	0x90c00010
 8002a90:	20000024 	.word	0x20000024
 8002a94:	053e2d63 	.word	0x053e2d63
 8002a98:	c7520000 	.word	0xc7520000
 8002a9c:	50000100 	.word	0x50000100
 8002aa0:	cb840000 	.word	0xcb840000

08002aa4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe fe96 	bl	80017ec <LL_ADC_REG_IsConversionOngoing>
 8002ac0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7fe feb7 	bl	800183a <LL_ADC_INJ_IsConversionOngoing>
 8002acc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d103      	bne.n	8002adc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 8090 	beq.w	8002bfc <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d02a      	beq.n	8002b40 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	7f5b      	ldrb	r3, [r3, #29]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d126      	bne.n	8002b40 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	7f1b      	ldrb	r3, [r3, #28]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d122      	bne.n	8002b40 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002afa:	2301      	movs	r3, #1
 8002afc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002afe:	e014      	b.n	8002b2a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	4a41      	ldr	r2, [pc, #260]	; (8002c08 <ADC_ConversionStop+0x164>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d90d      	bls.n	8002b24 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0c:	f043 0210 	orr.w	r2, r3, #16
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b18:	f043 0201 	orr.w	r2, r3, #1
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e06c      	b.n	8002bfe <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	3301      	adds	r3, #1
 8002b28:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b34:	2b40      	cmp	r3, #64	; 0x40
 8002b36:	d1e3      	bne.n	8002b00 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2240      	movs	r2, #64	; 0x40
 8002b3e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d014      	beq.n	8002b70 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe fe4e 	bl	80017ec <LL_ADC_REG_IsConversionOngoing>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00c      	beq.n	8002b70 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fe fe0b 	bl	8001776 <LL_ADC_IsDisableOngoing>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d104      	bne.n	8002b70 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7fe fe2a 	bl	80017c4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d014      	beq.n	8002ba0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7fe fe5d 	bl	800183a <LL_ADC_INJ_IsConversionOngoing>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00c      	beq.n	8002ba0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fe fdf3 	bl	8001776 <LL_ADC_IsDisableOngoing>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d104      	bne.n	8002ba0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fe fe39 	bl	8001812 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d004      	beq.n	8002bb0 <ADC_ConversionStop+0x10c>
 8002ba6:	2b03      	cmp	r3, #3
 8002ba8:	d105      	bne.n	8002bb6 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002baa:	230c      	movs	r3, #12
 8002bac:	617b      	str	r3, [r7, #20]
        break;
 8002bae:	e005      	b.n	8002bbc <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002bb0:	2308      	movs	r3, #8
 8002bb2:	617b      	str	r3, [r7, #20]
        break;
 8002bb4:	e002      	b.n	8002bbc <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002bb6:	2304      	movs	r3, #4
 8002bb8:	617b      	str	r3, [r7, #20]
        break;
 8002bba:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002bbc:	f7fe fbb6 	bl	800132c <HAL_GetTick>
 8002bc0:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002bc2:	e014      	b.n	8002bee <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002bc4:	f7fe fbb2 	bl	800132c <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b05      	cmp	r3, #5
 8002bd0:	d90d      	bls.n	8002bee <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd6:	f043 0210 	orr.w	r2, r3, #16
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002be2:	f043 0201 	orr.w	r2, r3, #1
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e007      	b.n	8002bfe <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1e3      	bne.n	8002bc4 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3720      	adds	r7, #32
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	a33fffff 	.word	0xa33fffff

08002c0c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fe fd99 	bl	8001750 <LL_ADC_IsEnabled>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d146      	bne.n	8002cb2 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	4b24      	ldr	r3, [pc, #144]	; (8002cbc <ADC_Enable+0xb0>)
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00d      	beq.n	8002c4e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c36:	f043 0210 	orr.w	r2, r3, #16
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c42:	f043 0201 	orr.w	r2, r3, #1
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e032      	b.n	8002cb4 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7fe fd54 	bl	8001700 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c58:	f7fe fb68 	bl	800132c <HAL_GetTick>
 8002c5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c5e:	e021      	b.n	8002ca4 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fe fd73 	bl	8001750 <LL_ADC_IsEnabled>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d104      	bne.n	8002c7a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7fe fd43 	bl	8001700 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c7a:	f7fe fb57 	bl	800132c <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d90d      	bls.n	8002ca4 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c8c:	f043 0210 	orr.w	r2, r3, #16
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c98:	f043 0201 	orr.w	r2, r3, #1
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e007      	b.n	8002cb4 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d1d6      	bne.n	8002c60 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	8000003f 	.word	0x8000003f

08002cc0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7fe fd52 	bl	8001776 <LL_ADC_IsDisableOngoing>
 8002cd2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7fe fd39 	bl	8001750 <LL_ADC_IsEnabled>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d040      	beq.n	8002d66 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d13d      	bne.n	8002d66 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 030d 	and.w	r3, r3, #13
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d10c      	bne.n	8002d12 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7fe fd13 	bl	8001728 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2203      	movs	r2, #3
 8002d08:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d0a:	f7fe fb0f 	bl	800132c <HAL_GetTick>
 8002d0e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d10:	e022      	b.n	8002d58 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d16:	f043 0210 	orr.w	r2, r3, #16
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d22:	f043 0201 	orr.w	r2, r3, #1
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e01c      	b.n	8002d68 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d2e:	f7fe fafd 	bl	800132c <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d90d      	bls.n	8002d58 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d40:	f043 0210 	orr.w	r2, r3, #16
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d4c:	f043 0201 	orr.w	r2, r3, #1
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e007      	b.n	8002d68 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1e3      	bne.n	8002d2e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <LL_ADC_IsEnabled>:
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d101      	bne.n	8002d88 <LL_ADC_IsEnabled+0x18>
 8002d84:	2301      	movs	r3, #1
 8002d86:	e000      	b.n	8002d8a <LL_ADC_IsEnabled+0x1a>
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <LL_ADC_REG_IsConversionOngoing>:
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 0304 	and.w	r3, r3, #4
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d101      	bne.n	8002dae <LL_ADC_REG_IsConversionOngoing+0x18>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e000      	b.n	8002db0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002e20:	b590      	push	{r4, r7, lr}
 8002e22:	b0a1      	sub	sp, #132	; 0x84
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e087      	b.n	8002f4e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e4e:	d102      	bne.n	8002e56 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002e50:	4b41      	ldr	r3, [pc, #260]	; (8002f58 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8002e52:	60bb      	str	r3, [r7, #8]
 8002e54:	e001      	b.n	8002e5a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002e56:	2300      	movs	r3, #0
 8002e58:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10b      	bne.n	8002e78 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e64:	f043 0220 	orr.w	r2, r3, #32
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e06a      	b.n	8002f4e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff ff8b 	bl	8002d96 <LL_ADC_REG_IsConversionOngoing>
 8002e80:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff ff85 	bl	8002d96 <LL_ADC_REG_IsConversionOngoing>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d14c      	bne.n	8002f2c <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002e92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d149      	bne.n	8002f2c <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002e98:	4b30      	ldr	r3, [pc, #192]	; (8002f5c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002e9a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d028      	beq.n	8002ef6 <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002ea4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	6859      	ldr	r1, [r3, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002eb6:	035b      	lsls	r3, r3, #13
 8002eb8:	430b      	orrs	r3, r1
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ebe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ec0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002ec4:	f7ff ff54 	bl	8002d70 <LL_ADC_IsEnabled>
 8002ec8:	4604      	mov	r4, r0
 8002eca:	4823      	ldr	r0, [pc, #140]	; (8002f58 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8002ecc:	f7ff ff50 	bl	8002d70 <LL_ADC_IsEnabled>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	4323      	orrs	r3, r4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d133      	bne.n	8002f40 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002ed8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ee0:	f023 030f 	bic.w	r3, r3, #15
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	6811      	ldr	r1, [r2, #0]
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	6892      	ldr	r2, [r2, #8]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ef2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ef4:	e024      	b.n	8002f40 <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002ef6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002efe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f00:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f02:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002f06:	f7ff ff33 	bl	8002d70 <LL_ADC_IsEnabled>
 8002f0a:	4604      	mov	r4, r0
 8002f0c:	4812      	ldr	r0, [pc, #72]	; (8002f58 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8002f0e:	f7ff ff2f 	bl	8002d70 <LL_ADC_IsEnabled>
 8002f12:	4603      	mov	r3, r0
 8002f14:	4323      	orrs	r3, r4
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d112      	bne.n	8002f40 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002f1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f22:	f023 030f 	bic.w	r3, r3, #15
 8002f26:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002f28:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f2a:	e009      	b.n	8002f40 <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f30:	f043 0220 	orr.w	r2, r3, #32
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002f3e:	e000      	b.n	8002f42 <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f40:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002f4a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3784      	adds	r7, #132	; 0x84
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd90      	pop	{r4, r7, pc}
 8002f56:	bf00      	nop
 8002f58:	50000100 	.word	0x50000100
 8002f5c:	50000300 	.word	0x50000300

08002f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f70:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f92:	4a04      	ldr	r2, [pc, #16]	; (8002fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	60d3      	str	r3, [r2, #12]
}
 8002f98:	bf00      	nop
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	e000ed00 	.word	0xe000ed00

08002fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fac:	4b04      	ldr	r3, [pc, #16]	; (8002fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	0a1b      	lsrs	r3, r3, #8
 8002fb2:	f003 0307 	and.w	r3, r3, #7
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	e000ed00 	.word	0xe000ed00

08002fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	db0b      	blt.n	8002fee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fd6:	79fb      	ldrb	r3, [r7, #7]
 8002fd8:	f003 021f 	and.w	r2, r3, #31
 8002fdc:	4907      	ldr	r1, [pc, #28]	; (8002ffc <__NVIC_EnableIRQ+0x38>)
 8002fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	2001      	movs	r0, #1
 8002fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8002fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	e000e100 	.word	0xe000e100

08003000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	4603      	mov	r3, r0
 8003008:	6039      	str	r1, [r7, #0]
 800300a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800300c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003010:	2b00      	cmp	r3, #0
 8003012:	db0a      	blt.n	800302a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	b2da      	uxtb	r2, r3
 8003018:	490c      	ldr	r1, [pc, #48]	; (800304c <__NVIC_SetPriority+0x4c>)
 800301a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301e:	0112      	lsls	r2, r2, #4
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	440b      	add	r3, r1
 8003024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003028:	e00a      	b.n	8003040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	b2da      	uxtb	r2, r3
 800302e:	4908      	ldr	r1, [pc, #32]	; (8003050 <__NVIC_SetPriority+0x50>)
 8003030:	79fb      	ldrb	r3, [r7, #7]
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	3b04      	subs	r3, #4
 8003038:	0112      	lsls	r2, r2, #4
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	440b      	add	r3, r1
 800303e:	761a      	strb	r2, [r3, #24]
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	e000e100 	.word	0xe000e100
 8003050:	e000ed00 	.word	0xe000ed00

08003054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003054:	b480      	push	{r7}
 8003056:	b089      	sub	sp, #36	; 0x24
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	f1c3 0307 	rsb	r3, r3, #7
 800306e:	2b04      	cmp	r3, #4
 8003070:	bf28      	it	cs
 8003072:	2304      	movcs	r3, #4
 8003074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	3304      	adds	r3, #4
 800307a:	2b06      	cmp	r3, #6
 800307c:	d902      	bls.n	8003084 <NVIC_EncodePriority+0x30>
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	3b03      	subs	r3, #3
 8003082:	e000      	b.n	8003086 <NVIC_EncodePriority+0x32>
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003088:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43da      	mvns	r2, r3
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	401a      	ands	r2, r3
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800309c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	fa01 f303 	lsl.w	r3, r1, r3
 80030a6:	43d9      	mvns	r1, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030ac:	4313      	orrs	r3, r2
         );
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3724      	adds	r7, #36	; 0x24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
	...

080030bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3b01      	subs	r3, #1
 80030c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030cc:	d301      	bcc.n	80030d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ce:	2301      	movs	r3, #1
 80030d0:	e00f      	b.n	80030f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030d2:	4a0a      	ldr	r2, [pc, #40]	; (80030fc <SysTick_Config+0x40>)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030da:	210f      	movs	r1, #15
 80030dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030e0:	f7ff ff8e 	bl	8003000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030e4:	4b05      	ldr	r3, [pc, #20]	; (80030fc <SysTick_Config+0x40>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030ea:	4b04      	ldr	r3, [pc, #16]	; (80030fc <SysTick_Config+0x40>)
 80030ec:	2207      	movs	r2, #7
 80030ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	e000e010 	.word	0xe000e010

08003100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7ff ff29 	bl	8002f60 <__NVIC_SetPriorityGrouping>
}
 800310e:	bf00      	nop
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b086      	sub	sp, #24
 800311a:	af00      	add	r7, sp, #0
 800311c:	4603      	mov	r3, r0
 800311e:	60b9      	str	r1, [r7, #8]
 8003120:	607a      	str	r2, [r7, #4]
 8003122:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003124:	f7ff ff40 	bl	8002fa8 <__NVIC_GetPriorityGrouping>
 8003128:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	68b9      	ldr	r1, [r7, #8]
 800312e:	6978      	ldr	r0, [r7, #20]
 8003130:	f7ff ff90 	bl	8003054 <NVIC_EncodePriority>
 8003134:	4602      	mov	r2, r0
 8003136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800313a:	4611      	mov	r1, r2
 800313c:	4618      	mov	r0, r3
 800313e:	f7ff ff5f 	bl	8003000 <__NVIC_SetPriority>
}
 8003142:	bf00      	nop
 8003144:	3718      	adds	r7, #24
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b082      	sub	sp, #8
 800314e:	af00      	add	r7, sp, #0
 8003150:	4603      	mov	r3, r0
 8003152:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff ff33 	bl	8002fc4 <__NVIC_EnableIRQ>
}
 800315e:	bf00      	nop
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b082      	sub	sp, #8
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff ffa4 	bl	80030bc <SysTick_Config>
 8003174:	4603      	mov	r3, r0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
	...

08003180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003180:	b480      	push	{r7}
 8003182:	b087      	sub	sp, #28
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800318a:	2300      	movs	r3, #0
 800318c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800318e:	e15a      	b.n	8003446 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	2101      	movs	r1, #1
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	fa01 f303 	lsl.w	r3, r1, r3
 800319c:	4013      	ands	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 814c 	beq.w	8003440 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d00b      	beq.n	80031c8 <HAL_GPIO_Init+0x48>
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d007      	beq.n	80031c8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031bc:	2b11      	cmp	r3, #17
 80031be:	d003      	beq.n	80031c8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b12      	cmp	r3, #18
 80031c6:	d130      	bne.n	800322a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	2203      	movs	r2, #3
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4013      	ands	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031fe:	2201      	movs	r2, #1
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	43db      	mvns	r3, r3
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	4013      	ands	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	091b      	lsrs	r3, r3, #4
 8003214:	f003 0201 	and.w	r2, r3, #1
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	4313      	orrs	r3, r2
 8003222:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	2203      	movs	r2, #3
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	43db      	mvns	r3, r3
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	4013      	ands	r3, r2
 8003240:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	4313      	orrs	r3, r2
 8003252:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d003      	beq.n	800326a <HAL_GPIO_Init+0xea>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b12      	cmp	r3, #18
 8003268:	d123      	bne.n	80032b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	08da      	lsrs	r2, r3, #3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	3208      	adds	r2, #8
 8003272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003276:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	220f      	movs	r2, #15
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	43db      	mvns	r3, r3
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	4013      	ands	r3, r2
 800328c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	691a      	ldr	r2, [r3, #16]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	08da      	lsrs	r2, r3, #3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3208      	adds	r2, #8
 80032ac:	6939      	ldr	r1, [r7, #16]
 80032ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	2203      	movs	r2, #3
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	43db      	mvns	r3, r3
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	4013      	ands	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f003 0203 	and.w	r2, r3, #3
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	4313      	orrs	r3, r2
 80032de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 80a6 	beq.w	8003440 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032f4:	4b5b      	ldr	r3, [pc, #364]	; (8003464 <HAL_GPIO_Init+0x2e4>)
 80032f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032f8:	4a5a      	ldr	r2, [pc, #360]	; (8003464 <HAL_GPIO_Init+0x2e4>)
 80032fa:	f043 0301 	orr.w	r3, r3, #1
 80032fe:	6613      	str	r3, [r2, #96]	; 0x60
 8003300:	4b58      	ldr	r3, [pc, #352]	; (8003464 <HAL_GPIO_Init+0x2e4>)
 8003302:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	60bb      	str	r3, [r7, #8]
 800330a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800330c:	4a56      	ldr	r2, [pc, #344]	; (8003468 <HAL_GPIO_Init+0x2e8>)
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	089b      	lsrs	r3, r3, #2
 8003312:	3302      	adds	r3, #2
 8003314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003318:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f003 0303 	and.w	r3, r3, #3
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	220f      	movs	r2, #15
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	43db      	mvns	r3, r3
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4013      	ands	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003336:	d01f      	beq.n	8003378 <HAL_GPIO_Init+0x1f8>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a4c      	ldr	r2, [pc, #304]	; (800346c <HAL_GPIO_Init+0x2ec>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d019      	beq.n	8003374 <HAL_GPIO_Init+0x1f4>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a4b      	ldr	r2, [pc, #300]	; (8003470 <HAL_GPIO_Init+0x2f0>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d013      	beq.n	8003370 <HAL_GPIO_Init+0x1f0>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a4a      	ldr	r2, [pc, #296]	; (8003474 <HAL_GPIO_Init+0x2f4>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d00d      	beq.n	800336c <HAL_GPIO_Init+0x1ec>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a49      	ldr	r2, [pc, #292]	; (8003478 <HAL_GPIO_Init+0x2f8>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d007      	beq.n	8003368 <HAL_GPIO_Init+0x1e8>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a48      	ldr	r2, [pc, #288]	; (800347c <HAL_GPIO_Init+0x2fc>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d101      	bne.n	8003364 <HAL_GPIO_Init+0x1e4>
 8003360:	2305      	movs	r3, #5
 8003362:	e00a      	b.n	800337a <HAL_GPIO_Init+0x1fa>
 8003364:	2306      	movs	r3, #6
 8003366:	e008      	b.n	800337a <HAL_GPIO_Init+0x1fa>
 8003368:	2304      	movs	r3, #4
 800336a:	e006      	b.n	800337a <HAL_GPIO_Init+0x1fa>
 800336c:	2303      	movs	r3, #3
 800336e:	e004      	b.n	800337a <HAL_GPIO_Init+0x1fa>
 8003370:	2302      	movs	r3, #2
 8003372:	e002      	b.n	800337a <HAL_GPIO_Init+0x1fa>
 8003374:	2301      	movs	r3, #1
 8003376:	e000      	b.n	800337a <HAL_GPIO_Init+0x1fa>
 8003378:	2300      	movs	r3, #0
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	f002 0203 	and.w	r2, r2, #3
 8003380:	0092      	lsls	r2, r2, #2
 8003382:	4093      	lsls	r3, r2
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4313      	orrs	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800338a:	4937      	ldr	r1, [pc, #220]	; (8003468 <HAL_GPIO_Init+0x2e8>)
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	089b      	lsrs	r3, r3, #2
 8003390:	3302      	adds	r3, #2
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003398:	4b39      	ldr	r3, [pc, #228]	; (8003480 <HAL_GPIO_Init+0x300>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	43db      	mvns	r3, r3
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	4013      	ands	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033bc:	4a30      	ldr	r2, [pc, #192]	; (8003480 <HAL_GPIO_Init+0x300>)
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80033c2:	4b2f      	ldr	r3, [pc, #188]	; (8003480 <HAL_GPIO_Init+0x300>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	43db      	mvns	r3, r3
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	4013      	ands	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033e6:	4a26      	ldr	r2, [pc, #152]	; (8003480 <HAL_GPIO_Init+0x300>)
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033ec:	4b24      	ldr	r3, [pc, #144]	; (8003480 <HAL_GPIO_Init+0x300>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	43db      	mvns	r3, r3
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4013      	ands	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d003      	beq.n	8003410 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4313      	orrs	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003410:	4a1b      	ldr	r2, [pc, #108]	; (8003480 <HAL_GPIO_Init+0x300>)
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003416:	4b1a      	ldr	r3, [pc, #104]	; (8003480 <HAL_GPIO_Init+0x300>)
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	43db      	mvns	r3, r3
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4013      	ands	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4313      	orrs	r3, r2
 8003438:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800343a:	4a11      	ldr	r2, [pc, #68]	; (8003480 <HAL_GPIO_Init+0x300>)
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	3301      	adds	r3, #1
 8003444:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	fa22 f303 	lsr.w	r3, r2, r3
 8003450:	2b00      	cmp	r3, #0
 8003452:	f47f ae9d 	bne.w	8003190 <HAL_GPIO_Init+0x10>
  }
}
 8003456:	bf00      	nop
 8003458:	371c      	adds	r7, #28
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	40021000 	.word	0x40021000
 8003468:	40010000 	.word	0x40010000
 800346c:	48000400 	.word	0x48000400
 8003470:	48000800 	.word	0x48000800
 8003474:	48000c00 	.word	0x48000c00
 8003478:	48001000 	.word	0x48001000
 800347c:	48001400 	.word	0x48001400
 8003480:	40010400 	.word	0x40010400

08003484 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	460b      	mov	r3, r1
 800348e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	691a      	ldr	r2, [r3, #16]
 8003494:	887b      	ldrh	r3, [r7, #2]
 8003496:	4013      	ands	r3, r2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d002      	beq.n	80034a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800349c:	2301      	movs	r3, #1
 800349e:	73fb      	strb	r3, [r7, #15]
 80034a0:	e001      	b.n	80034a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034a2:	2300      	movs	r3, #0
 80034a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	460b      	mov	r3, r1
 80034be:	807b      	strh	r3, [r7, #2]
 80034c0:	4613      	mov	r3, r2
 80034c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034c4:	787b      	ldrb	r3, [r7, #1]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034ca:	887a      	ldrh	r2, [r7, #2]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034d0:	e002      	b.n	80034d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034d2:	887a      	ldrh	r2, [r7, #2]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	4603      	mov	r3, r0
 80034ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80034ee:	4b08      	ldr	r3, [pc, #32]	; (8003510 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034f0:	695a      	ldr	r2, [r3, #20]
 80034f2:	88fb      	ldrh	r3, [r7, #6]
 80034f4:	4013      	ands	r3, r2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d006      	beq.n	8003508 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034fa:	4a05      	ldr	r2, [pc, #20]	; (8003510 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034fc:	88fb      	ldrh	r3, [r7, #6]
 80034fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003500:	88fb      	ldrh	r3, [r7, #6]
 8003502:	4618      	mov	r0, r3
 8003504:	f7fd fd28 	bl	8000f58 <HAL_GPIO_EXTI_Callback>
  }
}
 8003508:	bf00      	nop
 800350a:	3708      	adds	r7, #8
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40010400 	.word	0x40010400

08003514 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d141      	bne.n	80035a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003522:	4b4b      	ldr	r3, [pc, #300]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800352a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800352e:	d131      	bne.n	8003594 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003530:	4b47      	ldr	r3, [pc, #284]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003532:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003536:	4a46      	ldr	r2, [pc, #280]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003538:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800353c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003540:	4b43      	ldr	r3, [pc, #268]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003548:	4a41      	ldr	r2, [pc, #260]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800354a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800354e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003550:	4b40      	ldr	r3, [pc, #256]	; (8003654 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2232      	movs	r2, #50	; 0x32
 8003556:	fb02 f303 	mul.w	r3, r2, r3
 800355a:	4a3f      	ldr	r2, [pc, #252]	; (8003658 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800355c:	fba2 2303 	umull	r2, r3, r2, r3
 8003560:	0c9b      	lsrs	r3, r3, #18
 8003562:	3301      	adds	r3, #1
 8003564:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003566:	e002      	b.n	800356e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	3b01      	subs	r3, #1
 800356c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800356e:	4b38      	ldr	r3, [pc, #224]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800357a:	d102      	bne.n	8003582 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1f2      	bne.n	8003568 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003582:	4b33      	ldr	r3, [pc, #204]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800358a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800358e:	d158      	bne.n	8003642 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e057      	b.n	8003644 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003594:	4b2e      	ldr	r3, [pc, #184]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003596:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800359a:	4a2d      	ldr	r2, [pc, #180]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800359c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80035a4:	e04d      	b.n	8003642 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035ac:	d141      	bne.n	8003632 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80035ae:	4b28      	ldr	r3, [pc, #160]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ba:	d131      	bne.n	8003620 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035bc:	4b24      	ldr	r3, [pc, #144]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035c2:	4a23      	ldr	r2, [pc, #140]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035cc:	4b20      	ldr	r3, [pc, #128]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035d4:	4a1e      	ldr	r2, [pc, #120]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035dc:	4b1d      	ldr	r3, [pc, #116]	; (8003654 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2232      	movs	r2, #50	; 0x32
 80035e2:	fb02 f303 	mul.w	r3, r2, r3
 80035e6:	4a1c      	ldr	r2, [pc, #112]	; (8003658 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80035e8:	fba2 2303 	umull	r2, r3, r2, r3
 80035ec:	0c9b      	lsrs	r3, r3, #18
 80035ee:	3301      	adds	r3, #1
 80035f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035f2:	e002      	b.n	80035fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	3b01      	subs	r3, #1
 80035f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035fa:	4b15      	ldr	r3, [pc, #84]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003606:	d102      	bne.n	800360e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f2      	bne.n	80035f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800360e:	4b10      	ldr	r3, [pc, #64]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800361a:	d112      	bne.n	8003642 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e011      	b.n	8003644 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003620:	4b0b      	ldr	r3, [pc, #44]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003622:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003626:	4a0a      	ldr	r2, [pc, #40]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800362c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003630:	e007      	b.n	8003642 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003632:	4b07      	ldr	r3, [pc, #28]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800363a:	4a05      	ldr	r2, [pc, #20]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800363c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003640:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	40007000 	.word	0x40007000
 8003654:	20000024 	.word	0x20000024
 8003658:	431bde83 	.word	0x431bde83

0800365c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003660:	4b05      	ldr	r3, [pc, #20]	; (8003678 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	4a04      	ldr	r2, [pc, #16]	; (8003678 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003666:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800366a:	6093      	str	r3, [r2, #8]
}
 800366c:	bf00      	nop
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	40007000 	.word	0x40007000

0800367c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b088      	sub	sp, #32
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e308      	b.n	8003ca0 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d075      	beq.n	8003786 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800369a:	4ba3      	ldr	r3, [pc, #652]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036a4:	4ba0      	ldr	r3, [pc, #640]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f003 0303 	and.w	r3, r3, #3
 80036ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	2b0c      	cmp	r3, #12
 80036b2:	d102      	bne.n	80036ba <HAL_RCC_OscConfig+0x3e>
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2b03      	cmp	r3, #3
 80036b8:	d002      	beq.n	80036c0 <HAL_RCC_OscConfig+0x44>
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	2b08      	cmp	r3, #8
 80036be:	d10b      	bne.n	80036d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c0:	4b99      	ldr	r3, [pc, #612]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d05b      	beq.n	8003784 <HAL_RCC_OscConfig+0x108>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d157      	bne.n	8003784 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e2e3      	b.n	8003ca0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e0:	d106      	bne.n	80036f0 <HAL_RCC_OscConfig+0x74>
 80036e2:	4b91      	ldr	r3, [pc, #580]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a90      	ldr	r2, [pc, #576]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80036e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	e01d      	b.n	800372c <HAL_RCC_OscConfig+0xb0>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036f8:	d10c      	bne.n	8003714 <HAL_RCC_OscConfig+0x98>
 80036fa:	4b8b      	ldr	r3, [pc, #556]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a8a      	ldr	r2, [pc, #552]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003700:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	4b88      	ldr	r3, [pc, #544]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a87      	ldr	r2, [pc, #540]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 800370c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	e00b      	b.n	800372c <HAL_RCC_OscConfig+0xb0>
 8003714:	4b84      	ldr	r3, [pc, #528]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a83      	ldr	r2, [pc, #524]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 800371a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800371e:	6013      	str	r3, [r2, #0]
 8003720:	4b81      	ldr	r3, [pc, #516]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a80      	ldr	r2, [pc, #512]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800372a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d013      	beq.n	800375c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003734:	f7fd fdfa 	bl	800132c <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800373c:	f7fd fdf6 	bl	800132c <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b64      	cmp	r3, #100	; 0x64
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e2a8      	b.n	8003ca0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800374e:	4b76      	ldr	r3, [pc, #472]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d0f0      	beq.n	800373c <HAL_RCC_OscConfig+0xc0>
 800375a:	e014      	b.n	8003786 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375c:	f7fd fde6 	bl	800132c <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003764:	f7fd fde2 	bl	800132c <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b64      	cmp	r3, #100	; 0x64
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e294      	b.n	8003ca0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003776:	4b6c      	ldr	r3, [pc, #432]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1f0      	bne.n	8003764 <HAL_RCC_OscConfig+0xe8>
 8003782:	e000      	b.n	8003786 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d075      	beq.n	800387e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003792:	4b65      	ldr	r3, [pc, #404]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 030c 	and.w	r3, r3, #12
 800379a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800379c:	4b62      	ldr	r3, [pc, #392]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f003 0303 	and.w	r3, r3, #3
 80037a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	2b0c      	cmp	r3, #12
 80037aa:	d102      	bne.n	80037b2 <HAL_RCC_OscConfig+0x136>
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d002      	beq.n	80037b8 <HAL_RCC_OscConfig+0x13c>
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	2b04      	cmp	r3, #4
 80037b6:	d11f      	bne.n	80037f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037b8:	4b5b      	ldr	r3, [pc, #364]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d005      	beq.n	80037d0 <HAL_RCC_OscConfig+0x154>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e267      	b.n	8003ca0 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037d0:	4b55      	ldr	r3, [pc, #340]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	061b      	lsls	r3, r3, #24
 80037de:	4952      	ldr	r1, [pc, #328]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80037e4:	4b51      	ldr	r3, [pc, #324]	; (800392c <HAL_RCC_OscConfig+0x2b0>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7fd fd53 	bl	8001294 <HAL_InitTick>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d043      	beq.n	800387c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e253      	b.n	8003ca0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d023      	beq.n	8003848 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003800:	4b49      	ldr	r3, [pc, #292]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a48      	ldr	r2, [pc, #288]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800380a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380c:	f7fd fd8e 	bl	800132c <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003814:	f7fd fd8a 	bl	800132c <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e23c      	b.n	8003ca0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003826:	4b40      	ldr	r3, [pc, #256]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0f0      	beq.n	8003814 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003832:	4b3d      	ldr	r3, [pc, #244]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	061b      	lsls	r3, r3, #24
 8003840:	4939      	ldr	r1, [pc, #228]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003842:	4313      	orrs	r3, r2
 8003844:	604b      	str	r3, [r1, #4]
 8003846:	e01a      	b.n	800387e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003848:	4b37      	ldr	r3, [pc, #220]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a36      	ldr	r2, [pc, #216]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 800384e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003854:	f7fd fd6a 	bl	800132c <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800385c:	f7fd fd66 	bl	800132c <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e218      	b.n	8003ca0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800386e:	4b2e      	ldr	r3, [pc, #184]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1f0      	bne.n	800385c <HAL_RCC_OscConfig+0x1e0>
 800387a:	e000      	b.n	800387e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800387c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	2b00      	cmp	r3, #0
 8003888:	d03c      	beq.n	8003904 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d01c      	beq.n	80038cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003892:	4b25      	ldr	r3, [pc, #148]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003894:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003898:	4a23      	ldr	r2, [pc, #140]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 800389a:	f043 0301 	orr.w	r3, r3, #1
 800389e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a2:	f7fd fd43 	bl	800132c <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038aa:	f7fd fd3f 	bl	800132c <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e1f1      	b.n	8003ca0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038bc:	4b1a      	ldr	r3, [pc, #104]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80038be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0ef      	beq.n	80038aa <HAL_RCC_OscConfig+0x22e>
 80038ca:	e01b      	b.n	8003904 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038cc:	4b16      	ldr	r3, [pc, #88]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80038ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038d2:	4a15      	ldr	r2, [pc, #84]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80038d4:	f023 0301 	bic.w	r3, r3, #1
 80038d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038dc:	f7fd fd26 	bl	800132c <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038e4:	f7fd fd22 	bl	800132c <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e1d4      	b.n	8003ca0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038f6:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80038f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1ef      	bne.n	80038e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 80ab 	beq.w	8003a68 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003912:	2300      	movs	r3, #0
 8003914:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003916:	4b04      	ldr	r3, [pc, #16]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d106      	bne.n	8003930 <HAL_RCC_OscConfig+0x2b4>
 8003922:	2301      	movs	r3, #1
 8003924:	e005      	b.n	8003932 <HAL_RCC_OscConfig+0x2b6>
 8003926:	bf00      	nop
 8003928:	40021000 	.word	0x40021000
 800392c:	20000028 	.word	0x20000028
 8003930:	2300      	movs	r3, #0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00d      	beq.n	8003952 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003936:	4baf      	ldr	r3, [pc, #700]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393a:	4aae      	ldr	r2, [pc, #696]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 800393c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003940:	6593      	str	r3, [r2, #88]	; 0x58
 8003942:	4bac      	ldr	r3, [pc, #688]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800394e:	2301      	movs	r3, #1
 8003950:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003952:	4ba9      	ldr	r3, [pc, #676]	; (8003bf8 <HAL_RCC_OscConfig+0x57c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395a:	2b00      	cmp	r3, #0
 800395c:	d118      	bne.n	8003990 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800395e:	4ba6      	ldr	r3, [pc, #664]	; (8003bf8 <HAL_RCC_OscConfig+0x57c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4aa5      	ldr	r2, [pc, #660]	; (8003bf8 <HAL_RCC_OscConfig+0x57c>)
 8003964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003968:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800396a:	f7fd fcdf 	bl	800132c <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003970:	e008      	b.n	8003984 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003972:	f7fd fcdb 	bl	800132c <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e18d      	b.n	8003ca0 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003984:	4b9c      	ldr	r3, [pc, #624]	; (8003bf8 <HAL_RCC_OscConfig+0x57c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0f0      	beq.n	8003972 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d108      	bne.n	80039aa <HAL_RCC_OscConfig+0x32e>
 8003998:	4b96      	ldr	r3, [pc, #600]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 800399a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399e:	4a95      	ldr	r2, [pc, #596]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 80039a0:	f043 0301 	orr.w	r3, r3, #1
 80039a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039a8:	e024      	b.n	80039f4 <HAL_RCC_OscConfig+0x378>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	2b05      	cmp	r3, #5
 80039b0:	d110      	bne.n	80039d4 <HAL_RCC_OscConfig+0x358>
 80039b2:	4b90      	ldr	r3, [pc, #576]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 80039b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b8:	4a8e      	ldr	r2, [pc, #568]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 80039ba:	f043 0304 	orr.w	r3, r3, #4
 80039be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039c2:	4b8c      	ldr	r3, [pc, #560]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 80039c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c8:	4a8a      	ldr	r2, [pc, #552]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 80039ca:	f043 0301 	orr.w	r3, r3, #1
 80039ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039d2:	e00f      	b.n	80039f4 <HAL_RCC_OscConfig+0x378>
 80039d4:	4b87      	ldr	r3, [pc, #540]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 80039d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039da:	4a86      	ldr	r2, [pc, #536]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 80039dc:	f023 0301 	bic.w	r3, r3, #1
 80039e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039e4:	4b83      	ldr	r3, [pc, #524]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 80039e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ea:	4a82      	ldr	r2, [pc, #520]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 80039ec:	f023 0304 	bic.w	r3, r3, #4
 80039f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d016      	beq.n	8003a2a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039fc:	f7fd fc96 	bl	800132c <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a02:	e00a      	b.n	8003a1a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a04:	f7fd fc92 	bl	800132c <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e142      	b.n	8003ca0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a1a:	4b76      	ldr	r3, [pc, #472]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0ed      	beq.n	8003a04 <HAL_RCC_OscConfig+0x388>
 8003a28:	e015      	b.n	8003a56 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2a:	f7fd fc7f 	bl	800132c <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a30:	e00a      	b.n	8003a48 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a32:	f7fd fc7b 	bl	800132c <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e12b      	b.n	8003ca0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a48:	4b6a      	ldr	r3, [pc, #424]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1ed      	bne.n	8003a32 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a56:	7ffb      	ldrb	r3, [r7, #31]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d105      	bne.n	8003a68 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a5c:	4b65      	ldr	r3, [pc, #404]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a60:	4a64      	ldr	r2, [pc, #400]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003a62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a66:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0320 	and.w	r3, r3, #32
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d03c      	beq.n	8003aee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d01c      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a7c:	4b5d      	ldr	r3, [pc, #372]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003a7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a82:	4a5c      	ldr	r2, [pc, #368]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003a84:	f043 0301 	orr.w	r3, r3, #1
 8003a88:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a8c:	f7fd fc4e 	bl	800132c <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a94:	f7fd fc4a 	bl	800132c <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e0fc      	b.n	8003ca0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003aa6:	4b53      	ldr	r3, [pc, #332]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003aa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0ef      	beq.n	8003a94 <HAL_RCC_OscConfig+0x418>
 8003ab4:	e01b      	b.n	8003aee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ab6:	4b4f      	ldr	r3, [pc, #316]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003ab8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003abc:	4a4d      	ldr	r2, [pc, #308]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003abe:	f023 0301 	bic.w	r3, r3, #1
 8003ac2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac6:	f7fd fc31 	bl	800132c <HAL_GetTick>
 8003aca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003acc:	e008      	b.n	8003ae0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ace:	f7fd fc2d 	bl	800132c <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e0df      	b.n	8003ca0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ae0:	4b44      	ldr	r3, [pc, #272]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003ae2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1ef      	bne.n	8003ace <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f000 80d3 	beq.w	8003c9e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003af8:	4b3e      	ldr	r3, [pc, #248]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f003 030c 	and.w	r3, r3, #12
 8003b00:	2b0c      	cmp	r3, #12
 8003b02:	f000 808d 	beq.w	8003c20 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	69db      	ldr	r3, [r3, #28]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d15a      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b0e:	4b39      	ldr	r3, [pc, #228]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a38      	ldr	r2, [pc, #224]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003b14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1a:	f7fd fc07 	bl	800132c <HAL_GetTick>
 8003b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b20:	e008      	b.n	8003b34 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b22:	f7fd fc03 	bl	800132c <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e0b5      	b.n	8003ca0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b34:	4b2f      	ldr	r3, [pc, #188]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1f0      	bne.n	8003b22 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b40:	4b2c      	ldr	r3, [pc, #176]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	4b2d      	ldr	r3, [pc, #180]	; (8003bfc <HAL_RCC_OscConfig+0x580>)
 8003b46:	4013      	ands	r3, r2
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6a11      	ldr	r1, [r2, #32]
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b50:	3a01      	subs	r2, #1
 8003b52:	0112      	lsls	r2, r2, #4
 8003b54:	4311      	orrs	r1, r2
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003b5a:	0212      	lsls	r2, r2, #8
 8003b5c:	4311      	orrs	r1, r2
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b62:	0852      	lsrs	r2, r2, #1
 8003b64:	3a01      	subs	r2, #1
 8003b66:	0552      	lsls	r2, r2, #21
 8003b68:	4311      	orrs	r1, r2
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b6e:	0852      	lsrs	r2, r2, #1
 8003b70:	3a01      	subs	r2, #1
 8003b72:	0652      	lsls	r2, r2, #25
 8003b74:	4311      	orrs	r1, r2
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003b7a:	06d2      	lsls	r2, r2, #27
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	491d      	ldr	r1, [pc, #116]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b84:	4b1b      	ldr	r3, [pc, #108]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a1a      	ldr	r2, [pc, #104]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003b8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b8e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b90:	4b18      	ldr	r3, [pc, #96]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	4a17      	ldr	r2, [pc, #92]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003b96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b9a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9c:	f7fd fbc6 	bl	800132c <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba4:	f7fd fbc2 	bl	800132c <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e074      	b.n	8003ca0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bb6:	4b0f      	ldr	r3, [pc, #60]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d0f0      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x528>
 8003bc2:	e06c      	b.n	8003c9e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc4:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a0a      	ldr	r2, [pc, #40]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003bca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bce:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003bd0:	4b08      	ldr	r3, [pc, #32]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	4a07      	ldr	r2, [pc, #28]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003bd6:	f023 0303 	bic.w	r3, r3, #3
 8003bda:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003bdc:	4b05      	ldr	r3, [pc, #20]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	4a04      	ldr	r2, [pc, #16]	; (8003bf4 <HAL_RCC_OscConfig+0x578>)
 8003be2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bec:	f7fd fb9e 	bl	800132c <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bf2:	e00e      	b.n	8003c12 <HAL_RCC_OscConfig+0x596>
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	40007000 	.word	0x40007000
 8003bfc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c00:	f7fd fb94 	bl	800132c <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e046      	b.n	8003ca0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c12:	4b25      	ldr	r3, [pc, #148]	; (8003ca8 <HAL_RCC_OscConfig+0x62c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1f0      	bne.n	8003c00 <HAL_RCC_OscConfig+0x584>
 8003c1e:	e03e      	b.n	8003c9e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	69db      	ldr	r3, [r3, #28]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d101      	bne.n	8003c2c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e039      	b.n	8003ca0 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003c2c:	4b1e      	ldr	r3, [pc, #120]	; (8003ca8 <HAL_RCC_OscConfig+0x62c>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f003 0203 	and.w	r2, r3, #3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d12c      	bne.n	8003c9a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d123      	bne.n	8003c9a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d11b      	bne.n	8003c9a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d113      	bne.n	8003c9a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7c:	085b      	lsrs	r3, r3, #1
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d109      	bne.n	8003c9a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c90:	085b      	lsrs	r3, r3, #1
 8003c92:	3b01      	subs	r3, #1
 8003c94:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d001      	beq.n	8003c9e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3720      	adds	r7, #32
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	40021000 	.word	0x40021000

08003cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e11e      	b.n	8003f02 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cc4:	4b91      	ldr	r3, [pc, #580]	; (8003f0c <HAL_RCC_ClockConfig+0x260>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 030f 	and.w	r3, r3, #15
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d910      	bls.n	8003cf4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cd2:	4b8e      	ldr	r3, [pc, #568]	; (8003f0c <HAL_RCC_ClockConfig+0x260>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f023 020f 	bic.w	r2, r3, #15
 8003cda:	498c      	ldr	r1, [pc, #560]	; (8003f0c <HAL_RCC_ClockConfig+0x260>)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ce2:	4b8a      	ldr	r3, [pc, #552]	; (8003f0c <HAL_RCC_ClockConfig+0x260>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 030f 	and.w	r3, r3, #15
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d001      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e106      	b.n	8003f02 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d073      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	2b03      	cmp	r3, #3
 8003d06:	d129      	bne.n	8003d5c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d08:	4b81      	ldr	r3, [pc, #516]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e0f4      	b.n	8003f02 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003d18:	f000 f99e 	bl	8004058 <RCC_GetSysClockFreqFromPLLSource>
 8003d1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	4a7c      	ldr	r2, [pc, #496]	; (8003f14 <HAL_RCC_ClockConfig+0x268>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d93f      	bls.n	8003da6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003d26:	4b7a      	ldr	r3, [pc, #488]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d009      	beq.n	8003d46 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d033      	beq.n	8003da6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d12f      	bne.n	8003da6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d46:	4b72      	ldr	r3, [pc, #456]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d4e:	4a70      	ldr	r2, [pc, #448]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d54:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003d56:	2380      	movs	r3, #128	; 0x80
 8003d58:	617b      	str	r3, [r7, #20]
 8003d5a:	e024      	b.n	8003da6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d107      	bne.n	8003d74 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d64:	4b6a      	ldr	r3, [pc, #424]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d109      	bne.n	8003d84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e0c6      	b.n	8003f02 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d74:	4b66      	ldr	r3, [pc, #408]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e0be      	b.n	8003f02 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003d84:	f000 f8ce 	bl	8003f24 <HAL_RCC_GetSysClockFreq>
 8003d88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	4a61      	ldr	r2, [pc, #388]	; (8003f14 <HAL_RCC_ClockConfig+0x268>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d909      	bls.n	8003da6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d92:	4b5f      	ldr	r3, [pc, #380]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d9a:	4a5d      	ldr	r2, [pc, #372]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003da0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003da2:	2380      	movs	r3, #128	; 0x80
 8003da4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003da6:	4b5a      	ldr	r3, [pc, #360]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f023 0203 	bic.w	r2, r3, #3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	4957      	ldr	r1, [pc, #348]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003db8:	f7fd fab8 	bl	800132c <HAL_GetTick>
 8003dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dbe:	e00a      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dc0:	f7fd fab4 	bl	800132c <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e095      	b.n	8003f02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd6:	4b4e      	ldr	r3, [pc, #312]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 020c 	and.w	r2, r3, #12
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d1eb      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d023      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0304 	and.w	r3, r3, #4
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d005      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e00:	4b43      	ldr	r3, [pc, #268]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	4a42      	ldr	r2, [pc, #264]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003e06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e0a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0308 	and.w	r3, r3, #8
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d007      	beq.n	8003e28 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003e18:	4b3d      	ldr	r3, [pc, #244]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003e20:	4a3b      	ldr	r2, [pc, #236]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003e22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e28:	4b39      	ldr	r3, [pc, #228]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	4936      	ldr	r1, [pc, #216]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	608b      	str	r3, [r1, #8]
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	2b80      	cmp	r3, #128	; 0x80
 8003e40:	d105      	bne.n	8003e4e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003e42:	4b33      	ldr	r3, [pc, #204]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	4a32      	ldr	r2, [pc, #200]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003e48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e4c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e4e:	4b2f      	ldr	r3, [pc, #188]	; (8003f0c <HAL_RCC_ClockConfig+0x260>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d21d      	bcs.n	8003e98 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e5c:	4b2b      	ldr	r3, [pc, #172]	; (8003f0c <HAL_RCC_ClockConfig+0x260>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f023 020f 	bic.w	r2, r3, #15
 8003e64:	4929      	ldr	r1, [pc, #164]	; (8003f0c <HAL_RCC_ClockConfig+0x260>)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003e6c:	f7fd fa5e 	bl	800132c <HAL_GetTick>
 8003e70:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e72:	e00a      	b.n	8003e8a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e74:	f7fd fa5a 	bl	800132c <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e03b      	b.n	8003f02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8a:	4b20      	ldr	r3, [pc, #128]	; (8003f0c <HAL_RCC_ClockConfig+0x260>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d1ed      	bne.n	8003e74 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d008      	beq.n	8003eb6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ea4:	4b1a      	ldr	r3, [pc, #104]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	4917      	ldr	r1, [pc, #92]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0308 	and.w	r3, r3, #8
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d009      	beq.n	8003ed6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ec2:	4b13      	ldr	r3, [pc, #76]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	490f      	ldr	r1, [pc, #60]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ed6:	f000 f825 	bl	8003f24 <HAL_RCC_GetSysClockFreq>
 8003eda:	4601      	mov	r1, r0
 8003edc:	4b0c      	ldr	r3, [pc, #48]	; (8003f10 <HAL_RCC_ClockConfig+0x264>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	091b      	lsrs	r3, r3, #4
 8003ee2:	f003 030f 	and.w	r3, r3, #15
 8003ee6:	4a0c      	ldr	r2, [pc, #48]	; (8003f18 <HAL_RCC_ClockConfig+0x26c>)
 8003ee8:	5cd3      	ldrb	r3, [r2, r3]
 8003eea:	f003 031f 	and.w	r3, r3, #31
 8003eee:	fa21 f303 	lsr.w	r3, r1, r3
 8003ef2:	4a0a      	ldr	r2, [pc, #40]	; (8003f1c <HAL_RCC_ClockConfig+0x270>)
 8003ef4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003ef6:	4b0a      	ldr	r3, [pc, #40]	; (8003f20 <HAL_RCC_ClockConfig+0x274>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fd f9ca 	bl	8001294 <HAL_InitTick>
 8003f00:	4603      	mov	r3, r0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40022000 	.word	0x40022000
 8003f10:	40021000 	.word	0x40021000
 8003f14:	04c4b400 	.word	0x04c4b400
 8003f18:	08007f40 	.word	0x08007f40
 8003f1c:	20000024 	.word	0x20000024
 8003f20:	20000028 	.word	0x20000028

08003f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003f2a:	4b2c      	ldr	r3, [pc, #176]	; (8003fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 030c 	and.w	r3, r3, #12
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d102      	bne.n	8003f3c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f36:	4b2a      	ldr	r3, [pc, #168]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f38:	613b      	str	r3, [r7, #16]
 8003f3a:	e047      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003f3c:	4b27      	ldr	r3, [pc, #156]	; (8003fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 030c 	and.w	r3, r3, #12
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d102      	bne.n	8003f4e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f48:	4b26      	ldr	r3, [pc, #152]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f4a:	613b      	str	r3, [r7, #16]
 8003f4c:	e03e      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003f4e:	4b23      	ldr	r3, [pc, #140]	; (8003fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 030c 	and.w	r3, r3, #12
 8003f56:	2b0c      	cmp	r3, #12
 8003f58:	d136      	bne.n	8003fc8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f5a:	4b20      	ldr	r3, [pc, #128]	; (8003fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f003 0303 	and.w	r3, r3, #3
 8003f62:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f64:	4b1d      	ldr	r3, [pc, #116]	; (8003fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	091b      	lsrs	r3, r3, #4
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	3301      	adds	r3, #1
 8003f70:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2b03      	cmp	r3, #3
 8003f76:	d10c      	bne.n	8003f92 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f78:	4a1a      	ldr	r2, [pc, #104]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f80:	4a16      	ldr	r2, [pc, #88]	; (8003fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f82:	68d2      	ldr	r2, [r2, #12]
 8003f84:	0a12      	lsrs	r2, r2, #8
 8003f86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f8a:	fb02 f303 	mul.w	r3, r2, r3
 8003f8e:	617b      	str	r3, [r7, #20]
      break;
 8003f90:	e00c      	b.n	8003fac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f92:	4a13      	ldr	r2, [pc, #76]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f9a:	4a10      	ldr	r2, [pc, #64]	; (8003fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f9c:	68d2      	ldr	r2, [r2, #12]
 8003f9e:	0a12      	lsrs	r2, r2, #8
 8003fa0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003fa4:	fb02 f303 	mul.w	r3, r2, r3
 8003fa8:	617b      	str	r3, [r7, #20]
      break;
 8003faa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fac:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	0e5b      	lsrs	r3, r3, #25
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc4:	613b      	str	r3, [r7, #16]
 8003fc6:	e001      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003fcc:	693b      	ldr	r3, [r7, #16]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	371c      	adds	r7, #28
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	00f42400 	.word	0x00f42400
 8003fe4:	007a1200 	.word	0x007a1200

08003fe8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fec:	4b03      	ldr	r3, [pc, #12]	; (8003ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8003fee:	681b      	ldr	r3, [r3, #0]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	20000024 	.word	0x20000024

08004000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004004:	f7ff fff0 	bl	8003fe8 <HAL_RCC_GetHCLKFreq>
 8004008:	4601      	mov	r1, r0
 800400a:	4b06      	ldr	r3, [pc, #24]	; (8004024 <HAL_RCC_GetPCLK1Freq+0x24>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	0a1b      	lsrs	r3, r3, #8
 8004010:	f003 0307 	and.w	r3, r3, #7
 8004014:	4a04      	ldr	r2, [pc, #16]	; (8004028 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004016:	5cd3      	ldrb	r3, [r2, r3]
 8004018:	f003 031f 	and.w	r3, r3, #31
 800401c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004020:	4618      	mov	r0, r3
 8004022:	bd80      	pop	{r7, pc}
 8004024:	40021000 	.word	0x40021000
 8004028:	08007f50 	.word	0x08007f50

0800402c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004030:	f7ff ffda 	bl	8003fe8 <HAL_RCC_GetHCLKFreq>
 8004034:	4601      	mov	r1, r0
 8004036:	4b06      	ldr	r3, [pc, #24]	; (8004050 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	0adb      	lsrs	r3, r3, #11
 800403c:	f003 0307 	and.w	r3, r3, #7
 8004040:	4a04      	ldr	r2, [pc, #16]	; (8004054 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004042:	5cd3      	ldrb	r3, [r2, r3]
 8004044:	f003 031f 	and.w	r3, r3, #31
 8004048:	fa21 f303 	lsr.w	r3, r1, r3
}
 800404c:	4618      	mov	r0, r3
 800404e:	bd80      	pop	{r7, pc}
 8004050:	40021000 	.word	0x40021000
 8004054:	08007f50 	.word	0x08007f50

08004058 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800405e:	4b1e      	ldr	r3, [pc, #120]	; (80040d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	f003 0303 	and.w	r3, r3, #3
 8004066:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004068:	4b1b      	ldr	r3, [pc, #108]	; (80040d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	091b      	lsrs	r3, r3, #4
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	3301      	adds	r3, #1
 8004074:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	2b03      	cmp	r3, #3
 800407a:	d10c      	bne.n	8004096 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800407c:	4a17      	ldr	r2, [pc, #92]	; (80040dc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	fbb2 f3f3 	udiv	r3, r2, r3
 8004084:	4a14      	ldr	r2, [pc, #80]	; (80040d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004086:	68d2      	ldr	r2, [r2, #12]
 8004088:	0a12      	lsrs	r2, r2, #8
 800408a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800408e:	fb02 f303 	mul.w	r3, r2, r3
 8004092:	617b      	str	r3, [r7, #20]
    break;
 8004094:	e00c      	b.n	80040b0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004096:	4a12      	ldr	r2, [pc, #72]	; (80040e0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	fbb2 f3f3 	udiv	r3, r2, r3
 800409e:	4a0e      	ldr	r2, [pc, #56]	; (80040d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040a0:	68d2      	ldr	r2, [r2, #12]
 80040a2:	0a12      	lsrs	r2, r2, #8
 80040a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040a8:	fb02 f303 	mul.w	r3, r2, r3
 80040ac:	617b      	str	r3, [r7, #20]
    break;
 80040ae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040b0:	4b09      	ldr	r3, [pc, #36]	; (80040d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	0e5b      	lsrs	r3, r3, #25
 80040b6:	f003 0303 	and.w	r3, r3, #3
 80040ba:	3301      	adds	r3, #1
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80040ca:	687b      	ldr	r3, [r7, #4]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	371c      	adds	r7, #28
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
 80040d8:	40021000 	.word	0x40021000
 80040dc:	007a1200 	.word	0x007a1200
 80040e0:	00f42400 	.word	0x00f42400

080040e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040ec:	2300      	movs	r3, #0
 80040ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040f0:	2300      	movs	r3, #0
 80040f2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 8098 	beq.w	8004232 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004102:	2300      	movs	r3, #0
 8004104:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004106:	4b43      	ldr	r3, [pc, #268]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10d      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004112:	4b40      	ldr	r3, [pc, #256]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004116:	4a3f      	ldr	r2, [pc, #252]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800411c:	6593      	str	r3, [r2, #88]	; 0x58
 800411e:	4b3d      	ldr	r3, [pc, #244]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004126:	60bb      	str	r3, [r7, #8]
 8004128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800412a:	2301      	movs	r3, #1
 800412c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800412e:	4b3a      	ldr	r3, [pc, #232]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a39      	ldr	r2, [pc, #228]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004138:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800413a:	f7fd f8f7 	bl	800132c <HAL_GetTick>
 800413e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004140:	e009      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004142:	f7fd f8f3 	bl	800132c <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d902      	bls.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	74fb      	strb	r3, [r7, #19]
        break;
 8004154:	e005      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004156:	4b30      	ldr	r3, [pc, #192]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0ef      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004162:	7cfb      	ldrb	r3, [r7, #19]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d159      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004168:	4b2a      	ldr	r3, [pc, #168]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800416a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004172:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d01e      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	429a      	cmp	r2, r3
 8004182:	d019      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004184:	4b23      	ldr	r3, [pc, #140]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800418e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004190:	4b20      	ldr	r3, [pc, #128]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004196:	4a1f      	ldr	r2, [pc, #124]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800419c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041a0:	4b1c      	ldr	r3, [pc, #112]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a6:	4a1b      	ldr	r2, [pc, #108]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80041b0:	4a18      	ldr	r2, [pc, #96]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d016      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c2:	f7fd f8b3 	bl	800132c <HAL_GetTick>
 80041c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041c8:	e00b      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ca:	f7fd f8af 	bl	800132c <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d8:	4293      	cmp	r3, r2
 80041da:	d902      	bls.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	74fb      	strb	r3, [r7, #19]
            break;
 80041e0:	e006      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041e2:	4b0c      	ldr	r3, [pc, #48]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d0ec      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80041f0:	7cfb      	ldrb	r3, [r7, #19]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10b      	bne.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041f6:	4b07      	ldr	r3, [pc, #28]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004204:	4903      	ldr	r1, [pc, #12]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004206:	4313      	orrs	r3, r2
 8004208:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800420c:	e008      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800420e:	7cfb      	ldrb	r3, [r7, #19]
 8004210:	74bb      	strb	r3, [r7, #18]
 8004212:	e005      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004214:	40021000 	.word	0x40021000
 8004218:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800421c:	7cfb      	ldrb	r3, [r7, #19]
 800421e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004220:	7c7b      	ldrb	r3, [r7, #17]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d105      	bne.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004226:	4ba6      	ldr	r3, [pc, #664]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800422a:	4aa5      	ldr	r2, [pc, #660]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800422c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004230:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00a      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800423e:	4ba0      	ldr	r3, [pc, #640]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004244:	f023 0203 	bic.w	r2, r3, #3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	499c      	ldr	r1, [pc, #624]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800424e:	4313      	orrs	r3, r2
 8004250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00a      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004260:	4b97      	ldr	r3, [pc, #604]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004266:	f023 020c 	bic.w	r2, r3, #12
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	4994      	ldr	r1, [pc, #592]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004270:	4313      	orrs	r3, r2
 8004272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0304 	and.w	r3, r3, #4
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00a      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004282:	4b8f      	ldr	r3, [pc, #572]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004288:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	498b      	ldr	r1, [pc, #556]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004292:	4313      	orrs	r3, r2
 8004294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0308 	and.w	r3, r3, #8
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00a      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042a4:	4b86      	ldr	r3, [pc, #536]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	4983      	ldr	r1, [pc, #524]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0320 	and.w	r3, r3, #32
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00a      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042c6:	4b7e      	ldr	r3, [pc, #504]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	497a      	ldr	r1, [pc, #488]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00a      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042e8:	4b75      	ldr	r3, [pc, #468]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	4972      	ldr	r1, [pc, #456]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00a      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800430a:	4b6d      	ldr	r3, [pc, #436]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800430c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004310:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	69db      	ldr	r3, [r3, #28]
 8004318:	4969      	ldr	r1, [pc, #420]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800431a:	4313      	orrs	r3, r2
 800431c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00a      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800432c:	4b64      	ldr	r3, [pc, #400]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800432e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004332:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	4961      	ldr	r1, [pc, #388]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800433c:	4313      	orrs	r3, r2
 800433e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00a      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800434e:	4b5c      	ldr	r3, [pc, #368]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004354:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	4958      	ldr	r1, [pc, #352]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800435e:	4313      	orrs	r3, r2
 8004360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800436c:	2b00      	cmp	r3, #0
 800436e:	d015      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004370:	4b53      	ldr	r3, [pc, #332]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004376:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437e:	4950      	ldr	r1, [pc, #320]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004380:	4313      	orrs	r3, r2
 8004382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800438e:	d105      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004390:	4b4b      	ldr	r3, [pc, #300]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	4a4a      	ldr	r2, [pc, #296]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004396:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800439a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d015      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80043a8:	4b45      	ldr	r3, [pc, #276]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b6:	4942      	ldr	r1, [pc, #264]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043c6:	d105      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043c8:	4b3d      	ldr	r3, [pc, #244]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	4a3c      	ldr	r2, [pc, #240]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043d2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d015      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80043e0:	4b37      	ldr	r3, [pc, #220]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ee:	4934      	ldr	r1, [pc, #208]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043fe:	d105      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004400:	4b2f      	ldr	r3, [pc, #188]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	4a2e      	ldr	r2, [pc, #184]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004406:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800440a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d015      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004418:	4b29      	ldr	r3, [pc, #164]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800441a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800441e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004426:	4926      	ldr	r1, [pc, #152]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004428:	4313      	orrs	r3, r2
 800442a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004432:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004436:	d105      	bne.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004438:	4b21      	ldr	r3, [pc, #132]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	4a20      	ldr	r2, [pc, #128]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800443e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004442:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d015      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004450:	4b1b      	ldr	r3, [pc, #108]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004456:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445e:	4918      	ldr	r1, [pc, #96]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004460:	4313      	orrs	r3, r2
 8004462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800446e:	d105      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004470:	4b13      	ldr	r3, [pc, #76]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	4a12      	ldr	r2, [pc, #72]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004476:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800447a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d015      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004488:	4b0d      	ldr	r3, [pc, #52]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800448a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004496:	490a      	ldr	r1, [pc, #40]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004498:	4313      	orrs	r3, r2
 800449a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044a6:	d105      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80044a8:	4b05      	ldr	r3, [pc, #20]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	4a04      	ldr	r2, [pc, #16]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044b2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80044b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3718      	adds	r7, #24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	40021000 	.word	0x40021000

080044c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e049      	b.n	800456a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d106      	bne.n	80044f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7fc fdde 	bl	80010ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2202      	movs	r2, #2
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	3304      	adds	r3, #4
 8004500:	4619      	mov	r1, r3
 8004502:	4610      	mov	r0, r2
 8004504:	f000 f898 	bl	8004638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
	...

08004574 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b01      	cmp	r3, #1
 8004586:	d001      	beq.n	800458c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e042      	b.n	8004612 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2202      	movs	r2, #2
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a21      	ldr	r2, [pc, #132]	; (8004620 <HAL_TIM_Base_Start+0xac>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d018      	beq.n	80045d0 <HAL_TIM_Base_Start+0x5c>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a6:	d013      	beq.n	80045d0 <HAL_TIM_Base_Start+0x5c>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a1d      	ldr	r2, [pc, #116]	; (8004624 <HAL_TIM_Base_Start+0xb0>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d00e      	beq.n	80045d0 <HAL_TIM_Base_Start+0x5c>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a1c      	ldr	r2, [pc, #112]	; (8004628 <HAL_TIM_Base_Start+0xb4>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d009      	beq.n	80045d0 <HAL_TIM_Base_Start+0x5c>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a1a      	ldr	r2, [pc, #104]	; (800462c <HAL_TIM_Base_Start+0xb8>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d004      	beq.n	80045d0 <HAL_TIM_Base_Start+0x5c>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a19      	ldr	r2, [pc, #100]	; (8004630 <HAL_TIM_Base_Start+0xbc>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d115      	bne.n	80045fc <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689a      	ldr	r2, [r3, #8]
 80045d6:	4b17      	ldr	r3, [pc, #92]	; (8004634 <HAL_TIM_Base_Start+0xc0>)
 80045d8:	4013      	ands	r3, r2
 80045da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2b06      	cmp	r3, #6
 80045e0:	d015      	beq.n	800460e <HAL_TIM_Base_Start+0x9a>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045e8:	d011      	beq.n	800460e <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f042 0201 	orr.w	r2, r2, #1
 80045f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045fa:	e008      	b.n	800460e <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0201 	orr.w	r2, r2, #1
 800460a:	601a      	str	r2, [r3, #0]
 800460c:	e000      	b.n	8004610 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800460e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3714      	adds	r7, #20
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	40012c00 	.word	0x40012c00
 8004624:	40000400 	.word	0x40000400
 8004628:	40000800 	.word	0x40000800
 800462c:	40013400 	.word	0x40013400
 8004630:	40014000 	.word	0x40014000
 8004634:	00010007 	.word	0x00010007

08004638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a3c      	ldr	r2, [pc, #240]	; (800473c <TIM_Base_SetConfig+0x104>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d00f      	beq.n	8004670 <TIM_Base_SetConfig+0x38>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004656:	d00b      	beq.n	8004670 <TIM_Base_SetConfig+0x38>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a39      	ldr	r2, [pc, #228]	; (8004740 <TIM_Base_SetConfig+0x108>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d007      	beq.n	8004670 <TIM_Base_SetConfig+0x38>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a38      	ldr	r2, [pc, #224]	; (8004744 <TIM_Base_SetConfig+0x10c>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d003      	beq.n	8004670 <TIM_Base_SetConfig+0x38>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a37      	ldr	r2, [pc, #220]	; (8004748 <TIM_Base_SetConfig+0x110>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d108      	bne.n	8004682 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004676:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	4313      	orrs	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a2d      	ldr	r2, [pc, #180]	; (800473c <TIM_Base_SetConfig+0x104>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d01b      	beq.n	80046c2 <TIM_Base_SetConfig+0x8a>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004690:	d017      	beq.n	80046c2 <TIM_Base_SetConfig+0x8a>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a2a      	ldr	r2, [pc, #168]	; (8004740 <TIM_Base_SetConfig+0x108>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d013      	beq.n	80046c2 <TIM_Base_SetConfig+0x8a>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a29      	ldr	r2, [pc, #164]	; (8004744 <TIM_Base_SetConfig+0x10c>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d00f      	beq.n	80046c2 <TIM_Base_SetConfig+0x8a>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a28      	ldr	r2, [pc, #160]	; (8004748 <TIM_Base_SetConfig+0x110>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d00b      	beq.n	80046c2 <TIM_Base_SetConfig+0x8a>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a27      	ldr	r2, [pc, #156]	; (800474c <TIM_Base_SetConfig+0x114>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d007      	beq.n	80046c2 <TIM_Base_SetConfig+0x8a>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a26      	ldr	r2, [pc, #152]	; (8004750 <TIM_Base_SetConfig+0x118>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d003      	beq.n	80046c2 <TIM_Base_SetConfig+0x8a>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a25      	ldr	r2, [pc, #148]	; (8004754 <TIM_Base_SetConfig+0x11c>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d108      	bne.n	80046d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	4313      	orrs	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a10      	ldr	r2, [pc, #64]	; (800473c <TIM_Base_SetConfig+0x104>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d00f      	beq.n	8004720 <TIM_Base_SetConfig+0xe8>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a11      	ldr	r2, [pc, #68]	; (8004748 <TIM_Base_SetConfig+0x110>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d00b      	beq.n	8004720 <TIM_Base_SetConfig+0xe8>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a10      	ldr	r2, [pc, #64]	; (800474c <TIM_Base_SetConfig+0x114>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d007      	beq.n	8004720 <TIM_Base_SetConfig+0xe8>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a0f      	ldr	r2, [pc, #60]	; (8004750 <TIM_Base_SetConfig+0x118>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d003      	beq.n	8004720 <TIM_Base_SetConfig+0xe8>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a0e      	ldr	r2, [pc, #56]	; (8004754 <TIM_Base_SetConfig+0x11c>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d103      	bne.n	8004728 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	691a      	ldr	r2, [r3, #16]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	615a      	str	r2, [r3, #20]
}
 800472e:	bf00      	nop
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	40012c00 	.word	0x40012c00
 8004740:	40000400 	.word	0x40000400
 8004744:	40000800 	.word	0x40000800
 8004748:	40013400 	.word	0x40013400
 800474c:	40014000 	.word	0x40014000
 8004750:	40014400 	.word	0x40014400
 8004754:	40014800 	.word	0x40014800

08004758 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004768:	2b01      	cmp	r3, #1
 800476a:	d101      	bne.n	8004770 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800476c:	2302      	movs	r3, #2
 800476e:	e065      	b.n	800483c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a2c      	ldr	r2, [pc, #176]	; (8004848 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d004      	beq.n	80047a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a2b      	ldr	r2, [pc, #172]	; (800484c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d108      	bne.n	80047b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80047aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80047bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a1b      	ldr	r2, [pc, #108]	; (8004848 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d018      	beq.n	8004810 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e6:	d013      	beq.n	8004810 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a18      	ldr	r2, [pc, #96]	; (8004850 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00e      	beq.n	8004810 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a17      	ldr	r2, [pc, #92]	; (8004854 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d009      	beq.n	8004810 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a12      	ldr	r2, [pc, #72]	; (800484c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d004      	beq.n	8004810 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a13      	ldr	r2, [pc, #76]	; (8004858 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d10c      	bne.n	800482a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004816:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	4313      	orrs	r3, r2
 8004820:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	40012c00 	.word	0x40012c00
 800484c:	40013400 	.word	0x40013400
 8004850:	40000400 	.word	0x40000400
 8004854:	40000800 	.word	0x40000800
 8004858:	40014000 	.word	0x40014000

0800485c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e042      	b.n	80048f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004874:	2b00      	cmp	r3, #0
 8004876:	d106      	bne.n	8004886 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f7fc fc33 	bl	80010ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2224      	movs	r2, #36	; 0x24
 800488a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 0201 	bic.w	r2, r2, #1
 800489c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f82c 	bl	80048fc <UART_SetConfig>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d101      	bne.n	80048ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e022      	b.n	80048f4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d002      	beq.n	80048bc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 fac8 	bl	8004e4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685a      	ldr	r2, [r3, #4]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689a      	ldr	r2, [r3, #8]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0201 	orr.w	r2, r2, #1
 80048ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 fb4f 	bl	8004f90 <UART_CheckIdleState>
 80048f2:	4603      	mov	r3, r0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3708      	adds	r7, #8
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048fc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004900:	b088      	sub	sp, #32
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004906:	2300      	movs	r3, #0
 8004908:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	689a      	ldr	r2, [r3, #8]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	431a      	orrs	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	4313      	orrs	r3, r2
 8004920:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004926:	69fa      	ldr	r2, [r7, #28]
 8004928:	4313      	orrs	r3, r2
 800492a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	4bb0      	ldr	r3, [pc, #704]	; (8004bf4 <UART_SetConfig+0x2f8>)
 8004934:	4013      	ands	r3, r2
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6812      	ldr	r2, [r2, #0]
 800493a:	69f9      	ldr	r1, [r7, #28]
 800493c:	430b      	orrs	r3, r1
 800493e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4aa5      	ldr	r2, [pc, #660]	; (8004bf8 <UART_SetConfig+0x2fc>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d004      	beq.n	8004970 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	69fa      	ldr	r2, [r7, #28]
 800496c:	4313      	orrs	r3, r2
 800496e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800497a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	6812      	ldr	r2, [r2, #0]
 8004982:	69f9      	ldr	r1, [r7, #28]
 8004984:	430b      	orrs	r3, r1
 8004986:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498e:	f023 010f 	bic.w	r1, r3, #15
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a96      	ldr	r2, [pc, #600]	; (8004bfc <UART_SetConfig+0x300>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d121      	bne.n	80049ec <UART_SetConfig+0xf0>
 80049a8:	4b95      	ldr	r3, [pc, #596]	; (8004c00 <UART_SetConfig+0x304>)
 80049aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ae:	f003 0303 	and.w	r3, r3, #3
 80049b2:	2b03      	cmp	r3, #3
 80049b4:	d816      	bhi.n	80049e4 <UART_SetConfig+0xe8>
 80049b6:	a201      	add	r2, pc, #4	; (adr r2, 80049bc <UART_SetConfig+0xc0>)
 80049b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049bc:	080049cd 	.word	0x080049cd
 80049c0:	080049d9 	.word	0x080049d9
 80049c4:	080049d3 	.word	0x080049d3
 80049c8:	080049df 	.word	0x080049df
 80049cc:	2301      	movs	r3, #1
 80049ce:	76fb      	strb	r3, [r7, #27]
 80049d0:	e0be      	b.n	8004b50 <UART_SetConfig+0x254>
 80049d2:	2302      	movs	r3, #2
 80049d4:	76fb      	strb	r3, [r7, #27]
 80049d6:	e0bb      	b.n	8004b50 <UART_SetConfig+0x254>
 80049d8:	2304      	movs	r3, #4
 80049da:	76fb      	strb	r3, [r7, #27]
 80049dc:	e0b8      	b.n	8004b50 <UART_SetConfig+0x254>
 80049de:	2308      	movs	r3, #8
 80049e0:	76fb      	strb	r3, [r7, #27]
 80049e2:	e0b5      	b.n	8004b50 <UART_SetConfig+0x254>
 80049e4:	2310      	movs	r3, #16
 80049e6:	76fb      	strb	r3, [r7, #27]
 80049e8:	bf00      	nop
 80049ea:	e0b1      	b.n	8004b50 <UART_SetConfig+0x254>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a84      	ldr	r2, [pc, #528]	; (8004c04 <UART_SetConfig+0x308>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d134      	bne.n	8004a60 <UART_SetConfig+0x164>
 80049f6:	4b82      	ldr	r3, [pc, #520]	; (8004c00 <UART_SetConfig+0x304>)
 80049f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049fc:	f003 030c 	and.w	r3, r3, #12
 8004a00:	2b0c      	cmp	r3, #12
 8004a02:	d829      	bhi.n	8004a58 <UART_SetConfig+0x15c>
 8004a04:	a201      	add	r2, pc, #4	; (adr r2, 8004a0c <UART_SetConfig+0x110>)
 8004a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0a:	bf00      	nop
 8004a0c:	08004a41 	.word	0x08004a41
 8004a10:	08004a59 	.word	0x08004a59
 8004a14:	08004a59 	.word	0x08004a59
 8004a18:	08004a59 	.word	0x08004a59
 8004a1c:	08004a4d 	.word	0x08004a4d
 8004a20:	08004a59 	.word	0x08004a59
 8004a24:	08004a59 	.word	0x08004a59
 8004a28:	08004a59 	.word	0x08004a59
 8004a2c:	08004a47 	.word	0x08004a47
 8004a30:	08004a59 	.word	0x08004a59
 8004a34:	08004a59 	.word	0x08004a59
 8004a38:	08004a59 	.word	0x08004a59
 8004a3c:	08004a53 	.word	0x08004a53
 8004a40:	2300      	movs	r3, #0
 8004a42:	76fb      	strb	r3, [r7, #27]
 8004a44:	e084      	b.n	8004b50 <UART_SetConfig+0x254>
 8004a46:	2302      	movs	r3, #2
 8004a48:	76fb      	strb	r3, [r7, #27]
 8004a4a:	e081      	b.n	8004b50 <UART_SetConfig+0x254>
 8004a4c:	2304      	movs	r3, #4
 8004a4e:	76fb      	strb	r3, [r7, #27]
 8004a50:	e07e      	b.n	8004b50 <UART_SetConfig+0x254>
 8004a52:	2308      	movs	r3, #8
 8004a54:	76fb      	strb	r3, [r7, #27]
 8004a56:	e07b      	b.n	8004b50 <UART_SetConfig+0x254>
 8004a58:	2310      	movs	r3, #16
 8004a5a:	76fb      	strb	r3, [r7, #27]
 8004a5c:	bf00      	nop
 8004a5e:	e077      	b.n	8004b50 <UART_SetConfig+0x254>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a68      	ldr	r2, [pc, #416]	; (8004c08 <UART_SetConfig+0x30c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d120      	bne.n	8004aac <UART_SetConfig+0x1b0>
 8004a6a:	4b65      	ldr	r3, [pc, #404]	; (8004c00 <UART_SetConfig+0x304>)
 8004a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a70:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a74:	2b10      	cmp	r3, #16
 8004a76:	d00f      	beq.n	8004a98 <UART_SetConfig+0x19c>
 8004a78:	2b10      	cmp	r3, #16
 8004a7a:	d802      	bhi.n	8004a82 <UART_SetConfig+0x186>
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d005      	beq.n	8004a8c <UART_SetConfig+0x190>
 8004a80:	e010      	b.n	8004aa4 <UART_SetConfig+0x1a8>
 8004a82:	2b20      	cmp	r3, #32
 8004a84:	d005      	beq.n	8004a92 <UART_SetConfig+0x196>
 8004a86:	2b30      	cmp	r3, #48	; 0x30
 8004a88:	d009      	beq.n	8004a9e <UART_SetConfig+0x1a2>
 8004a8a:	e00b      	b.n	8004aa4 <UART_SetConfig+0x1a8>
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	76fb      	strb	r3, [r7, #27]
 8004a90:	e05e      	b.n	8004b50 <UART_SetConfig+0x254>
 8004a92:	2302      	movs	r3, #2
 8004a94:	76fb      	strb	r3, [r7, #27]
 8004a96:	e05b      	b.n	8004b50 <UART_SetConfig+0x254>
 8004a98:	2304      	movs	r3, #4
 8004a9a:	76fb      	strb	r3, [r7, #27]
 8004a9c:	e058      	b.n	8004b50 <UART_SetConfig+0x254>
 8004a9e:	2308      	movs	r3, #8
 8004aa0:	76fb      	strb	r3, [r7, #27]
 8004aa2:	e055      	b.n	8004b50 <UART_SetConfig+0x254>
 8004aa4:	2310      	movs	r3, #16
 8004aa6:	76fb      	strb	r3, [r7, #27]
 8004aa8:	bf00      	nop
 8004aaa:	e051      	b.n	8004b50 <UART_SetConfig+0x254>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a56      	ldr	r2, [pc, #344]	; (8004c0c <UART_SetConfig+0x310>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d120      	bne.n	8004af8 <UART_SetConfig+0x1fc>
 8004ab6:	4b52      	ldr	r3, [pc, #328]	; (8004c00 <UART_SetConfig+0x304>)
 8004ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004abc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ac0:	2b40      	cmp	r3, #64	; 0x40
 8004ac2:	d00f      	beq.n	8004ae4 <UART_SetConfig+0x1e8>
 8004ac4:	2b40      	cmp	r3, #64	; 0x40
 8004ac6:	d802      	bhi.n	8004ace <UART_SetConfig+0x1d2>
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d005      	beq.n	8004ad8 <UART_SetConfig+0x1dc>
 8004acc:	e010      	b.n	8004af0 <UART_SetConfig+0x1f4>
 8004ace:	2b80      	cmp	r3, #128	; 0x80
 8004ad0:	d005      	beq.n	8004ade <UART_SetConfig+0x1e2>
 8004ad2:	2bc0      	cmp	r3, #192	; 0xc0
 8004ad4:	d009      	beq.n	8004aea <UART_SetConfig+0x1ee>
 8004ad6:	e00b      	b.n	8004af0 <UART_SetConfig+0x1f4>
 8004ad8:	2300      	movs	r3, #0
 8004ada:	76fb      	strb	r3, [r7, #27]
 8004adc:	e038      	b.n	8004b50 <UART_SetConfig+0x254>
 8004ade:	2302      	movs	r3, #2
 8004ae0:	76fb      	strb	r3, [r7, #27]
 8004ae2:	e035      	b.n	8004b50 <UART_SetConfig+0x254>
 8004ae4:	2304      	movs	r3, #4
 8004ae6:	76fb      	strb	r3, [r7, #27]
 8004ae8:	e032      	b.n	8004b50 <UART_SetConfig+0x254>
 8004aea:	2308      	movs	r3, #8
 8004aec:	76fb      	strb	r3, [r7, #27]
 8004aee:	e02f      	b.n	8004b50 <UART_SetConfig+0x254>
 8004af0:	2310      	movs	r3, #16
 8004af2:	76fb      	strb	r3, [r7, #27]
 8004af4:	bf00      	nop
 8004af6:	e02b      	b.n	8004b50 <UART_SetConfig+0x254>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a3e      	ldr	r2, [pc, #248]	; (8004bf8 <UART_SetConfig+0x2fc>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d124      	bne.n	8004b4c <UART_SetConfig+0x250>
 8004b02:	4b3f      	ldr	r3, [pc, #252]	; (8004c00 <UART_SetConfig+0x304>)
 8004b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b10:	d012      	beq.n	8004b38 <UART_SetConfig+0x23c>
 8004b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b16:	d802      	bhi.n	8004b1e <UART_SetConfig+0x222>
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d007      	beq.n	8004b2c <UART_SetConfig+0x230>
 8004b1c:	e012      	b.n	8004b44 <UART_SetConfig+0x248>
 8004b1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b22:	d006      	beq.n	8004b32 <UART_SetConfig+0x236>
 8004b24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b28:	d009      	beq.n	8004b3e <UART_SetConfig+0x242>
 8004b2a:	e00b      	b.n	8004b44 <UART_SetConfig+0x248>
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	76fb      	strb	r3, [r7, #27]
 8004b30:	e00e      	b.n	8004b50 <UART_SetConfig+0x254>
 8004b32:	2302      	movs	r3, #2
 8004b34:	76fb      	strb	r3, [r7, #27]
 8004b36:	e00b      	b.n	8004b50 <UART_SetConfig+0x254>
 8004b38:	2304      	movs	r3, #4
 8004b3a:	76fb      	strb	r3, [r7, #27]
 8004b3c:	e008      	b.n	8004b50 <UART_SetConfig+0x254>
 8004b3e:	2308      	movs	r3, #8
 8004b40:	76fb      	strb	r3, [r7, #27]
 8004b42:	e005      	b.n	8004b50 <UART_SetConfig+0x254>
 8004b44:	2310      	movs	r3, #16
 8004b46:	76fb      	strb	r3, [r7, #27]
 8004b48:	bf00      	nop
 8004b4a:	e001      	b.n	8004b50 <UART_SetConfig+0x254>
 8004b4c:	2310      	movs	r3, #16
 8004b4e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a28      	ldr	r2, [pc, #160]	; (8004bf8 <UART_SetConfig+0x2fc>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	f040 80a1 	bne.w	8004c9e <UART_SetConfig+0x3a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b5c:	7efb      	ldrb	r3, [r7, #27]
 8004b5e:	2b08      	cmp	r3, #8
 8004b60:	d823      	bhi.n	8004baa <UART_SetConfig+0x2ae>
 8004b62:	a201      	add	r2, pc, #4	; (adr r2, 8004b68 <UART_SetConfig+0x26c>)
 8004b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b68:	08004b8d 	.word	0x08004b8d
 8004b6c:	08004bab 	.word	0x08004bab
 8004b70:	08004b95 	.word	0x08004b95
 8004b74:	08004bab 	.word	0x08004bab
 8004b78:	08004b9b 	.word	0x08004b9b
 8004b7c:	08004bab 	.word	0x08004bab
 8004b80:	08004bab 	.word	0x08004bab
 8004b84:	08004bab 	.word	0x08004bab
 8004b88:	08004ba3 	.word	0x08004ba3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b8c:	f7ff fa38 	bl	8004000 <HAL_RCC_GetPCLK1Freq>
 8004b90:	6178      	str	r0, [r7, #20]
        break;
 8004b92:	e00f      	b.n	8004bb4 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b94:	4b1e      	ldr	r3, [pc, #120]	; (8004c10 <UART_SetConfig+0x314>)
 8004b96:	617b      	str	r3, [r7, #20]
        break;
 8004b98:	e00c      	b.n	8004bb4 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b9a:	f7ff f9c3 	bl	8003f24 <HAL_RCC_GetSysClockFreq>
 8004b9e:	6178      	str	r0, [r7, #20]
        break;
 8004ba0:	e008      	b.n	8004bb4 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ba2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ba6:	617b      	str	r3, [r7, #20]
        break;
 8004ba8:	e004      	b.n	8004bb4 <UART_SetConfig+0x2b8>
      default:
        pclk = 0U;
 8004baa:	2300      	movs	r3, #0
 8004bac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	76bb      	strb	r3, [r7, #26]
        break;
 8004bb2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 8130 	beq.w	8004e1c <UART_SetConfig+0x520>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	4a14      	ldr	r2, [pc, #80]	; (8004c14 <UART_SetConfig+0x318>)
 8004bc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bce:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685a      	ldr	r2, [r3, #4]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	4413      	add	r3, r2
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d305      	bcc.n	8004bec <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d915      	bls.n	8004c18 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	76bb      	strb	r3, [r7, #26]
 8004bf0:	e114      	b.n	8004e1c <UART_SetConfig+0x520>
 8004bf2:	bf00      	nop
 8004bf4:	cfff69f3 	.word	0xcfff69f3
 8004bf8:	40008000 	.word	0x40008000
 8004bfc:	40013800 	.word	0x40013800
 8004c00:	40021000 	.word	0x40021000
 8004c04:	40004400 	.word	0x40004400
 8004c08:	40004800 	.word	0x40004800
 8004c0c:	40004c00 	.word	0x40004c00
 8004c10:	00f42400 	.word	0x00f42400
 8004c14:	08007f58 	.word	0x08007f58
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f04f 0100 	mov.w	r1, #0
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c24:	4a87      	ldr	r2, [pc, #540]	; (8004e44 <UART_SetConfig+0x548>)
 8004c26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	f04f 0400 	mov.w	r4, #0
 8004c30:	461a      	mov	r2, r3
 8004c32:	4623      	mov	r3, r4
 8004c34:	f7fb faf4 	bl	8000220 <__aeabi_uldivmod>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	460c      	mov	r4, r1
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	4622      	mov	r2, r4
 8004c40:	f04f 0300 	mov.w	r3, #0
 8004c44:	f04f 0400 	mov.w	r4, #0
 8004c48:	0214      	lsls	r4, r2, #8
 8004c4a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004c4e:	020b      	lsls	r3, r1, #8
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	6852      	ldr	r2, [r2, #4]
 8004c54:	0852      	lsrs	r2, r2, #1
 8004c56:	4611      	mov	r1, r2
 8004c58:	f04f 0200 	mov.w	r2, #0
 8004c5c:	eb13 0b01 	adds.w	fp, r3, r1
 8004c60:	eb44 0c02 	adc.w	ip, r4, r2
 8004c64:	4658      	mov	r0, fp
 8004c66:	4661      	mov	r1, ip
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f04f 0400 	mov.w	r4, #0
 8004c70:	461a      	mov	r2, r3
 8004c72:	4623      	mov	r3, r4
 8004c74:	f7fb fad4 	bl	8000220 <__aeabi_uldivmod>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	460c      	mov	r4, r1
 8004c7c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c84:	d308      	bcc.n	8004c98 <UART_SetConfig+0x39c>
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c8c:	d204      	bcs.n	8004c98 <UART_SetConfig+0x39c>
        {
          huart->Instance->BRR = usartdiv;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	60da      	str	r2, [r3, #12]
 8004c96:	e0c1      	b.n	8004e1c <UART_SetConfig+0x520>
        }
        else
        {
          ret = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	76bb      	strb	r3, [r7, #26]
 8004c9c:	e0be      	b.n	8004e1c <UART_SetConfig+0x520>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ca6:	d164      	bne.n	8004d72 <UART_SetConfig+0x476>
  {
    switch (clocksource)
 8004ca8:	7efb      	ldrb	r3, [r7, #27]
 8004caa:	2b08      	cmp	r3, #8
 8004cac:	d827      	bhi.n	8004cfe <UART_SetConfig+0x402>
 8004cae:	a201      	add	r2, pc, #4	; (adr r2, 8004cb4 <UART_SetConfig+0x3b8>)
 8004cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb4:	08004cd9 	.word	0x08004cd9
 8004cb8:	08004ce1 	.word	0x08004ce1
 8004cbc:	08004ce9 	.word	0x08004ce9
 8004cc0:	08004cff 	.word	0x08004cff
 8004cc4:	08004cef 	.word	0x08004cef
 8004cc8:	08004cff 	.word	0x08004cff
 8004ccc:	08004cff 	.word	0x08004cff
 8004cd0:	08004cff 	.word	0x08004cff
 8004cd4:	08004cf7 	.word	0x08004cf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cd8:	f7ff f992 	bl	8004000 <HAL_RCC_GetPCLK1Freq>
 8004cdc:	6178      	str	r0, [r7, #20]
        break;
 8004cde:	e013      	b.n	8004d08 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ce0:	f7ff f9a4 	bl	800402c <HAL_RCC_GetPCLK2Freq>
 8004ce4:	6178      	str	r0, [r7, #20]
        break;
 8004ce6:	e00f      	b.n	8004d08 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ce8:	4b57      	ldr	r3, [pc, #348]	; (8004e48 <UART_SetConfig+0x54c>)
 8004cea:	617b      	str	r3, [r7, #20]
        break;
 8004cec:	e00c      	b.n	8004d08 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cee:	f7ff f919 	bl	8003f24 <HAL_RCC_GetSysClockFreq>
 8004cf2:	6178      	str	r0, [r7, #20]
        break;
 8004cf4:	e008      	b.n	8004d08 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cfa:	617b      	str	r3, [r7, #20]
        break;
 8004cfc:	e004      	b.n	8004d08 <UART_SetConfig+0x40c>
      default:
        pclk = 0U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	76bb      	strb	r3, [r7, #26]
        break;
 8004d06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f000 8086 	beq.w	8004e1c <UART_SetConfig+0x520>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	4a4b      	ldr	r2, [pc, #300]	; (8004e44 <UART_SetConfig+0x548>)
 8004d16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d22:	005a      	lsls	r2, r3, #1
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	085b      	lsrs	r3, r3, #1
 8004d2a:	441a      	add	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	2b0f      	cmp	r3, #15
 8004d3c:	d916      	bls.n	8004d6c <UART_SetConfig+0x470>
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d44:	d212      	bcs.n	8004d6c <UART_SetConfig+0x470>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	f023 030f 	bic.w	r3, r3, #15
 8004d4e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	085b      	lsrs	r3, r3, #1
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	f003 0307 	and.w	r3, r3, #7
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	89fb      	ldrh	r3, [r7, #14]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	89fa      	ldrh	r2, [r7, #14]
 8004d68:	60da      	str	r2, [r3, #12]
 8004d6a:	e057      	b.n	8004e1c <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	76bb      	strb	r3, [r7, #26]
 8004d70:	e054      	b.n	8004e1c <UART_SetConfig+0x520>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d72:	7efb      	ldrb	r3, [r7, #27]
 8004d74:	2b08      	cmp	r3, #8
 8004d76:	d828      	bhi.n	8004dca <UART_SetConfig+0x4ce>
 8004d78:	a201      	add	r2, pc, #4	; (adr r2, 8004d80 <UART_SetConfig+0x484>)
 8004d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7e:	bf00      	nop
 8004d80:	08004da5 	.word	0x08004da5
 8004d84:	08004dad 	.word	0x08004dad
 8004d88:	08004db5 	.word	0x08004db5
 8004d8c:	08004dcb 	.word	0x08004dcb
 8004d90:	08004dbb 	.word	0x08004dbb
 8004d94:	08004dcb 	.word	0x08004dcb
 8004d98:	08004dcb 	.word	0x08004dcb
 8004d9c:	08004dcb 	.word	0x08004dcb
 8004da0:	08004dc3 	.word	0x08004dc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004da4:	f7ff f92c 	bl	8004000 <HAL_RCC_GetPCLK1Freq>
 8004da8:	6178      	str	r0, [r7, #20]
        break;
 8004daa:	e013      	b.n	8004dd4 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dac:	f7ff f93e 	bl	800402c <HAL_RCC_GetPCLK2Freq>
 8004db0:	6178      	str	r0, [r7, #20]
        break;
 8004db2:	e00f      	b.n	8004dd4 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004db4:	4b24      	ldr	r3, [pc, #144]	; (8004e48 <UART_SetConfig+0x54c>)
 8004db6:	617b      	str	r3, [r7, #20]
        break;
 8004db8:	e00c      	b.n	8004dd4 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dba:	f7ff f8b3 	bl	8003f24 <HAL_RCC_GetSysClockFreq>
 8004dbe:	6178      	str	r0, [r7, #20]
        break;
 8004dc0:	e008      	b.n	8004dd4 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dc6:	617b      	str	r3, [r7, #20]
        break;
 8004dc8:	e004      	b.n	8004dd4 <UART_SetConfig+0x4d8>
      default:
        pclk = 0U;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	76bb      	strb	r3, [r7, #26]
        break;
 8004dd2:	bf00      	nop
    }

    if (pclk != 0U)
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d020      	beq.n	8004e1c <UART_SetConfig+0x520>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	4a19      	ldr	r2, [pc, #100]	; (8004e44 <UART_SetConfig+0x548>)
 8004de0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004de4:	461a      	mov	r2, r3
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	fbb3 f2f2 	udiv	r2, r3, r2
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	085b      	lsrs	r3, r3, #1
 8004df2:	441a      	add	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	2b0f      	cmp	r3, #15
 8004e04:	d908      	bls.n	8004e18 <UART_SetConfig+0x51c>
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e0c:	d204      	bcs.n	8004e18 <UART_SetConfig+0x51c>
      {
        huart->Instance->BRR = usartdiv;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	60da      	str	r2, [r3, #12]
 8004e16:	e001      	b.n	8004e1c <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8004e38:	7ebb      	ldrb	r3, [r7, #26]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3720      	adds	r7, #32
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004e44:	08007f58 	.word	0x08007f58
 8004e48:	00f42400 	.word	0x00f42400

08004e4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00a      	beq.n	8004e76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00a      	beq.n	8004e98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9c:	f003 0304 	and.w	r3, r3, #4
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00a      	beq.n	8004eba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ebe:	f003 0308 	and.w	r3, r3, #8
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00a      	beq.n	8004edc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee0:	f003 0310 	and.w	r3, r3, #16
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00a      	beq.n	8004efe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f02:	f003 0320 	and.w	r3, r3, #32
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00a      	beq.n	8004f20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d01a      	beq.n	8004f62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f4a:	d10a      	bne.n	8004f62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00a      	beq.n	8004f84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	605a      	str	r2, [r3, #4]
  }
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af02      	add	r7, sp, #8
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fa0:	f7fc f9c4 	bl	800132c <HAL_GetTick>
 8004fa4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0308 	and.w	r3, r3, #8
 8004fb0:	2b08      	cmp	r3, #8
 8004fb2:	d10e      	bne.n	8004fd2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f82c 	bl	8005020 <UART_WaitOnFlagUntilTimeout>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d001      	beq.n	8004fd2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e022      	b.n	8005018 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0304 	and.w	r3, r3, #4
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	d10e      	bne.n	8004ffe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fe0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fe4:	9300      	str	r3, [sp, #0]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f816 	bl	8005020 <UART_WaitOnFlagUntilTimeout>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e00c      	b.n	8005018 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2220      	movs	r2, #32
 8005002:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2220      	movs	r2, #32
 800500a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	603b      	str	r3, [r7, #0]
 800502c:	4613      	mov	r3, r2
 800502e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005030:	e062      	b.n	80050f8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005038:	d05e      	beq.n	80050f8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800503a:	f7fc f977 	bl	800132c <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	429a      	cmp	r2, r3
 8005048:	d302      	bcc.n	8005050 <UART_WaitOnFlagUntilTimeout+0x30>
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d11d      	bne.n	800508c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800505e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689a      	ldr	r2, [r3, #8]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 0201 	bic.w	r2, r2, #1
 800506e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2220      	movs	r2, #32
 8005074:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2220      	movs	r2, #32
 800507c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e045      	b.n	8005118 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0304 	and.w	r3, r3, #4
 8005096:	2b00      	cmp	r3, #0
 8005098:	d02e      	beq.n	80050f8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050a8:	d126      	bne.n	80050f8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050b2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050c2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	689a      	ldr	r2, [r3, #8]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 0201 	bic.w	r2, r2, #1
 80050d2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2220      	movs	r2, #32
 80050d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2220      	movs	r2, #32
 80050e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2220      	movs	r2, #32
 80050e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e00f      	b.n	8005118 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	69da      	ldr	r2, [r3, #28]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	4013      	ands	r3, r2
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	429a      	cmp	r2, r3
 8005106:	bf0c      	ite	eq
 8005108:	2301      	moveq	r3, #1
 800510a:	2300      	movne	r3, #0
 800510c:	b2db      	uxtb	r3, r3
 800510e:	461a      	mov	r2, r3
 8005110:	79fb      	ldrb	r3, [r7, #7]
 8005112:	429a      	cmp	r2, r3
 8005114:	d08d      	beq.n	8005032 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800512e:	2b01      	cmp	r3, #1
 8005130:	d101      	bne.n	8005136 <HAL_UARTEx_DisableFifoMode+0x16>
 8005132:	2302      	movs	r3, #2
 8005134:	e027      	b.n	8005186 <HAL_UARTEx_DisableFifoMode+0x66>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2224      	movs	r2, #36	; 0x24
 8005142:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 0201 	bic.w	r2, r2, #1
 800515c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005164:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2220      	movs	r2, #32
 8005178:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b084      	sub	sp, #16
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
 800519a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d101      	bne.n	80051aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80051a6:	2302      	movs	r3, #2
 80051a8:	e02d      	b.n	8005206 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2224      	movs	r2, #36	; 0x24
 80051b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f022 0201 	bic.w	r2, r2, #1
 80051d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	683a      	ldr	r2, [r7, #0]
 80051e2:	430a      	orrs	r2, r1
 80051e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f850 	bl	800528c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2220      	movs	r2, #32
 80051f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b084      	sub	sp, #16
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
 8005216:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800521e:	2b01      	cmp	r3, #1
 8005220:	d101      	bne.n	8005226 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005222:	2302      	movs	r3, #2
 8005224:	e02d      	b.n	8005282 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2224      	movs	r2, #36	; 0x24
 8005232:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f022 0201 	bic.w	r2, r2, #1
 800524c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f812 	bl	800528c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2220      	movs	r2, #32
 8005274:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
	...

0800528c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800528c:	b480      	push	{r7}
 800528e:	b089      	sub	sp, #36	; 0x24
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005294:	4a2f      	ldr	r2, [pc, #188]	; (8005354 <UARTEx_SetNbDataToProcess+0xc8>)
 8005296:	f107 0314 	add.w	r3, r7, #20
 800529a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800529e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80052a2:	4a2d      	ldr	r2, [pc, #180]	; (8005358 <UARTEx_SetNbDataToProcess+0xcc>)
 80052a4:	f107 030c 	add.w	r3, r7, #12
 80052a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80052ac:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d108      	bne.n	80052ca <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80052c8:	e03d      	b.n	8005346 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80052ca:	2308      	movs	r3, #8
 80052cc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80052ce:	2308      	movs	r3, #8
 80052d0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	0e5b      	lsrs	r3, r3, #25
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	f003 0307 	and.w	r3, r3, #7
 80052e0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	0f5b      	lsrs	r3, r3, #29
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	f003 0307 	and.w	r3, r3, #7
 80052f0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052f2:	7fbb      	ldrb	r3, [r7, #30]
 80052f4:	7f3a      	ldrb	r2, [r7, #28]
 80052f6:	f107 0120 	add.w	r1, r7, #32
 80052fa:	440a      	add	r2, r1
 80052fc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005300:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005304:	7f3a      	ldrb	r2, [r7, #28]
 8005306:	f107 0120 	add.w	r1, r7, #32
 800530a:	440a      	add	r2, r1
 800530c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005310:	fb93 f3f2 	sdiv	r3, r3, r2
 8005314:	b29a      	uxth	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800531c:	7ffb      	ldrb	r3, [r7, #31]
 800531e:	7f7a      	ldrb	r2, [r7, #29]
 8005320:	f107 0120 	add.w	r1, r7, #32
 8005324:	440a      	add	r2, r1
 8005326:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800532a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800532e:	7f7a      	ldrb	r2, [r7, #29]
 8005330:	f107 0120 	add.w	r1, r7, #32
 8005334:	440a      	add	r2, r1
 8005336:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800533a:	fb93 f3f2 	sdiv	r3, r3, r2
 800533e:	b29a      	uxth	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005346:	bf00      	nop
 8005348:	3724      	adds	r7, #36	; 0x24
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	08007ed0 	.word	0x08007ed0
 8005358:	08007ed8 	.word	0x08007ed8

0800535c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800535c:	b480      	push	{r7}
 800535e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005360:	bf00      	nop
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
	...

0800536c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005372:	f3ef 8305 	mrs	r3, IPSR
 8005376:	60bb      	str	r3, [r7, #8]
  return(result);
 8005378:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10f      	bne.n	800539e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800537e:	f3ef 8310 	mrs	r3, PRIMASK
 8005382:	607b      	str	r3, [r7, #4]
  return(result);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d105      	bne.n	8005396 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800538a:	f3ef 8311 	mrs	r3, BASEPRI
 800538e:	603b      	str	r3, [r7, #0]
  return(result);
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d007      	beq.n	80053a6 <osKernelInitialize+0x3a>
 8005396:	4b0e      	ldr	r3, [pc, #56]	; (80053d0 <osKernelInitialize+0x64>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2b02      	cmp	r3, #2
 800539c:	d103      	bne.n	80053a6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800539e:	f06f 0305 	mvn.w	r3, #5
 80053a2:	60fb      	str	r3, [r7, #12]
 80053a4:	e00c      	b.n	80053c0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80053a6:	4b0a      	ldr	r3, [pc, #40]	; (80053d0 <osKernelInitialize+0x64>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d105      	bne.n	80053ba <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80053ae:	4b08      	ldr	r3, [pc, #32]	; (80053d0 <osKernelInitialize+0x64>)
 80053b0:	2201      	movs	r2, #1
 80053b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80053b4:	2300      	movs	r3, #0
 80053b6:	60fb      	str	r3, [r7, #12]
 80053b8:	e002      	b.n	80053c0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80053ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053be:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80053c0:	68fb      	ldr	r3, [r7, #12]
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	20000060 	.word	0x20000060

080053d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053da:	f3ef 8305 	mrs	r3, IPSR
 80053de:	60bb      	str	r3, [r7, #8]
  return(result);
 80053e0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d10f      	bne.n	8005406 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053e6:	f3ef 8310 	mrs	r3, PRIMASK
 80053ea:	607b      	str	r3, [r7, #4]
  return(result);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d105      	bne.n	80053fe <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80053f2:	f3ef 8311 	mrs	r3, BASEPRI
 80053f6:	603b      	str	r3, [r7, #0]
  return(result);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d007      	beq.n	800540e <osKernelStart+0x3a>
 80053fe:	4b0f      	ldr	r3, [pc, #60]	; (800543c <osKernelStart+0x68>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2b02      	cmp	r3, #2
 8005404:	d103      	bne.n	800540e <osKernelStart+0x3a>
    stat = osErrorISR;
 8005406:	f06f 0305 	mvn.w	r3, #5
 800540a:	60fb      	str	r3, [r7, #12]
 800540c:	e010      	b.n	8005430 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800540e:	4b0b      	ldr	r3, [pc, #44]	; (800543c <osKernelStart+0x68>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d109      	bne.n	800542a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005416:	f7ff ffa1 	bl	800535c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800541a:	4b08      	ldr	r3, [pc, #32]	; (800543c <osKernelStart+0x68>)
 800541c:	2202      	movs	r2, #2
 800541e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005420:	f001 f870 	bl	8006504 <vTaskStartScheduler>
      stat = osOK;
 8005424:	2300      	movs	r3, #0
 8005426:	60fb      	str	r3, [r7, #12]
 8005428:	e002      	b.n	8005430 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800542a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800542e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005430:	68fb      	ldr	r3, [r7, #12]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	20000060 	.word	0x20000060

08005440 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005440:	b580      	push	{r7, lr}
 8005442:	b090      	sub	sp, #64	; 0x40
 8005444:	af04      	add	r7, sp, #16
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800544c:	2300      	movs	r3, #0
 800544e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005450:	f3ef 8305 	mrs	r3, IPSR
 8005454:	61fb      	str	r3, [r7, #28]
  return(result);
 8005456:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005458:	2b00      	cmp	r3, #0
 800545a:	f040 808f 	bne.w	800557c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800545e:	f3ef 8310 	mrs	r3, PRIMASK
 8005462:	61bb      	str	r3, [r7, #24]
  return(result);
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d105      	bne.n	8005476 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800546a:	f3ef 8311 	mrs	r3, BASEPRI
 800546e:	617b      	str	r3, [r7, #20]
  return(result);
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <osThreadNew+0x3e>
 8005476:	4b44      	ldr	r3, [pc, #272]	; (8005588 <osThreadNew+0x148>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2b02      	cmp	r3, #2
 800547c:	d07e      	beq.n	800557c <osThreadNew+0x13c>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d07b      	beq.n	800557c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005484:	2380      	movs	r3, #128	; 0x80
 8005486:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005488:	2318      	movs	r3, #24
 800548a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800548c:	2300      	movs	r3, #0
 800548e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005490:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005494:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d045      	beq.n	8005528 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d002      	beq.n	80054aa <osThreadNew+0x6a>
        name = attr->name;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d002      	beq.n	80054b8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d008      	beq.n	80054d0 <osThreadNew+0x90>
 80054be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c0:	2b38      	cmp	r3, #56	; 0x38
 80054c2:	d805      	bhi.n	80054d0 <osThreadNew+0x90>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d001      	beq.n	80054d4 <osThreadNew+0x94>
        return (NULL);
 80054d0:	2300      	movs	r3, #0
 80054d2:	e054      	b.n	800557e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d003      	beq.n	80054e4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	089b      	lsrs	r3, r3, #2
 80054e2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00e      	beq.n	800550a <osThreadNew+0xca>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	2b5b      	cmp	r3, #91	; 0x5b
 80054f2:	d90a      	bls.n	800550a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d006      	beq.n	800550a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <osThreadNew+0xca>
        mem = 1;
 8005504:	2301      	movs	r3, #1
 8005506:	623b      	str	r3, [r7, #32]
 8005508:	e010      	b.n	800552c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10c      	bne.n	800552c <osThreadNew+0xec>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d108      	bne.n	800552c <osThreadNew+0xec>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d104      	bne.n	800552c <osThreadNew+0xec>
          mem = 0;
 8005522:	2300      	movs	r3, #0
 8005524:	623b      	str	r3, [r7, #32]
 8005526:	e001      	b.n	800552c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005528:	2300      	movs	r3, #0
 800552a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800552c:	6a3b      	ldr	r3, [r7, #32]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d110      	bne.n	8005554 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800553a:	9202      	str	r2, [sp, #8]
 800553c:	9301      	str	r3, [sp, #4]
 800553e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005540:	9300      	str	r3, [sp, #0]
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005546:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	f000 fe09 	bl	8006160 <xTaskCreateStatic>
 800554e:	4603      	mov	r3, r0
 8005550:	613b      	str	r3, [r7, #16]
 8005552:	e013      	b.n	800557c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005554:	6a3b      	ldr	r3, [r7, #32]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d110      	bne.n	800557c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800555a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555c:	b29a      	uxth	r2, r3
 800555e:	f107 0310 	add.w	r3, r7, #16
 8005562:	9301      	str	r3, [sp, #4]
 8005564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f000 fe51 	bl	8006214 <xTaskCreate>
 8005572:	4603      	mov	r3, r0
 8005574:	2b01      	cmp	r3, #1
 8005576:	d001      	beq.n	800557c <osThreadNew+0x13c>
          hTask = NULL;
 8005578:	2300      	movs	r3, #0
 800557a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800557c:	693b      	ldr	r3, [r7, #16]
}
 800557e:	4618      	mov	r0, r3
 8005580:	3730      	adds	r7, #48	; 0x30
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	20000060 	.word	0x20000060

0800558c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800558c:	b580      	push	{r7, lr}
 800558e:	b086      	sub	sp, #24
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005594:	f3ef 8305 	mrs	r3, IPSR
 8005598:	613b      	str	r3, [r7, #16]
  return(result);
 800559a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10f      	bne.n	80055c0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055a0:	f3ef 8310 	mrs	r3, PRIMASK
 80055a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d105      	bne.n	80055b8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80055ac:	f3ef 8311 	mrs	r3, BASEPRI
 80055b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d007      	beq.n	80055c8 <osDelay+0x3c>
 80055b8:	4b0a      	ldr	r3, [pc, #40]	; (80055e4 <osDelay+0x58>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d103      	bne.n	80055c8 <osDelay+0x3c>
    stat = osErrorISR;
 80055c0:	f06f 0305 	mvn.w	r3, #5
 80055c4:	617b      	str	r3, [r7, #20]
 80055c6:	e007      	b.n	80055d8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80055c8:	2300      	movs	r3, #0
 80055ca:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d002      	beq.n	80055d8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 ff62 	bl	800649c <vTaskDelay>
    }
  }

  return (stat);
 80055d8:	697b      	ldr	r3, [r7, #20]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3718      	adds	r7, #24
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	20000060 	.word	0x20000060

080055e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	4a07      	ldr	r2, [pc, #28]	; (8005614 <vApplicationGetIdleTaskMemory+0x2c>)
 80055f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	4a06      	ldr	r2, [pc, #24]	; (8005618 <vApplicationGetIdleTaskMemory+0x30>)
 80055fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2280      	movs	r2, #128	; 0x80
 8005604:	601a      	str	r2, [r3, #0]
}
 8005606:	bf00      	nop
 8005608:	3714      	adds	r7, #20
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	20000064 	.word	0x20000064
 8005618:	200000c0 	.word	0x200000c0

0800561c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4a07      	ldr	r2, [pc, #28]	; (8005648 <vApplicationGetTimerTaskMemory+0x2c>)
 800562c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	4a06      	ldr	r2, [pc, #24]	; (800564c <vApplicationGetTimerTaskMemory+0x30>)
 8005632:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f44f 7280 	mov.w	r2, #256	; 0x100
 800563a:	601a      	str	r2, [r3, #0]
}
 800563c:	bf00      	nop
 800563e:	3714      	adds	r7, #20
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	200002c0 	.word	0x200002c0
 800564c:	2000031c 	.word	0x2000031c

08005650 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f103 0208 	add.w	r2, r3, #8
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005668:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f103 0208 	add.w	r2, r3, #8
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f103 0208 	add.w	r2, r3, #8
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800569e:	bf00      	nop
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056aa:	b480      	push	{r7}
 80056ac:	b085      	sub	sp, #20
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
 80056b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	689a      	ldr	r2, [r3, #8]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	683a      	ldr	r2, [r7, #0]
 80056ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	1c5a      	adds	r2, r3, #1
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	601a      	str	r2, [r3, #0]
}
 80056e6:	bf00      	nop
 80056e8:	3714      	adds	r7, #20
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056f2:	b480      	push	{r7}
 80056f4:	b085      	sub	sp, #20
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
 80056fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005708:	d103      	bne.n	8005712 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	60fb      	str	r3, [r7, #12]
 8005710:	e00c      	b.n	800572c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	3308      	adds	r3, #8
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	e002      	b.n	8005720 <vListInsert+0x2e>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	60fb      	str	r3, [r7, #12]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	429a      	cmp	r2, r3
 800572a:	d2f6      	bcs.n	800571a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	683a      	ldr	r2, [r7, #0]
 800573a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	683a      	ldr	r2, [r7, #0]
 8005746:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	1c5a      	adds	r2, r3, #1
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	601a      	str	r2, [r3, #0]
}
 8005758:	bf00      	nop
 800575a:	3714      	adds	r7, #20
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	6892      	ldr	r2, [r2, #8]
 800577a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	6852      	ldr	r2, [r2, #4]
 8005784:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	429a      	cmp	r2, r3
 800578e:	d103      	bne.n	8005798 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	1e5a      	subs	r2, r3, #1
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3714      	adds	r7, #20
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d109      	bne.n	80057e0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80057cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d0:	f383 8811 	msr	BASEPRI, r3
 80057d4:	f3bf 8f6f 	isb	sy
 80057d8:	f3bf 8f4f 	dsb	sy
 80057dc:	60bb      	str	r3, [r7, #8]
 80057de:	e7fe      	b.n	80057de <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80057e0:	f002 f814 	bl	800780c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ec:	68f9      	ldr	r1, [r7, #12]
 80057ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80057f0:	fb01 f303 	mul.w	r3, r1, r3
 80057f4:	441a      	add	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005810:	3b01      	subs	r3, #1
 8005812:	68f9      	ldr	r1, [r7, #12]
 8005814:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005816:	fb01 f303 	mul.w	r3, r1, r3
 800581a:	441a      	add	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	22ff      	movs	r2, #255	; 0xff
 8005824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	22ff      	movs	r2, #255	; 0xff
 800582c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d114      	bne.n	8005860 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d01a      	beq.n	8005874 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	3310      	adds	r3, #16
 8005842:	4618      	mov	r0, r3
 8005844:	f001 f8de 	bl	8006a04 <xTaskRemoveFromEventList>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d012      	beq.n	8005874 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800584e:	4b0d      	ldr	r3, [pc, #52]	; (8005884 <xQueueGenericReset+0xcc>)
 8005850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	f3bf 8f4f 	dsb	sy
 800585a:	f3bf 8f6f 	isb	sy
 800585e:	e009      	b.n	8005874 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	3310      	adds	r3, #16
 8005864:	4618      	mov	r0, r3
 8005866:	f7ff fef3 	bl	8005650 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	3324      	adds	r3, #36	; 0x24
 800586e:	4618      	mov	r0, r3
 8005870:	f7ff feee 	bl	8005650 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005874:	f001 fff8 	bl	8007868 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005878:	2301      	movs	r3, #1
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	e000ed04 	.word	0xe000ed04

08005888 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005888:	b580      	push	{r7, lr}
 800588a:	b08e      	sub	sp, #56	; 0x38
 800588c:	af02      	add	r7, sp, #8
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
 8005894:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d109      	bne.n	80058b0 <xQueueGenericCreateStatic+0x28>
 800589c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a0:	f383 8811 	msr	BASEPRI, r3
 80058a4:	f3bf 8f6f 	isb	sy
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80058ae:	e7fe      	b.n	80058ae <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d109      	bne.n	80058ca <xQueueGenericCreateStatic+0x42>
 80058b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ba:	f383 8811 	msr	BASEPRI, r3
 80058be:	f3bf 8f6f 	isb	sy
 80058c2:	f3bf 8f4f 	dsb	sy
 80058c6:	627b      	str	r3, [r7, #36]	; 0x24
 80058c8:	e7fe      	b.n	80058c8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d002      	beq.n	80058d6 <xQueueGenericCreateStatic+0x4e>
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <xQueueGenericCreateStatic+0x52>
 80058d6:	2301      	movs	r3, #1
 80058d8:	e000      	b.n	80058dc <xQueueGenericCreateStatic+0x54>
 80058da:	2300      	movs	r3, #0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d109      	bne.n	80058f4 <xQueueGenericCreateStatic+0x6c>
 80058e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	623b      	str	r3, [r7, #32]
 80058f2:	e7fe      	b.n	80058f2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d102      	bne.n	8005900 <xQueueGenericCreateStatic+0x78>
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <xQueueGenericCreateStatic+0x7c>
 8005900:	2301      	movs	r3, #1
 8005902:	e000      	b.n	8005906 <xQueueGenericCreateStatic+0x7e>
 8005904:	2300      	movs	r3, #0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d109      	bne.n	800591e <xQueueGenericCreateStatic+0x96>
 800590a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590e:	f383 8811 	msr	BASEPRI, r3
 8005912:	f3bf 8f6f 	isb	sy
 8005916:	f3bf 8f4f 	dsb	sy
 800591a:	61fb      	str	r3, [r7, #28]
 800591c:	e7fe      	b.n	800591c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800591e:	2350      	movs	r3, #80	; 0x50
 8005920:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	2b50      	cmp	r3, #80	; 0x50
 8005926:	d009      	beq.n	800593c <xQueueGenericCreateStatic+0xb4>
 8005928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592c:	f383 8811 	msr	BASEPRI, r3
 8005930:	f3bf 8f6f 	isb	sy
 8005934:	f3bf 8f4f 	dsb	sy
 8005938:	61bb      	str	r3, [r7, #24]
 800593a:	e7fe      	b.n	800593a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800593c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00d      	beq.n	8005964 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005950:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005956:	9300      	str	r3, [sp, #0]
 8005958:	4613      	mov	r3, r2
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	68b9      	ldr	r1, [r7, #8]
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f000 f805 	bl	800596e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005966:	4618      	mov	r0, r3
 8005968:	3730      	adds	r7, #48	; 0x30
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800596e:	b580      	push	{r7, lr}
 8005970:	b084      	sub	sp, #16
 8005972:	af00      	add	r7, sp, #0
 8005974:	60f8      	str	r0, [r7, #12]
 8005976:	60b9      	str	r1, [r7, #8]
 8005978:	607a      	str	r2, [r7, #4]
 800597a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d103      	bne.n	800598a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	69ba      	ldr	r2, [r7, #24]
 8005986:	601a      	str	r2, [r3, #0]
 8005988:	e002      	b.n	8005990 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800599c:	2101      	movs	r1, #1
 800599e:	69b8      	ldr	r0, [r7, #24]
 80059a0:	f7ff ff0a 	bl	80057b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	78fa      	ldrb	r2, [r7, #3]
 80059a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80059ac:	bf00      	nop
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b08e      	sub	sp, #56	; 0x38
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
 80059c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80059c2:	2300      	movs	r3, #0
 80059c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80059ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d109      	bne.n	80059e4 <xQueueGenericSend+0x30>
 80059d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d4:	f383 8811 	msr	BASEPRI, r3
 80059d8:	f3bf 8f6f 	isb	sy
 80059dc:	f3bf 8f4f 	dsb	sy
 80059e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80059e2:	e7fe      	b.n	80059e2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d103      	bne.n	80059f2 <xQueueGenericSend+0x3e>
 80059ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <xQueueGenericSend+0x42>
 80059f2:	2301      	movs	r3, #1
 80059f4:	e000      	b.n	80059f8 <xQueueGenericSend+0x44>
 80059f6:	2300      	movs	r3, #0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d109      	bne.n	8005a10 <xQueueGenericSend+0x5c>
 80059fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a00:	f383 8811 	msr	BASEPRI, r3
 8005a04:	f3bf 8f6f 	isb	sy
 8005a08:	f3bf 8f4f 	dsb	sy
 8005a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a0e:	e7fe      	b.n	8005a0e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d103      	bne.n	8005a1e <xQueueGenericSend+0x6a>
 8005a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d101      	bne.n	8005a22 <xQueueGenericSend+0x6e>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e000      	b.n	8005a24 <xQueueGenericSend+0x70>
 8005a22:	2300      	movs	r3, #0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d109      	bne.n	8005a3c <xQueueGenericSend+0x88>
 8005a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2c:	f383 8811 	msr	BASEPRI, r3
 8005a30:	f3bf 8f6f 	isb	sy
 8005a34:	f3bf 8f4f 	dsb	sy
 8005a38:	623b      	str	r3, [r7, #32]
 8005a3a:	e7fe      	b.n	8005a3a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a3c:	f001 f998 	bl	8006d70 <xTaskGetSchedulerState>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d102      	bne.n	8005a4c <xQueueGenericSend+0x98>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d101      	bne.n	8005a50 <xQueueGenericSend+0x9c>
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e000      	b.n	8005a52 <xQueueGenericSend+0x9e>
 8005a50:	2300      	movs	r3, #0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d109      	bne.n	8005a6a <xQueueGenericSend+0xb6>
 8005a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5a:	f383 8811 	msr	BASEPRI, r3
 8005a5e:	f3bf 8f6f 	isb	sy
 8005a62:	f3bf 8f4f 	dsb	sy
 8005a66:	61fb      	str	r3, [r7, #28]
 8005a68:	e7fe      	b.n	8005a68 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a6a:	f001 fecf 	bl	800780c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d302      	bcc.n	8005a80 <xQueueGenericSend+0xcc>
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d129      	bne.n	8005ad4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a80:	683a      	ldr	r2, [r7, #0]
 8005a82:	68b9      	ldr	r1, [r7, #8]
 8005a84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a86:	f000 f9ff 	bl	8005e88 <prvCopyDataToQueue>
 8005a8a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d010      	beq.n	8005ab6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a96:	3324      	adds	r3, #36	; 0x24
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f000 ffb3 	bl	8006a04 <xTaskRemoveFromEventList>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d013      	beq.n	8005acc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005aa4:	4b3f      	ldr	r3, [pc, #252]	; (8005ba4 <xQueueGenericSend+0x1f0>)
 8005aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aaa:	601a      	str	r2, [r3, #0]
 8005aac:	f3bf 8f4f 	dsb	sy
 8005ab0:	f3bf 8f6f 	isb	sy
 8005ab4:	e00a      	b.n	8005acc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d007      	beq.n	8005acc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005abc:	4b39      	ldr	r3, [pc, #228]	; (8005ba4 <xQueueGenericSend+0x1f0>)
 8005abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ac2:	601a      	str	r2, [r3, #0]
 8005ac4:	f3bf 8f4f 	dsb	sy
 8005ac8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005acc:	f001 fecc 	bl	8007868 <vPortExitCritical>
				return pdPASS;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e063      	b.n	8005b9c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d103      	bne.n	8005ae2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ada:	f001 fec5 	bl	8007868 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	e05c      	b.n	8005b9c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d106      	bne.n	8005af6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ae8:	f107 0314 	add.w	r3, r7, #20
 8005aec:	4618      	mov	r0, r3
 8005aee:	f000 ffeb 	bl	8006ac8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005af2:	2301      	movs	r3, #1
 8005af4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005af6:	f001 feb7 	bl	8007868 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005afa:	f000 fd67 	bl	80065cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005afe:	f001 fe85 	bl	800780c <vPortEnterCritical>
 8005b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b08:	b25b      	sxtb	r3, r3
 8005b0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b0e:	d103      	bne.n	8005b18 <xQueueGenericSend+0x164>
 8005b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b1e:	b25b      	sxtb	r3, r3
 8005b20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b24:	d103      	bne.n	8005b2e <xQueueGenericSend+0x17a>
 8005b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b2e:	f001 fe9b 	bl	8007868 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b32:	1d3a      	adds	r2, r7, #4
 8005b34:	f107 0314 	add.w	r3, r7, #20
 8005b38:	4611      	mov	r1, r2
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 ffda 	bl	8006af4 <xTaskCheckForTimeOut>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d124      	bne.n	8005b90 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005b46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b48:	f000 fa96 	bl	8006078 <prvIsQueueFull>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d018      	beq.n	8005b84 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b54:	3310      	adds	r3, #16
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	4611      	mov	r1, r2
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 ff04 	bl	8006968 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005b60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b62:	f000 fa21 	bl	8005fa8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005b66:	f000 fd3f 	bl	80065e8 <xTaskResumeAll>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f47f af7c 	bne.w	8005a6a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005b72:	4b0c      	ldr	r3, [pc, #48]	; (8005ba4 <xQueueGenericSend+0x1f0>)
 8005b74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b78:	601a      	str	r2, [r3, #0]
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	e772      	b.n	8005a6a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005b84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b86:	f000 fa0f 	bl	8005fa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b8a:	f000 fd2d 	bl	80065e8 <xTaskResumeAll>
 8005b8e:	e76c      	b.n	8005a6a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005b90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b92:	f000 fa09 	bl	8005fa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b96:	f000 fd27 	bl	80065e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005b9a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3738      	adds	r7, #56	; 0x38
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	e000ed04 	.word	0xe000ed04

08005ba8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b08e      	sub	sp, #56	; 0x38
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
 8005bb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d109      	bne.n	8005bd4 <xQueueGenericSendFromISR+0x2c>
 8005bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc4:	f383 8811 	msr	BASEPRI, r3
 8005bc8:	f3bf 8f6f 	isb	sy
 8005bcc:	f3bf 8f4f 	dsb	sy
 8005bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8005bd2:	e7fe      	b.n	8005bd2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d103      	bne.n	8005be2 <xQueueGenericSendFromISR+0x3a>
 8005bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d101      	bne.n	8005be6 <xQueueGenericSendFromISR+0x3e>
 8005be2:	2301      	movs	r3, #1
 8005be4:	e000      	b.n	8005be8 <xQueueGenericSendFromISR+0x40>
 8005be6:	2300      	movs	r3, #0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d109      	bne.n	8005c00 <xQueueGenericSendFromISR+0x58>
 8005bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf0:	f383 8811 	msr	BASEPRI, r3
 8005bf4:	f3bf 8f6f 	isb	sy
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	623b      	str	r3, [r7, #32]
 8005bfe:	e7fe      	b.n	8005bfe <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d103      	bne.n	8005c0e <xQueueGenericSendFromISR+0x66>
 8005c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d101      	bne.n	8005c12 <xQueueGenericSendFromISR+0x6a>
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e000      	b.n	8005c14 <xQueueGenericSendFromISR+0x6c>
 8005c12:	2300      	movs	r3, #0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d109      	bne.n	8005c2c <xQueueGenericSendFromISR+0x84>
 8005c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1c:	f383 8811 	msr	BASEPRI, r3
 8005c20:	f3bf 8f6f 	isb	sy
 8005c24:	f3bf 8f4f 	dsb	sy
 8005c28:	61fb      	str	r3, [r7, #28]
 8005c2a:	e7fe      	b.n	8005c2a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c2c:	f001 feca 	bl	80079c4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005c30:	f3ef 8211 	mrs	r2, BASEPRI
 8005c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c38:	f383 8811 	msr	BASEPRI, r3
 8005c3c:	f3bf 8f6f 	isb	sy
 8005c40:	f3bf 8f4f 	dsb	sy
 8005c44:	61ba      	str	r2, [r7, #24]
 8005c46:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005c48:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d302      	bcc.n	8005c5e <xQueueGenericSendFromISR+0xb6>
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d12c      	bne.n	8005cb8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c68:	683a      	ldr	r2, [r7, #0]
 8005c6a:	68b9      	ldr	r1, [r7, #8]
 8005c6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c6e:	f000 f90b 	bl	8005e88 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c72:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005c76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c7a:	d112      	bne.n	8005ca2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d016      	beq.n	8005cb2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c86:	3324      	adds	r3, #36	; 0x24
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f000 febb 	bl	8006a04 <xTaskRemoveFromEventList>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00e      	beq.n	8005cb2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00b      	beq.n	8005cb2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	e007      	b.n	8005cb2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005ca2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	b25a      	sxtb	r2, r3
 8005cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005cb6:	e001      	b.n	8005cbc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	637b      	str	r3, [r7, #52]	; 0x34
 8005cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cbe:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3738      	adds	r7, #56	; 0x38
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b08c      	sub	sp, #48	; 0x30
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d109      	bne.n	8005cfe <xQueueReceive+0x2e>
	__asm volatile
 8005cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cee:	f383 8811 	msr	BASEPRI, r3
 8005cf2:	f3bf 8f6f 	isb	sy
 8005cf6:	f3bf 8f4f 	dsb	sy
 8005cfa:	623b      	str	r3, [r7, #32]
 8005cfc:	e7fe      	b.n	8005cfc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d103      	bne.n	8005d0c <xQueueReceive+0x3c>
 8005d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d101      	bne.n	8005d10 <xQueueReceive+0x40>
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e000      	b.n	8005d12 <xQueueReceive+0x42>
 8005d10:	2300      	movs	r3, #0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d109      	bne.n	8005d2a <xQueueReceive+0x5a>
 8005d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1a:	f383 8811 	msr	BASEPRI, r3
 8005d1e:	f3bf 8f6f 	isb	sy
 8005d22:	f3bf 8f4f 	dsb	sy
 8005d26:	61fb      	str	r3, [r7, #28]
 8005d28:	e7fe      	b.n	8005d28 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d2a:	f001 f821 	bl	8006d70 <xTaskGetSchedulerState>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d102      	bne.n	8005d3a <xQueueReceive+0x6a>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <xQueueReceive+0x6e>
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e000      	b.n	8005d40 <xQueueReceive+0x70>
 8005d3e:	2300      	movs	r3, #0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d109      	bne.n	8005d58 <xQueueReceive+0x88>
 8005d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d48:	f383 8811 	msr	BASEPRI, r3
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	f3bf 8f4f 	dsb	sy
 8005d54:	61bb      	str	r3, [r7, #24]
 8005d56:	e7fe      	b.n	8005d56 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d58:	f001 fd58 	bl	800780c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d60:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d01f      	beq.n	8005da8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d68:	68b9      	ldr	r1, [r7, #8]
 8005d6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d6c:	f000 f8f6 	bl	8005f5c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d72:	1e5a      	subs	r2, r3, #1
 8005d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d76:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00f      	beq.n	8005da0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d82:	3310      	adds	r3, #16
 8005d84:	4618      	mov	r0, r3
 8005d86:	f000 fe3d 	bl	8006a04 <xTaskRemoveFromEventList>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d007      	beq.n	8005da0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d90:	4b3c      	ldr	r3, [pc, #240]	; (8005e84 <xQueueReceive+0x1b4>)
 8005d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d96:	601a      	str	r2, [r3, #0]
 8005d98:	f3bf 8f4f 	dsb	sy
 8005d9c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005da0:	f001 fd62 	bl	8007868 <vPortExitCritical>
				return pdPASS;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e069      	b.n	8005e7c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d103      	bne.n	8005db6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005dae:	f001 fd5b 	bl	8007868 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005db2:	2300      	movs	r3, #0
 8005db4:	e062      	b.n	8005e7c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d106      	bne.n	8005dca <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005dbc:	f107 0310 	add.w	r3, r7, #16
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f000 fe81 	bl	8006ac8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005dca:	f001 fd4d 	bl	8007868 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005dce:	f000 fbfd 	bl	80065cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005dd2:	f001 fd1b 	bl	800780c <vPortEnterCritical>
 8005dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ddc:	b25b      	sxtb	r3, r3
 8005dde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005de2:	d103      	bne.n	8005dec <xQueueReceive+0x11c>
 8005de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005df2:	b25b      	sxtb	r3, r3
 8005df4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005df8:	d103      	bne.n	8005e02 <xQueueReceive+0x132>
 8005dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e02:	f001 fd31 	bl	8007868 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e06:	1d3a      	adds	r2, r7, #4
 8005e08:	f107 0310 	add.w	r3, r7, #16
 8005e0c:	4611      	mov	r1, r2
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f000 fe70 	bl	8006af4 <xTaskCheckForTimeOut>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d123      	bne.n	8005e62 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e1c:	f000 f916 	bl	800604c <prvIsQueueEmpty>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d017      	beq.n	8005e56 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e28:	3324      	adds	r3, #36	; 0x24
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	4611      	mov	r1, r2
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 fd9a 	bl	8006968 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e36:	f000 f8b7 	bl	8005fa8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e3a:	f000 fbd5 	bl	80065e8 <xTaskResumeAll>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d189      	bne.n	8005d58 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005e44:	4b0f      	ldr	r3, [pc, #60]	; (8005e84 <xQueueReceive+0x1b4>)
 8005e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e4a:	601a      	str	r2, [r3, #0]
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	f3bf 8f6f 	isb	sy
 8005e54:	e780      	b.n	8005d58 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005e56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e58:	f000 f8a6 	bl	8005fa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e5c:	f000 fbc4 	bl	80065e8 <xTaskResumeAll>
 8005e60:	e77a      	b.n	8005d58 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005e62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e64:	f000 f8a0 	bl	8005fa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e68:	f000 fbbe 	bl	80065e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e6e:	f000 f8ed 	bl	800604c <prvIsQueueEmpty>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f43f af6f 	beq.w	8005d58 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e7a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3730      	adds	r7, #48	; 0x30
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	e000ed04 	.word	0xe000ed04

08005e88 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b086      	sub	sp, #24
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005e94:	2300      	movs	r3, #0
 8005e96:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10d      	bne.n	8005ec2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d14d      	bne.n	8005f4a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f000 ff7a 	bl	8006dac <xTaskPriorityDisinherit>
 8005eb8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	609a      	str	r2, [r3, #8]
 8005ec0:	e043      	b.n	8005f4a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d119      	bne.n	8005efc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6858      	ldr	r0, [r3, #4]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	68b9      	ldr	r1, [r7, #8]
 8005ed4:	f001 ffae 	bl	8007e34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee0:	441a      	add	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	685a      	ldr	r2, [r3, #4]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d32b      	bcc.n	8005f4a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	605a      	str	r2, [r3, #4]
 8005efa:	e026      	b.n	8005f4a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	68d8      	ldr	r0, [r3, #12]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f04:	461a      	mov	r2, r3
 8005f06:	68b9      	ldr	r1, [r7, #8]
 8005f08:	f001 ff94 	bl	8007e34 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	68da      	ldr	r2, [r3, #12]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f14:	425b      	negs	r3, r3
 8005f16:	441a      	add	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	68da      	ldr	r2, [r3, #12]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d207      	bcs.n	8005f38 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	689a      	ldr	r2, [r3, #8]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f30:	425b      	negs	r3, r3
 8005f32:	441a      	add	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d105      	bne.n	8005f4a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d002      	beq.n	8005f4a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	3b01      	subs	r3, #1
 8005f48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	1c5a      	adds	r2, r3, #1
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005f52:	697b      	ldr	r3, [r7, #20]
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3718      	adds	r7, #24
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d018      	beq.n	8005fa0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68da      	ldr	r2, [r3, #12]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f76:	441a      	add	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	68da      	ldr	r2, [r3, #12]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d303      	bcc.n	8005f90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	68d9      	ldr	r1, [r3, #12]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f98:	461a      	mov	r2, r3
 8005f9a:	6838      	ldr	r0, [r7, #0]
 8005f9c:	f001 ff4a 	bl	8007e34 <memcpy>
	}
}
 8005fa0:	bf00      	nop
 8005fa2:	3708      	adds	r7, #8
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005fb0:	f001 fc2c 	bl	800780c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fbc:	e011      	b.n	8005fe2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d012      	beq.n	8005fec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	3324      	adds	r3, #36	; 0x24
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f000 fd1a 	bl	8006a04 <xTaskRemoveFromEventList>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005fd6:	f000 fded 	bl	8006bb4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005fda:	7bfb      	ldrb	r3, [r7, #15]
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	dce9      	bgt.n	8005fbe <prvUnlockQueue+0x16>
 8005fea:	e000      	b.n	8005fee <prvUnlockQueue+0x46>
					break;
 8005fec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	22ff      	movs	r2, #255	; 0xff
 8005ff2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005ff6:	f001 fc37 	bl	8007868 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005ffa:	f001 fc07 	bl	800780c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006004:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006006:	e011      	b.n	800602c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d012      	beq.n	8006036 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	3310      	adds	r3, #16
 8006014:	4618      	mov	r0, r3
 8006016:	f000 fcf5 	bl	8006a04 <xTaskRemoveFromEventList>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d001      	beq.n	8006024 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006020:	f000 fdc8 	bl	8006bb4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006024:	7bbb      	ldrb	r3, [r7, #14]
 8006026:	3b01      	subs	r3, #1
 8006028:	b2db      	uxtb	r3, r3
 800602a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800602c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006030:	2b00      	cmp	r3, #0
 8006032:	dce9      	bgt.n	8006008 <prvUnlockQueue+0x60>
 8006034:	e000      	b.n	8006038 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006036:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	22ff      	movs	r2, #255	; 0xff
 800603c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006040:	f001 fc12 	bl	8007868 <vPortExitCritical>
}
 8006044:	bf00      	nop
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006054:	f001 fbda 	bl	800780c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605c:	2b00      	cmp	r3, #0
 800605e:	d102      	bne.n	8006066 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006060:	2301      	movs	r3, #1
 8006062:	60fb      	str	r3, [r7, #12]
 8006064:	e001      	b.n	800606a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006066:	2300      	movs	r3, #0
 8006068:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800606a:	f001 fbfd 	bl	8007868 <vPortExitCritical>

	return xReturn;
 800606e:	68fb      	ldr	r3, [r7, #12]
}
 8006070:	4618      	mov	r0, r3
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006080:	f001 fbc4 	bl	800780c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800608c:	429a      	cmp	r2, r3
 800608e:	d102      	bne.n	8006096 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006090:	2301      	movs	r3, #1
 8006092:	60fb      	str	r3, [r7, #12]
 8006094:	e001      	b.n	800609a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006096:	2300      	movs	r3, #0
 8006098:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800609a:	f001 fbe5 	bl	8007868 <vPortExitCritical>

	return xReturn;
 800609e:	68fb      	ldr	r3, [r7, #12]
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3710      	adds	r7, #16
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060b2:	2300      	movs	r3, #0
 80060b4:	60fb      	str	r3, [r7, #12]
 80060b6:	e014      	b.n	80060e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80060b8:	4a0e      	ldr	r2, [pc, #56]	; (80060f4 <vQueueAddToRegistry+0x4c>)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10b      	bne.n	80060dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80060c4:	490b      	ldr	r1, [pc, #44]	; (80060f4 <vQueueAddToRegistry+0x4c>)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80060ce:	4a09      	ldr	r2, [pc, #36]	; (80060f4 <vQueueAddToRegistry+0x4c>)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	00db      	lsls	r3, r3, #3
 80060d4:	4413      	add	r3, r2
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80060da:	e005      	b.n	80060e8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	3301      	adds	r3, #1
 80060e0:	60fb      	str	r3, [r7, #12]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2b07      	cmp	r3, #7
 80060e6:	d9e7      	bls.n	80060b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80060e8:	bf00      	nop
 80060ea:	3714      	adds	r7, #20
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr
 80060f4:	20001ac0 	.word	0x20001ac0

080060f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006108:	f001 fb80 	bl	800780c <vPortEnterCritical>
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006112:	b25b      	sxtb	r3, r3
 8006114:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006118:	d103      	bne.n	8006122 <vQueueWaitForMessageRestricted+0x2a>
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006128:	b25b      	sxtb	r3, r3
 800612a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800612e:	d103      	bne.n	8006138 <vQueueWaitForMessageRestricted+0x40>
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006138:	f001 fb96 	bl	8007868 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006140:	2b00      	cmp	r3, #0
 8006142:	d106      	bne.n	8006152 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	3324      	adds	r3, #36	; 0x24
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	68b9      	ldr	r1, [r7, #8]
 800614c:	4618      	mov	r0, r3
 800614e:	f000 fc2f 	bl	80069b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006152:	6978      	ldr	r0, [r7, #20]
 8006154:	f7ff ff28 	bl	8005fa8 <prvUnlockQueue>
	}
 8006158:	bf00      	nop
 800615a:	3718      	adds	r7, #24
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006160:	b580      	push	{r7, lr}
 8006162:	b08e      	sub	sp, #56	; 0x38
 8006164:	af04      	add	r7, sp, #16
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
 800616c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800616e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006170:	2b00      	cmp	r3, #0
 8006172:	d109      	bne.n	8006188 <xTaskCreateStatic+0x28>
 8006174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006178:	f383 8811 	msr	BASEPRI, r3
 800617c:	f3bf 8f6f 	isb	sy
 8006180:	f3bf 8f4f 	dsb	sy
 8006184:	623b      	str	r3, [r7, #32]
 8006186:	e7fe      	b.n	8006186 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800618a:	2b00      	cmp	r3, #0
 800618c:	d109      	bne.n	80061a2 <xTaskCreateStatic+0x42>
 800618e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006192:	f383 8811 	msr	BASEPRI, r3
 8006196:	f3bf 8f6f 	isb	sy
 800619a:	f3bf 8f4f 	dsb	sy
 800619e:	61fb      	str	r3, [r7, #28]
 80061a0:	e7fe      	b.n	80061a0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80061a2:	235c      	movs	r3, #92	; 0x5c
 80061a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	2b5c      	cmp	r3, #92	; 0x5c
 80061aa:	d009      	beq.n	80061c0 <xTaskCreateStatic+0x60>
 80061ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b0:	f383 8811 	msr	BASEPRI, r3
 80061b4:	f3bf 8f6f 	isb	sy
 80061b8:	f3bf 8f4f 	dsb	sy
 80061bc:	61bb      	str	r3, [r7, #24]
 80061be:	e7fe      	b.n	80061be <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80061c0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80061c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d01e      	beq.n	8006206 <xTaskCreateStatic+0xa6>
 80061c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d01b      	beq.n	8006206 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80061d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061d6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061da:	2202      	movs	r2, #2
 80061dc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80061e0:	2300      	movs	r3, #0
 80061e2:	9303      	str	r3, [sp, #12]
 80061e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e6:	9302      	str	r3, [sp, #8]
 80061e8:	f107 0314 	add.w	r3, r7, #20
 80061ec:	9301      	str	r3, [sp, #4]
 80061ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f0:	9300      	str	r3, [sp, #0]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	68b9      	ldr	r1, [r7, #8]
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f000 f850 	bl	800629e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006200:	f000 f8dc 	bl	80063bc <prvAddNewTaskToReadyList>
 8006204:	e001      	b.n	800620a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8006206:	2300      	movs	r3, #0
 8006208:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800620a:	697b      	ldr	r3, [r7, #20]
	}
 800620c:	4618      	mov	r0, r3
 800620e:	3728      	adds	r7, #40	; 0x28
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006214:	b580      	push	{r7, lr}
 8006216:	b08c      	sub	sp, #48	; 0x30
 8006218:	af04      	add	r7, sp, #16
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	603b      	str	r3, [r7, #0]
 8006220:	4613      	mov	r3, r2
 8006222:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006224:	88fb      	ldrh	r3, [r7, #6]
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	4618      	mov	r0, r3
 800622a:	f001 fc09 	bl	8007a40 <pvPortMalloc>
 800622e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00e      	beq.n	8006254 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006236:	205c      	movs	r0, #92	; 0x5c
 8006238:	f001 fc02 	bl	8007a40 <pvPortMalloc>
 800623c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d003      	beq.n	800624c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	631a      	str	r2, [r3, #48]	; 0x30
 800624a:	e005      	b.n	8006258 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800624c:	6978      	ldr	r0, [r7, #20]
 800624e:	f001 fcb9 	bl	8007bc4 <vPortFree>
 8006252:	e001      	b.n	8006258 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006254:	2300      	movs	r3, #0
 8006256:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d017      	beq.n	800628e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006266:	88fa      	ldrh	r2, [r7, #6]
 8006268:	2300      	movs	r3, #0
 800626a:	9303      	str	r3, [sp, #12]
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	9302      	str	r3, [sp, #8]
 8006270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006272:	9301      	str	r3, [sp, #4]
 8006274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	68b9      	ldr	r1, [r7, #8]
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f000 f80e 	bl	800629e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006282:	69f8      	ldr	r0, [r7, #28]
 8006284:	f000 f89a 	bl	80063bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006288:	2301      	movs	r3, #1
 800628a:	61bb      	str	r3, [r7, #24]
 800628c:	e002      	b.n	8006294 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800628e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006292:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006294:	69bb      	ldr	r3, [r7, #24]
	}
 8006296:	4618      	mov	r0, r3
 8006298:	3720      	adds	r7, #32
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b088      	sub	sp, #32
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	60f8      	str	r0, [r7, #12]
 80062a6:	60b9      	str	r1, [r7, #8]
 80062a8:	607a      	str	r2, [r7, #4]
 80062aa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80062ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ae:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	461a      	mov	r2, r3
 80062b6:	21a5      	movs	r1, #165	; 0xa5
 80062b8:	f001 fdc7 	bl	8007e4a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80062bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80062c6:	3b01      	subs	r3, #1
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	4413      	add	r3, r2
 80062cc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	f023 0307 	bic.w	r3, r3, #7
 80062d4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	f003 0307 	and.w	r3, r3, #7
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d009      	beq.n	80062f4 <prvInitialiseNewTask+0x56>
 80062e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	617b      	str	r3, [r7, #20]
 80062f2:	e7fe      	b.n	80062f2 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d01f      	beq.n	800633a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062fa:	2300      	movs	r3, #0
 80062fc:	61fb      	str	r3, [r7, #28]
 80062fe:	e012      	b.n	8006326 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	4413      	add	r3, r2
 8006306:	7819      	ldrb	r1, [r3, #0]
 8006308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	4413      	add	r3, r2
 800630e:	3334      	adds	r3, #52	; 0x34
 8006310:	460a      	mov	r2, r1
 8006312:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	4413      	add	r3, r2
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d006      	beq.n	800632e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	3301      	adds	r3, #1
 8006324:	61fb      	str	r3, [r7, #28]
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	2b0f      	cmp	r3, #15
 800632a:	d9e9      	bls.n	8006300 <prvInitialiseNewTask+0x62>
 800632c:	e000      	b.n	8006330 <prvInitialiseNewTask+0x92>
			{
				break;
 800632e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006332:	2200      	movs	r2, #0
 8006334:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006338:	e003      	b.n	8006342 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800633a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633c:	2200      	movs	r2, #0
 800633e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006344:	2b37      	cmp	r3, #55	; 0x37
 8006346:	d901      	bls.n	800634c <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006348:	2337      	movs	r3, #55	; 0x37
 800634a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800634c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006350:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006354:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006356:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635a:	2200      	movs	r2, #0
 800635c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800635e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006360:	3304      	adds	r3, #4
 8006362:	4618      	mov	r0, r3
 8006364:	f7ff f994 	bl	8005690 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636a:	3318      	adds	r3, #24
 800636c:	4618      	mov	r0, r3
 800636e:	f7ff f98f 	bl	8005690 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006376:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800637e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006380:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006386:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638a:	2200      	movs	r2, #0
 800638c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800638e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006390:	2200      	movs	r2, #0
 8006392:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	68f9      	ldr	r1, [r7, #12]
 800639a:	69b8      	ldr	r0, [r7, #24]
 800639c:	f001 f90c 	bl	80075b8 <pxPortInitialiseStack>
 80063a0:	4602      	mov	r2, r0
 80063a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80063a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d002      	beq.n	80063b2 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80063ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063b2:	bf00      	nop
 80063b4:	3720      	adds	r7, #32
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
	...

080063bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80063c4:	f001 fa22 	bl	800780c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80063c8:	4b2d      	ldr	r3, [pc, #180]	; (8006480 <prvAddNewTaskToReadyList+0xc4>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	3301      	adds	r3, #1
 80063ce:	4a2c      	ldr	r2, [pc, #176]	; (8006480 <prvAddNewTaskToReadyList+0xc4>)
 80063d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80063d2:	4b2c      	ldr	r3, [pc, #176]	; (8006484 <prvAddNewTaskToReadyList+0xc8>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d109      	bne.n	80063ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80063da:	4a2a      	ldr	r2, [pc, #168]	; (8006484 <prvAddNewTaskToReadyList+0xc8>)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80063e0:	4b27      	ldr	r3, [pc, #156]	; (8006480 <prvAddNewTaskToReadyList+0xc4>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d110      	bne.n	800640a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80063e8:	f000 fc08 	bl	8006bfc <prvInitialiseTaskLists>
 80063ec:	e00d      	b.n	800640a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80063ee:	4b26      	ldr	r3, [pc, #152]	; (8006488 <prvAddNewTaskToReadyList+0xcc>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d109      	bne.n	800640a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80063f6:	4b23      	ldr	r3, [pc, #140]	; (8006484 <prvAddNewTaskToReadyList+0xc8>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006400:	429a      	cmp	r2, r3
 8006402:	d802      	bhi.n	800640a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006404:	4a1f      	ldr	r2, [pc, #124]	; (8006484 <prvAddNewTaskToReadyList+0xc8>)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800640a:	4b20      	ldr	r3, [pc, #128]	; (800648c <prvAddNewTaskToReadyList+0xd0>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	3301      	adds	r3, #1
 8006410:	4a1e      	ldr	r2, [pc, #120]	; (800648c <prvAddNewTaskToReadyList+0xd0>)
 8006412:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006414:	4b1d      	ldr	r3, [pc, #116]	; (800648c <prvAddNewTaskToReadyList+0xd0>)
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006420:	4b1b      	ldr	r3, [pc, #108]	; (8006490 <prvAddNewTaskToReadyList+0xd4>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	429a      	cmp	r2, r3
 8006426:	d903      	bls.n	8006430 <prvAddNewTaskToReadyList+0x74>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642c:	4a18      	ldr	r2, [pc, #96]	; (8006490 <prvAddNewTaskToReadyList+0xd4>)
 800642e:	6013      	str	r3, [r2, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006434:	4613      	mov	r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	4413      	add	r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	4a15      	ldr	r2, [pc, #84]	; (8006494 <prvAddNewTaskToReadyList+0xd8>)
 800643e:	441a      	add	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	3304      	adds	r3, #4
 8006444:	4619      	mov	r1, r3
 8006446:	4610      	mov	r0, r2
 8006448:	f7ff f92f 	bl	80056aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800644c:	f001 fa0c 	bl	8007868 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006450:	4b0d      	ldr	r3, [pc, #52]	; (8006488 <prvAddNewTaskToReadyList+0xcc>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00e      	beq.n	8006476 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006458:	4b0a      	ldr	r3, [pc, #40]	; (8006484 <prvAddNewTaskToReadyList+0xc8>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006462:	429a      	cmp	r2, r3
 8006464:	d207      	bcs.n	8006476 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006466:	4b0c      	ldr	r3, [pc, #48]	; (8006498 <prvAddNewTaskToReadyList+0xdc>)
 8006468:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800646c:	601a      	str	r2, [r3, #0]
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006476:	bf00      	nop
 8006478:	3708      	adds	r7, #8
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	20000bf0 	.word	0x20000bf0
 8006484:	2000071c 	.word	0x2000071c
 8006488:	20000bfc 	.word	0x20000bfc
 800648c:	20000c0c 	.word	0x20000c0c
 8006490:	20000bf8 	.word	0x20000bf8
 8006494:	20000720 	.word	0x20000720
 8006498:	e000ed04 	.word	0xe000ed04

0800649c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80064a4:	2300      	movs	r3, #0
 80064a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d016      	beq.n	80064dc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80064ae:	4b13      	ldr	r3, [pc, #76]	; (80064fc <vTaskDelay+0x60>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d009      	beq.n	80064ca <vTaskDelay+0x2e>
 80064b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ba:	f383 8811 	msr	BASEPRI, r3
 80064be:	f3bf 8f6f 	isb	sy
 80064c2:	f3bf 8f4f 	dsb	sy
 80064c6:	60bb      	str	r3, [r7, #8]
 80064c8:	e7fe      	b.n	80064c8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80064ca:	f000 f87f 	bl	80065cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80064ce:	2100      	movs	r1, #0
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 fcd7 	bl	8006e84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80064d6:	f000 f887 	bl	80065e8 <xTaskResumeAll>
 80064da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d107      	bne.n	80064f2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80064e2:	4b07      	ldr	r3, [pc, #28]	; (8006500 <vTaskDelay+0x64>)
 80064e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064e8:	601a      	str	r2, [r3, #0]
 80064ea:	f3bf 8f4f 	dsb	sy
 80064ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80064f2:	bf00      	nop
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	20000c18 	.word	0x20000c18
 8006500:	e000ed04 	.word	0xe000ed04

08006504 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b08a      	sub	sp, #40	; 0x28
 8006508:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800650a:	2300      	movs	r3, #0
 800650c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800650e:	2300      	movs	r3, #0
 8006510:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006512:	463a      	mov	r2, r7
 8006514:	1d39      	adds	r1, r7, #4
 8006516:	f107 0308 	add.w	r3, r7, #8
 800651a:	4618      	mov	r0, r3
 800651c:	f7ff f864 	bl	80055e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006520:	6839      	ldr	r1, [r7, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	9202      	str	r2, [sp, #8]
 8006528:	9301      	str	r3, [sp, #4]
 800652a:	2300      	movs	r3, #0
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	2300      	movs	r3, #0
 8006530:	460a      	mov	r2, r1
 8006532:	4920      	ldr	r1, [pc, #128]	; (80065b4 <vTaskStartScheduler+0xb0>)
 8006534:	4820      	ldr	r0, [pc, #128]	; (80065b8 <vTaskStartScheduler+0xb4>)
 8006536:	f7ff fe13 	bl	8006160 <xTaskCreateStatic>
 800653a:	4602      	mov	r2, r0
 800653c:	4b1f      	ldr	r3, [pc, #124]	; (80065bc <vTaskStartScheduler+0xb8>)
 800653e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006540:	4b1e      	ldr	r3, [pc, #120]	; (80065bc <vTaskStartScheduler+0xb8>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d002      	beq.n	800654e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006548:	2301      	movs	r3, #1
 800654a:	617b      	str	r3, [r7, #20]
 800654c:	e001      	b.n	8006552 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800654e:	2300      	movs	r3, #0
 8006550:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d102      	bne.n	800655e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006558:	f000 fce8 	bl	8006f2c <xTimerCreateTimerTask>
 800655c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d115      	bne.n	8006590 <vTaskStartScheduler+0x8c>
 8006564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006568:	f383 8811 	msr	BASEPRI, r3
 800656c:	f3bf 8f6f 	isb	sy
 8006570:	f3bf 8f4f 	dsb	sy
 8006574:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006576:	4b12      	ldr	r3, [pc, #72]	; (80065c0 <vTaskStartScheduler+0xbc>)
 8006578:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800657c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800657e:	4b11      	ldr	r3, [pc, #68]	; (80065c4 <vTaskStartScheduler+0xc0>)
 8006580:	2201      	movs	r2, #1
 8006582:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006584:	4b10      	ldr	r3, [pc, #64]	; (80065c8 <vTaskStartScheduler+0xc4>)
 8006586:	2200      	movs	r2, #0
 8006588:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800658a:	f001 f8a1 	bl	80076d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800658e:	e00d      	b.n	80065ac <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006596:	d109      	bne.n	80065ac <vTaskStartScheduler+0xa8>
 8006598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659c:	f383 8811 	msr	BASEPRI, r3
 80065a0:	f3bf 8f6f 	isb	sy
 80065a4:	f3bf 8f4f 	dsb	sy
 80065a8:	60fb      	str	r3, [r7, #12]
 80065aa:	e7fe      	b.n	80065aa <vTaskStartScheduler+0xa6>
}
 80065ac:	bf00      	nop
 80065ae:	3718      	adds	r7, #24
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	08007ee0 	.word	0x08007ee0
 80065b8:	08006bcd 	.word	0x08006bcd
 80065bc:	20000c14 	.word	0x20000c14
 80065c0:	20000c10 	.word	0x20000c10
 80065c4:	20000bfc 	.word	0x20000bfc
 80065c8:	20000bf4 	.word	0x20000bf4

080065cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80065cc:	b480      	push	{r7}
 80065ce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80065d0:	4b04      	ldr	r3, [pc, #16]	; (80065e4 <vTaskSuspendAll+0x18>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	3301      	adds	r3, #1
 80065d6:	4a03      	ldr	r2, [pc, #12]	; (80065e4 <vTaskSuspendAll+0x18>)
 80065d8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80065da:	bf00      	nop
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr
 80065e4:	20000c18 	.word	0x20000c18

080065e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80065ee:	2300      	movs	r3, #0
 80065f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80065f2:	2300      	movs	r3, #0
 80065f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80065f6:	4b41      	ldr	r3, [pc, #260]	; (80066fc <xTaskResumeAll+0x114>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d109      	bne.n	8006612 <xTaskResumeAll+0x2a>
 80065fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006602:	f383 8811 	msr	BASEPRI, r3
 8006606:	f3bf 8f6f 	isb	sy
 800660a:	f3bf 8f4f 	dsb	sy
 800660e:	603b      	str	r3, [r7, #0]
 8006610:	e7fe      	b.n	8006610 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006612:	f001 f8fb 	bl	800780c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006616:	4b39      	ldr	r3, [pc, #228]	; (80066fc <xTaskResumeAll+0x114>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	3b01      	subs	r3, #1
 800661c:	4a37      	ldr	r2, [pc, #220]	; (80066fc <xTaskResumeAll+0x114>)
 800661e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006620:	4b36      	ldr	r3, [pc, #216]	; (80066fc <xTaskResumeAll+0x114>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d162      	bne.n	80066ee <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006628:	4b35      	ldr	r3, [pc, #212]	; (8006700 <xTaskResumeAll+0x118>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d05e      	beq.n	80066ee <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006630:	e02f      	b.n	8006692 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006632:	4b34      	ldr	r3, [pc, #208]	; (8006704 <xTaskResumeAll+0x11c>)
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	3318      	adds	r3, #24
 800663e:	4618      	mov	r0, r3
 8006640:	f7ff f890 	bl	8005764 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	3304      	adds	r3, #4
 8006648:	4618      	mov	r0, r3
 800664a:	f7ff f88b 	bl	8005764 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006652:	4b2d      	ldr	r3, [pc, #180]	; (8006708 <xTaskResumeAll+0x120>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	429a      	cmp	r2, r3
 8006658:	d903      	bls.n	8006662 <xTaskResumeAll+0x7a>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665e:	4a2a      	ldr	r2, [pc, #168]	; (8006708 <xTaskResumeAll+0x120>)
 8006660:	6013      	str	r3, [r2, #0]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006666:	4613      	mov	r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	4413      	add	r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4a27      	ldr	r2, [pc, #156]	; (800670c <xTaskResumeAll+0x124>)
 8006670:	441a      	add	r2, r3
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	3304      	adds	r3, #4
 8006676:	4619      	mov	r1, r3
 8006678:	4610      	mov	r0, r2
 800667a:	f7ff f816 	bl	80056aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006682:	4b23      	ldr	r3, [pc, #140]	; (8006710 <xTaskResumeAll+0x128>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006688:	429a      	cmp	r2, r3
 800668a:	d302      	bcc.n	8006692 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800668c:	4b21      	ldr	r3, [pc, #132]	; (8006714 <xTaskResumeAll+0x12c>)
 800668e:	2201      	movs	r2, #1
 8006690:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006692:	4b1c      	ldr	r3, [pc, #112]	; (8006704 <xTaskResumeAll+0x11c>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1cb      	bne.n	8006632 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d001      	beq.n	80066a4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80066a0:	f000 fb46 	bl	8006d30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80066a4:	4b1c      	ldr	r3, [pc, #112]	; (8006718 <xTaskResumeAll+0x130>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d010      	beq.n	80066d2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80066b0:	f000 f846 	bl	8006740 <xTaskIncrementTick>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d002      	beq.n	80066c0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80066ba:	4b16      	ldr	r3, [pc, #88]	; (8006714 <xTaskResumeAll+0x12c>)
 80066bc:	2201      	movs	r2, #1
 80066be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	3b01      	subs	r3, #1
 80066c4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1f1      	bne.n	80066b0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80066cc:	4b12      	ldr	r3, [pc, #72]	; (8006718 <xTaskResumeAll+0x130>)
 80066ce:	2200      	movs	r2, #0
 80066d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80066d2:	4b10      	ldr	r3, [pc, #64]	; (8006714 <xTaskResumeAll+0x12c>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d009      	beq.n	80066ee <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80066da:	2301      	movs	r3, #1
 80066dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80066de:	4b0f      	ldr	r3, [pc, #60]	; (800671c <xTaskResumeAll+0x134>)
 80066e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066ee:	f001 f8bb 	bl	8007868 <vPortExitCritical>

	return xAlreadyYielded;
 80066f2:	68bb      	ldr	r3, [r7, #8]
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	20000c18 	.word	0x20000c18
 8006700:	20000bf0 	.word	0x20000bf0
 8006704:	20000bb0 	.word	0x20000bb0
 8006708:	20000bf8 	.word	0x20000bf8
 800670c:	20000720 	.word	0x20000720
 8006710:	2000071c 	.word	0x2000071c
 8006714:	20000c04 	.word	0x20000c04
 8006718:	20000c00 	.word	0x20000c00
 800671c:	e000ed04 	.word	0xe000ed04

08006720 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006726:	4b05      	ldr	r3, [pc, #20]	; (800673c <xTaskGetTickCount+0x1c>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800672c:	687b      	ldr	r3, [r7, #4]
}
 800672e:	4618      	mov	r0, r3
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	20000bf4 	.word	0x20000bf4

08006740 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006746:	2300      	movs	r3, #0
 8006748:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800674a:	4b4e      	ldr	r3, [pc, #312]	; (8006884 <xTaskIncrementTick+0x144>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	f040 8088 	bne.w	8006864 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006754:	4b4c      	ldr	r3, [pc, #304]	; (8006888 <xTaskIncrementTick+0x148>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	3301      	adds	r3, #1
 800675a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800675c:	4a4a      	ldr	r2, [pc, #296]	; (8006888 <xTaskIncrementTick+0x148>)
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d11f      	bne.n	80067a8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006768:	4b48      	ldr	r3, [pc, #288]	; (800688c <xTaskIncrementTick+0x14c>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d009      	beq.n	8006786 <xTaskIncrementTick+0x46>
 8006772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006776:	f383 8811 	msr	BASEPRI, r3
 800677a:	f3bf 8f6f 	isb	sy
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	603b      	str	r3, [r7, #0]
 8006784:	e7fe      	b.n	8006784 <xTaskIncrementTick+0x44>
 8006786:	4b41      	ldr	r3, [pc, #260]	; (800688c <xTaskIncrementTick+0x14c>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	60fb      	str	r3, [r7, #12]
 800678c:	4b40      	ldr	r3, [pc, #256]	; (8006890 <xTaskIncrementTick+0x150>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a3e      	ldr	r2, [pc, #248]	; (800688c <xTaskIncrementTick+0x14c>)
 8006792:	6013      	str	r3, [r2, #0]
 8006794:	4a3e      	ldr	r2, [pc, #248]	; (8006890 <xTaskIncrementTick+0x150>)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6013      	str	r3, [r2, #0]
 800679a:	4b3e      	ldr	r3, [pc, #248]	; (8006894 <xTaskIncrementTick+0x154>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	3301      	adds	r3, #1
 80067a0:	4a3c      	ldr	r2, [pc, #240]	; (8006894 <xTaskIncrementTick+0x154>)
 80067a2:	6013      	str	r3, [r2, #0]
 80067a4:	f000 fac4 	bl	8006d30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80067a8:	4b3b      	ldr	r3, [pc, #236]	; (8006898 <xTaskIncrementTick+0x158>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	693a      	ldr	r2, [r7, #16]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d349      	bcc.n	8006846 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067b2:	4b36      	ldr	r3, [pc, #216]	; (800688c <xTaskIncrementTick+0x14c>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d104      	bne.n	80067c6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067bc:	4b36      	ldr	r3, [pc, #216]	; (8006898 <xTaskIncrementTick+0x158>)
 80067be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067c2:	601a      	str	r2, [r3, #0]
					break;
 80067c4:	e03f      	b.n	8006846 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067c6:	4b31      	ldr	r3, [pc, #196]	; (800688c <xTaskIncrementTick+0x14c>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80067d6:	693a      	ldr	r2, [r7, #16]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d203      	bcs.n	80067e6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80067de:	4a2e      	ldr	r2, [pc, #184]	; (8006898 <xTaskIncrementTick+0x158>)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80067e4:	e02f      	b.n	8006846 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	3304      	adds	r3, #4
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7fe ffba 	bl	8005764 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d004      	beq.n	8006802 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	3318      	adds	r3, #24
 80067fc:	4618      	mov	r0, r3
 80067fe:	f7fe ffb1 	bl	8005764 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006806:	4b25      	ldr	r3, [pc, #148]	; (800689c <xTaskIncrementTick+0x15c>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	429a      	cmp	r2, r3
 800680c:	d903      	bls.n	8006816 <xTaskIncrementTick+0xd6>
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006812:	4a22      	ldr	r2, [pc, #136]	; (800689c <xTaskIncrementTick+0x15c>)
 8006814:	6013      	str	r3, [r2, #0]
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800681a:	4613      	mov	r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	4413      	add	r3, r2
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	4a1f      	ldr	r2, [pc, #124]	; (80068a0 <xTaskIncrementTick+0x160>)
 8006824:	441a      	add	r2, r3
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	3304      	adds	r3, #4
 800682a:	4619      	mov	r1, r3
 800682c:	4610      	mov	r0, r2
 800682e:	f7fe ff3c 	bl	80056aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006836:	4b1b      	ldr	r3, [pc, #108]	; (80068a4 <xTaskIncrementTick+0x164>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683c:	429a      	cmp	r2, r3
 800683e:	d3b8      	bcc.n	80067b2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006840:	2301      	movs	r3, #1
 8006842:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006844:	e7b5      	b.n	80067b2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006846:	4b17      	ldr	r3, [pc, #92]	; (80068a4 <xTaskIncrementTick+0x164>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800684c:	4914      	ldr	r1, [pc, #80]	; (80068a0 <xTaskIncrementTick+0x160>)
 800684e:	4613      	mov	r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4413      	add	r3, r2
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	440b      	add	r3, r1
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2b01      	cmp	r3, #1
 800685c:	d907      	bls.n	800686e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800685e:	2301      	movs	r3, #1
 8006860:	617b      	str	r3, [r7, #20]
 8006862:	e004      	b.n	800686e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006864:	4b10      	ldr	r3, [pc, #64]	; (80068a8 <xTaskIncrementTick+0x168>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	3301      	adds	r3, #1
 800686a:	4a0f      	ldr	r2, [pc, #60]	; (80068a8 <xTaskIncrementTick+0x168>)
 800686c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800686e:	4b0f      	ldr	r3, [pc, #60]	; (80068ac <xTaskIncrementTick+0x16c>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d001      	beq.n	800687a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8006876:	2301      	movs	r3, #1
 8006878:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800687a:	697b      	ldr	r3, [r7, #20]
}
 800687c:	4618      	mov	r0, r3
 800687e:	3718      	adds	r7, #24
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	20000c18 	.word	0x20000c18
 8006888:	20000bf4 	.word	0x20000bf4
 800688c:	20000ba8 	.word	0x20000ba8
 8006890:	20000bac 	.word	0x20000bac
 8006894:	20000c08 	.word	0x20000c08
 8006898:	20000c10 	.word	0x20000c10
 800689c:	20000bf8 	.word	0x20000bf8
 80068a0:	20000720 	.word	0x20000720
 80068a4:	2000071c 	.word	0x2000071c
 80068a8:	20000c00 	.word	0x20000c00
 80068ac:	20000c04 	.word	0x20000c04

080068b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068b6:	4b27      	ldr	r3, [pc, #156]	; (8006954 <vTaskSwitchContext+0xa4>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d003      	beq.n	80068c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80068be:	4b26      	ldr	r3, [pc, #152]	; (8006958 <vTaskSwitchContext+0xa8>)
 80068c0:	2201      	movs	r2, #1
 80068c2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80068c4:	e040      	b.n	8006948 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80068c6:	4b24      	ldr	r3, [pc, #144]	; (8006958 <vTaskSwitchContext+0xa8>)
 80068c8:	2200      	movs	r2, #0
 80068ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068cc:	4b23      	ldr	r3, [pc, #140]	; (800695c <vTaskSwitchContext+0xac>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	60fb      	str	r3, [r7, #12]
 80068d2:	e00f      	b.n	80068f4 <vTaskSwitchContext+0x44>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d109      	bne.n	80068ee <vTaskSwitchContext+0x3e>
 80068da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068de:	f383 8811 	msr	BASEPRI, r3
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	607b      	str	r3, [r7, #4]
 80068ec:	e7fe      	b.n	80068ec <vTaskSwitchContext+0x3c>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	3b01      	subs	r3, #1
 80068f2:	60fb      	str	r3, [r7, #12]
 80068f4:	491a      	ldr	r1, [pc, #104]	; (8006960 <vTaskSwitchContext+0xb0>)
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	4613      	mov	r3, r2
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	4413      	add	r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	440b      	add	r3, r1
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d0e5      	beq.n	80068d4 <vTaskSwitchContext+0x24>
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	4613      	mov	r3, r2
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	4413      	add	r3, r2
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	4a13      	ldr	r2, [pc, #76]	; (8006960 <vTaskSwitchContext+0xb0>)
 8006914:	4413      	add	r3, r2
 8006916:	60bb      	str	r3, [r7, #8]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	685a      	ldr	r2, [r3, #4]
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	605a      	str	r2, [r3, #4]
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	685a      	ldr	r2, [r3, #4]
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	3308      	adds	r3, #8
 800692a:	429a      	cmp	r2, r3
 800692c:	d104      	bne.n	8006938 <vTaskSwitchContext+0x88>
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	685a      	ldr	r2, [r3, #4]
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	605a      	str	r2, [r3, #4]
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	4a09      	ldr	r2, [pc, #36]	; (8006964 <vTaskSwitchContext+0xb4>)
 8006940:	6013      	str	r3, [r2, #0]
 8006942:	4a06      	ldr	r2, [pc, #24]	; (800695c <vTaskSwitchContext+0xac>)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6013      	str	r3, [r2, #0]
}
 8006948:	bf00      	nop
 800694a:	3714      	adds	r7, #20
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr
 8006954:	20000c18 	.word	0x20000c18
 8006958:	20000c04 	.word	0x20000c04
 800695c:	20000bf8 	.word	0x20000bf8
 8006960:	20000720 	.word	0x20000720
 8006964:	2000071c 	.word	0x2000071c

08006968 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d109      	bne.n	800698c <vTaskPlaceOnEventList+0x24>
 8006978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697c:	f383 8811 	msr	BASEPRI, r3
 8006980:	f3bf 8f6f 	isb	sy
 8006984:	f3bf 8f4f 	dsb	sy
 8006988:	60fb      	str	r3, [r7, #12]
 800698a:	e7fe      	b.n	800698a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800698c:	4b07      	ldr	r3, [pc, #28]	; (80069ac <vTaskPlaceOnEventList+0x44>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	3318      	adds	r3, #24
 8006992:	4619      	mov	r1, r3
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f7fe feac 	bl	80056f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800699a:	2101      	movs	r1, #1
 800699c:	6838      	ldr	r0, [r7, #0]
 800699e:	f000 fa71 	bl	8006e84 <prvAddCurrentTaskToDelayedList>
}
 80069a2:	bf00      	nop
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	2000071c 	.word	0x2000071c

080069b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d109      	bne.n	80069d6 <vTaskPlaceOnEventListRestricted+0x26>
 80069c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c6:	f383 8811 	msr	BASEPRI, r3
 80069ca:	f3bf 8f6f 	isb	sy
 80069ce:	f3bf 8f4f 	dsb	sy
 80069d2:	617b      	str	r3, [r7, #20]
 80069d4:	e7fe      	b.n	80069d4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069d6:	4b0a      	ldr	r3, [pc, #40]	; (8006a00 <vTaskPlaceOnEventListRestricted+0x50>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	3318      	adds	r3, #24
 80069dc:	4619      	mov	r1, r3
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f7fe fe63 	bl	80056aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d002      	beq.n	80069f0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80069ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069ee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80069f0:	6879      	ldr	r1, [r7, #4]
 80069f2:	68b8      	ldr	r0, [r7, #8]
 80069f4:	f000 fa46 	bl	8006e84 <prvAddCurrentTaskToDelayedList>
	}
 80069f8:	bf00      	nop
 80069fa:	3718      	adds	r7, #24
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	2000071c 	.word	0x2000071c

08006a04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b086      	sub	sp, #24
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d109      	bne.n	8006a2e <xTaskRemoveFromEventList+0x2a>
 8006a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1e:	f383 8811 	msr	BASEPRI, r3
 8006a22:	f3bf 8f6f 	isb	sy
 8006a26:	f3bf 8f4f 	dsb	sy
 8006a2a:	60fb      	str	r3, [r7, #12]
 8006a2c:	e7fe      	b.n	8006a2c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	3318      	adds	r3, #24
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7fe fe96 	bl	8005764 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a38:	4b1d      	ldr	r3, [pc, #116]	; (8006ab0 <xTaskRemoveFromEventList+0xac>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d11d      	bne.n	8006a7c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	3304      	adds	r3, #4
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7fe fe8d 	bl	8005764 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a4e:	4b19      	ldr	r3, [pc, #100]	; (8006ab4 <xTaskRemoveFromEventList+0xb0>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d903      	bls.n	8006a5e <xTaskRemoveFromEventList+0x5a>
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5a:	4a16      	ldr	r2, [pc, #88]	; (8006ab4 <xTaskRemoveFromEventList+0xb0>)
 8006a5c:	6013      	str	r3, [r2, #0]
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a62:	4613      	mov	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	4413      	add	r3, r2
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	4a13      	ldr	r2, [pc, #76]	; (8006ab8 <xTaskRemoveFromEventList+0xb4>)
 8006a6c:	441a      	add	r2, r3
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	3304      	adds	r3, #4
 8006a72:	4619      	mov	r1, r3
 8006a74:	4610      	mov	r0, r2
 8006a76:	f7fe fe18 	bl	80056aa <vListInsertEnd>
 8006a7a:	e005      	b.n	8006a88 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	3318      	adds	r3, #24
 8006a80:	4619      	mov	r1, r3
 8006a82:	480e      	ldr	r0, [pc, #56]	; (8006abc <xTaskRemoveFromEventList+0xb8>)
 8006a84:	f7fe fe11 	bl	80056aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a8c:	4b0c      	ldr	r3, [pc, #48]	; (8006ac0 <xTaskRemoveFromEventList+0xbc>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d905      	bls.n	8006aa2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006a96:	2301      	movs	r3, #1
 8006a98:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006a9a:	4b0a      	ldr	r3, [pc, #40]	; (8006ac4 <xTaskRemoveFromEventList+0xc0>)
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	601a      	str	r2, [r3, #0]
 8006aa0:	e001      	b.n	8006aa6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006aa6:	697b      	ldr	r3, [r7, #20]
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3718      	adds	r7, #24
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	20000c18 	.word	0x20000c18
 8006ab4:	20000bf8 	.word	0x20000bf8
 8006ab8:	20000720 	.word	0x20000720
 8006abc:	20000bb0 	.word	0x20000bb0
 8006ac0:	2000071c 	.word	0x2000071c
 8006ac4:	20000c04 	.word	0x20000c04

08006ac8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ad0:	4b06      	ldr	r3, [pc, #24]	; (8006aec <vTaskInternalSetTimeOutState+0x24>)
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006ad8:	4b05      	ldr	r3, [pc, #20]	; (8006af0 <vTaskInternalSetTimeOutState+0x28>)
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	605a      	str	r2, [r3, #4]
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr
 8006aec:	20000c08 	.word	0x20000c08
 8006af0:	20000bf4 	.word	0x20000bf4

08006af4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b088      	sub	sp, #32
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d109      	bne.n	8006b18 <xTaskCheckForTimeOut+0x24>
 8006b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b08:	f383 8811 	msr	BASEPRI, r3
 8006b0c:	f3bf 8f6f 	isb	sy
 8006b10:	f3bf 8f4f 	dsb	sy
 8006b14:	613b      	str	r3, [r7, #16]
 8006b16:	e7fe      	b.n	8006b16 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d109      	bne.n	8006b32 <xTaskCheckForTimeOut+0x3e>
 8006b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b22:	f383 8811 	msr	BASEPRI, r3
 8006b26:	f3bf 8f6f 	isb	sy
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	60fb      	str	r3, [r7, #12]
 8006b30:	e7fe      	b.n	8006b30 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006b32:	f000 fe6b 	bl	800780c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b36:	4b1d      	ldr	r3, [pc, #116]	; (8006bac <xTaskCheckForTimeOut+0xb8>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	69ba      	ldr	r2, [r7, #24]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b4e:	d102      	bne.n	8006b56 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b50:	2300      	movs	r3, #0
 8006b52:	61fb      	str	r3, [r7, #28]
 8006b54:	e023      	b.n	8006b9e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	4b15      	ldr	r3, [pc, #84]	; (8006bb0 <xTaskCheckForTimeOut+0xbc>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d007      	beq.n	8006b72 <xTaskCheckForTimeOut+0x7e>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	69ba      	ldr	r2, [r7, #24]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d302      	bcc.n	8006b72 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	61fb      	str	r3, [r7, #28]
 8006b70:	e015      	b.n	8006b9e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d20b      	bcs.n	8006b94 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	1ad2      	subs	r2, r2, r3
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f7ff ff9d 	bl	8006ac8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	61fb      	str	r3, [r7, #28]
 8006b92:	e004      	b.n	8006b9e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	2200      	movs	r2, #0
 8006b98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006b9e:	f000 fe63 	bl	8007868 <vPortExitCritical>

	return xReturn;
 8006ba2:	69fb      	ldr	r3, [r7, #28]
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3720      	adds	r7, #32
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	20000bf4 	.word	0x20000bf4
 8006bb0:	20000c08 	.word	0x20000c08

08006bb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006bb8:	4b03      	ldr	r3, [pc, #12]	; (8006bc8 <vTaskMissedYield+0x14>)
 8006bba:	2201      	movs	r2, #1
 8006bbc:	601a      	str	r2, [r3, #0]
}
 8006bbe:	bf00      	nop
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr
 8006bc8:	20000c04 	.word	0x20000c04

08006bcc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006bd4:	f000 f852 	bl	8006c7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006bd8:	4b06      	ldr	r3, [pc, #24]	; (8006bf4 <prvIdleTask+0x28>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d9f9      	bls.n	8006bd4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006be0:	4b05      	ldr	r3, [pc, #20]	; (8006bf8 <prvIdleTask+0x2c>)
 8006be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006be6:	601a      	str	r2, [r3, #0]
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006bf0:	e7f0      	b.n	8006bd4 <prvIdleTask+0x8>
 8006bf2:	bf00      	nop
 8006bf4:	20000720 	.word	0x20000720
 8006bf8:	e000ed04 	.word	0xe000ed04

08006bfc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c02:	2300      	movs	r3, #0
 8006c04:	607b      	str	r3, [r7, #4]
 8006c06:	e00c      	b.n	8006c22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	4613      	mov	r3, r2
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	4413      	add	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4a12      	ldr	r2, [pc, #72]	; (8006c5c <prvInitialiseTaskLists+0x60>)
 8006c14:	4413      	add	r3, r2
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7fe fd1a 	bl	8005650 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	607b      	str	r3, [r7, #4]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2b37      	cmp	r3, #55	; 0x37
 8006c26:	d9ef      	bls.n	8006c08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c28:	480d      	ldr	r0, [pc, #52]	; (8006c60 <prvInitialiseTaskLists+0x64>)
 8006c2a:	f7fe fd11 	bl	8005650 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c2e:	480d      	ldr	r0, [pc, #52]	; (8006c64 <prvInitialiseTaskLists+0x68>)
 8006c30:	f7fe fd0e 	bl	8005650 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c34:	480c      	ldr	r0, [pc, #48]	; (8006c68 <prvInitialiseTaskLists+0x6c>)
 8006c36:	f7fe fd0b 	bl	8005650 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c3a:	480c      	ldr	r0, [pc, #48]	; (8006c6c <prvInitialiseTaskLists+0x70>)
 8006c3c:	f7fe fd08 	bl	8005650 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c40:	480b      	ldr	r0, [pc, #44]	; (8006c70 <prvInitialiseTaskLists+0x74>)
 8006c42:	f7fe fd05 	bl	8005650 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c46:	4b0b      	ldr	r3, [pc, #44]	; (8006c74 <prvInitialiseTaskLists+0x78>)
 8006c48:	4a05      	ldr	r2, [pc, #20]	; (8006c60 <prvInitialiseTaskLists+0x64>)
 8006c4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c4c:	4b0a      	ldr	r3, [pc, #40]	; (8006c78 <prvInitialiseTaskLists+0x7c>)
 8006c4e:	4a05      	ldr	r2, [pc, #20]	; (8006c64 <prvInitialiseTaskLists+0x68>)
 8006c50:	601a      	str	r2, [r3, #0]
}
 8006c52:	bf00      	nop
 8006c54:	3708      	adds	r7, #8
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	20000720 	.word	0x20000720
 8006c60:	20000b80 	.word	0x20000b80
 8006c64:	20000b94 	.word	0x20000b94
 8006c68:	20000bb0 	.word	0x20000bb0
 8006c6c:	20000bc4 	.word	0x20000bc4
 8006c70:	20000bdc 	.word	0x20000bdc
 8006c74:	20000ba8 	.word	0x20000ba8
 8006c78:	20000bac 	.word	0x20000bac

08006c7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c82:	e019      	b.n	8006cb8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c84:	f000 fdc2 	bl	800780c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c88:	4b0f      	ldr	r3, [pc, #60]	; (8006cc8 <prvCheckTasksWaitingTermination+0x4c>)
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	3304      	adds	r3, #4
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7fe fd65 	bl	8005764 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c9a:	4b0c      	ldr	r3, [pc, #48]	; (8006ccc <prvCheckTasksWaitingTermination+0x50>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	4a0a      	ldr	r2, [pc, #40]	; (8006ccc <prvCheckTasksWaitingTermination+0x50>)
 8006ca2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ca4:	4b0a      	ldr	r3, [pc, #40]	; (8006cd0 <prvCheckTasksWaitingTermination+0x54>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	4a09      	ldr	r2, [pc, #36]	; (8006cd0 <prvCheckTasksWaitingTermination+0x54>)
 8006cac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006cae:	f000 fddb 	bl	8007868 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f80e 	bl	8006cd4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006cb8:	4b05      	ldr	r3, [pc, #20]	; (8006cd0 <prvCheckTasksWaitingTermination+0x54>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1e1      	bne.n	8006c84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006cc0:	bf00      	nop
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	20000bc4 	.word	0x20000bc4
 8006ccc:	20000bf0 	.word	0x20000bf0
 8006cd0:	20000bd8 	.word	0x20000bd8

08006cd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d108      	bne.n	8006cf8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cea:	4618      	mov	r0, r3
 8006cec:	f000 ff6a 	bl	8007bc4 <vPortFree>
				vPortFree( pxTCB );
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 ff67 	bl	8007bc4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006cf6:	e017      	b.n	8006d28 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d103      	bne.n	8006d0a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 ff5e 	bl	8007bc4 <vPortFree>
	}
 8006d08:	e00e      	b.n	8006d28 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	d009      	beq.n	8006d28 <prvDeleteTCB+0x54>
 8006d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d18:	f383 8811 	msr	BASEPRI, r3
 8006d1c:	f3bf 8f6f 	isb	sy
 8006d20:	f3bf 8f4f 	dsb	sy
 8006d24:	60fb      	str	r3, [r7, #12]
 8006d26:	e7fe      	b.n	8006d26 <prvDeleteTCB+0x52>
	}
 8006d28:	bf00      	nop
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d36:	4b0c      	ldr	r3, [pc, #48]	; (8006d68 <prvResetNextTaskUnblockTime+0x38>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d104      	bne.n	8006d4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d40:	4b0a      	ldr	r3, [pc, #40]	; (8006d6c <prvResetNextTaskUnblockTime+0x3c>)
 8006d42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d48:	e008      	b.n	8006d5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d4a:	4b07      	ldr	r3, [pc, #28]	; (8006d68 <prvResetNextTaskUnblockTime+0x38>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	4a04      	ldr	r2, [pc, #16]	; (8006d6c <prvResetNextTaskUnblockTime+0x3c>)
 8006d5a:	6013      	str	r3, [r2, #0]
}
 8006d5c:	bf00      	nop
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr
 8006d68:	20000ba8 	.word	0x20000ba8
 8006d6c:	20000c10 	.word	0x20000c10

08006d70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d76:	4b0b      	ldr	r3, [pc, #44]	; (8006da4 <xTaskGetSchedulerState+0x34>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d102      	bne.n	8006d84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	607b      	str	r3, [r7, #4]
 8006d82:	e008      	b.n	8006d96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d84:	4b08      	ldr	r3, [pc, #32]	; (8006da8 <xTaskGetSchedulerState+0x38>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d102      	bne.n	8006d92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006d8c:	2302      	movs	r3, #2
 8006d8e:	607b      	str	r3, [r7, #4]
 8006d90:	e001      	b.n	8006d96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006d92:	2300      	movs	r3, #0
 8006d94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006d96:	687b      	ldr	r3, [r7, #4]
	}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr
 8006da4:	20000bfc 	.word	0x20000bfc
 8006da8:	20000c18 	.word	0x20000c18

08006dac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b086      	sub	sp, #24
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006db8:	2300      	movs	r3, #0
 8006dba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d054      	beq.n	8006e6c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006dc2:	4b2d      	ldr	r3, [pc, #180]	; (8006e78 <xTaskPriorityDisinherit+0xcc>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d009      	beq.n	8006de0 <xTaskPriorityDisinherit+0x34>
 8006dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd0:	f383 8811 	msr	BASEPRI, r3
 8006dd4:	f3bf 8f6f 	isb	sy
 8006dd8:	f3bf 8f4f 	dsb	sy
 8006ddc:	60fb      	str	r3, [r7, #12]
 8006dde:	e7fe      	b.n	8006dde <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d109      	bne.n	8006dfc <xTaskPriorityDisinherit+0x50>
 8006de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dec:	f383 8811 	msr	BASEPRI, r3
 8006df0:	f3bf 8f6f 	isb	sy
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	60bb      	str	r3, [r7, #8]
 8006dfa:	e7fe      	b.n	8006dfa <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e00:	1e5a      	subs	r2, r3, #1
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d02c      	beq.n	8006e6c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d128      	bne.n	8006e6c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	3304      	adds	r3, #4
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7fe fca0 	bl	8005764 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e30:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e3c:	4b0f      	ldr	r3, [pc, #60]	; (8006e7c <xTaskPriorityDisinherit+0xd0>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d903      	bls.n	8006e4c <xTaskPriorityDisinherit+0xa0>
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e48:	4a0c      	ldr	r2, [pc, #48]	; (8006e7c <xTaskPriorityDisinherit+0xd0>)
 8006e4a:	6013      	str	r3, [r2, #0]
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e50:	4613      	mov	r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	4413      	add	r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	4a09      	ldr	r2, [pc, #36]	; (8006e80 <xTaskPriorityDisinherit+0xd4>)
 8006e5a:	441a      	add	r2, r3
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	3304      	adds	r3, #4
 8006e60:	4619      	mov	r1, r3
 8006e62:	4610      	mov	r0, r2
 8006e64:	f7fe fc21 	bl	80056aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e6c:	697b      	ldr	r3, [r7, #20]
	}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3718      	adds	r7, #24
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	2000071c 	.word	0x2000071c
 8006e7c:	20000bf8 	.word	0x20000bf8
 8006e80:	20000720 	.word	0x20000720

08006e84 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006e8e:	4b21      	ldr	r3, [pc, #132]	; (8006f14 <prvAddCurrentTaskToDelayedList+0x90>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e94:	4b20      	ldr	r3, [pc, #128]	; (8006f18 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	3304      	adds	r3, #4
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7fe fc62 	bl	8005764 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ea6:	d10a      	bne.n	8006ebe <prvAddCurrentTaskToDelayedList+0x3a>
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d007      	beq.n	8006ebe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eae:	4b1a      	ldr	r3, [pc, #104]	; (8006f18 <prvAddCurrentTaskToDelayedList+0x94>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	3304      	adds	r3, #4
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	4819      	ldr	r0, [pc, #100]	; (8006f1c <prvAddCurrentTaskToDelayedList+0x98>)
 8006eb8:	f7fe fbf7 	bl	80056aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006ebc:	e026      	b.n	8006f0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ec6:	4b14      	ldr	r3, [pc, #80]	; (8006f18 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d209      	bcs.n	8006eea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ed6:	4b12      	ldr	r3, [pc, #72]	; (8006f20 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	4b0f      	ldr	r3, [pc, #60]	; (8006f18 <prvAddCurrentTaskToDelayedList+0x94>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	3304      	adds	r3, #4
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	4610      	mov	r0, r2
 8006ee4:	f7fe fc05 	bl	80056f2 <vListInsert>
}
 8006ee8:	e010      	b.n	8006f0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eea:	4b0e      	ldr	r3, [pc, #56]	; (8006f24 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	4b0a      	ldr	r3, [pc, #40]	; (8006f18 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	3304      	adds	r3, #4
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	4610      	mov	r0, r2
 8006ef8:	f7fe fbfb 	bl	80056f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006efc:	4b0a      	ldr	r3, [pc, #40]	; (8006f28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d202      	bcs.n	8006f0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006f06:	4a08      	ldr	r2, [pc, #32]	; (8006f28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	6013      	str	r3, [r2, #0]
}
 8006f0c:	bf00      	nop
 8006f0e:	3710      	adds	r7, #16
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	20000bf4 	.word	0x20000bf4
 8006f18:	2000071c 	.word	0x2000071c
 8006f1c:	20000bdc 	.word	0x20000bdc
 8006f20:	20000bac 	.word	0x20000bac
 8006f24:	20000ba8 	.word	0x20000ba8
 8006f28:	20000c10 	.word	0x20000c10

08006f2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b08a      	sub	sp, #40	; 0x28
 8006f30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006f32:	2300      	movs	r3, #0
 8006f34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006f36:	f000 faff 	bl	8007538 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006f3a:	4b1c      	ldr	r3, [pc, #112]	; (8006fac <xTimerCreateTimerTask+0x80>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d021      	beq.n	8006f86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f42:	2300      	movs	r3, #0
 8006f44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f46:	2300      	movs	r3, #0
 8006f48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f4a:	1d3a      	adds	r2, r7, #4
 8006f4c:	f107 0108 	add.w	r1, r7, #8
 8006f50:	f107 030c 	add.w	r3, r7, #12
 8006f54:	4618      	mov	r0, r3
 8006f56:	f7fe fb61 	bl	800561c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006f5a:	6879      	ldr	r1, [r7, #4]
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	9202      	str	r2, [sp, #8]
 8006f62:	9301      	str	r3, [sp, #4]
 8006f64:	2302      	movs	r3, #2
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	2300      	movs	r3, #0
 8006f6a:	460a      	mov	r2, r1
 8006f6c:	4910      	ldr	r1, [pc, #64]	; (8006fb0 <xTimerCreateTimerTask+0x84>)
 8006f6e:	4811      	ldr	r0, [pc, #68]	; (8006fb4 <xTimerCreateTimerTask+0x88>)
 8006f70:	f7ff f8f6 	bl	8006160 <xTaskCreateStatic>
 8006f74:	4602      	mov	r2, r0
 8006f76:	4b10      	ldr	r3, [pc, #64]	; (8006fb8 <xTimerCreateTimerTask+0x8c>)
 8006f78:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006f7a:	4b0f      	ldr	r3, [pc, #60]	; (8006fb8 <xTimerCreateTimerTask+0x8c>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d001      	beq.n	8006f86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006f82:	2301      	movs	r3, #1
 8006f84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d109      	bne.n	8006fa0 <xTimerCreateTimerTask+0x74>
 8006f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f90:	f383 8811 	msr	BASEPRI, r3
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	613b      	str	r3, [r7, #16]
 8006f9e:	e7fe      	b.n	8006f9e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006fa0:	697b      	ldr	r3, [r7, #20]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3718      	adds	r7, #24
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	20000c4c 	.word	0x20000c4c
 8006fb0:	08007ee8 	.word	0x08007ee8
 8006fb4:	080070ed 	.word	0x080070ed
 8006fb8:	20000c50 	.word	0x20000c50

08006fbc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b08a      	sub	sp, #40	; 0x28
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
 8006fc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d109      	bne.n	8006fe8 <xTimerGenericCommand+0x2c>
 8006fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd8:	f383 8811 	msr	BASEPRI, r3
 8006fdc:	f3bf 8f6f 	isb	sy
 8006fe0:	f3bf 8f4f 	dsb	sy
 8006fe4:	623b      	str	r3, [r7, #32]
 8006fe6:	e7fe      	b.n	8006fe6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006fe8:	4b19      	ldr	r3, [pc, #100]	; (8007050 <xTimerGenericCommand+0x94>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d02a      	beq.n	8007046 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	2b05      	cmp	r3, #5
 8007000:	dc18      	bgt.n	8007034 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007002:	f7ff feb5 	bl	8006d70 <xTaskGetSchedulerState>
 8007006:	4603      	mov	r3, r0
 8007008:	2b02      	cmp	r3, #2
 800700a:	d109      	bne.n	8007020 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800700c:	4b10      	ldr	r3, [pc, #64]	; (8007050 <xTimerGenericCommand+0x94>)
 800700e:	6818      	ldr	r0, [r3, #0]
 8007010:	f107 0110 	add.w	r1, r7, #16
 8007014:	2300      	movs	r3, #0
 8007016:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007018:	f7fe fccc 	bl	80059b4 <xQueueGenericSend>
 800701c:	6278      	str	r0, [r7, #36]	; 0x24
 800701e:	e012      	b.n	8007046 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007020:	4b0b      	ldr	r3, [pc, #44]	; (8007050 <xTimerGenericCommand+0x94>)
 8007022:	6818      	ldr	r0, [r3, #0]
 8007024:	f107 0110 	add.w	r1, r7, #16
 8007028:	2300      	movs	r3, #0
 800702a:	2200      	movs	r2, #0
 800702c:	f7fe fcc2 	bl	80059b4 <xQueueGenericSend>
 8007030:	6278      	str	r0, [r7, #36]	; 0x24
 8007032:	e008      	b.n	8007046 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007034:	4b06      	ldr	r3, [pc, #24]	; (8007050 <xTimerGenericCommand+0x94>)
 8007036:	6818      	ldr	r0, [r3, #0]
 8007038:	f107 0110 	add.w	r1, r7, #16
 800703c:	2300      	movs	r3, #0
 800703e:	683a      	ldr	r2, [r7, #0]
 8007040:	f7fe fdb2 	bl	8005ba8 <xQueueGenericSendFromISR>
 8007044:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007048:	4618      	mov	r0, r3
 800704a:	3728      	adds	r7, #40	; 0x28
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	20000c4c 	.word	0x20000c4c

08007054 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b088      	sub	sp, #32
 8007058:	af02      	add	r7, sp, #8
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800705e:	4b22      	ldr	r3, [pc, #136]	; (80070e8 <prvProcessExpiredTimer+0x94>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	3304      	adds	r3, #4
 800706c:	4618      	mov	r0, r3
 800706e:	f7fe fb79 	bl	8005764 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007078:	f003 0304 	and.w	r3, r3, #4
 800707c:	2b00      	cmp	r3, #0
 800707e:	d021      	beq.n	80070c4 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	699a      	ldr	r2, [r3, #24]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	18d1      	adds	r1, r2, r3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	6978      	ldr	r0, [r7, #20]
 800708e:	f000 f8d1 	bl	8007234 <prvInsertTimerInActiveList>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d01e      	beq.n	80070d6 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007098:	2300      	movs	r3, #0
 800709a:	9300      	str	r3, [sp, #0]
 800709c:	2300      	movs	r3, #0
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	2100      	movs	r1, #0
 80070a2:	6978      	ldr	r0, [r7, #20]
 80070a4:	f7ff ff8a 	bl	8006fbc <xTimerGenericCommand>
 80070a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d112      	bne.n	80070d6 <prvProcessExpiredTimer+0x82>
 80070b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b4:	f383 8811 	msr	BASEPRI, r3
 80070b8:	f3bf 8f6f 	isb	sy
 80070bc:	f3bf 8f4f 	dsb	sy
 80070c0:	60fb      	str	r3, [r7, #12]
 80070c2:	e7fe      	b.n	80070c2 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070ca:	f023 0301 	bic.w	r3, r3, #1
 80070ce:	b2da      	uxtb	r2, r3
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	6978      	ldr	r0, [r7, #20]
 80070dc:	4798      	blx	r3
}
 80070de:	bf00      	nop
 80070e0:	3718      	adds	r7, #24
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	20000c44 	.word	0x20000c44

080070ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80070f4:	f107 0308 	add.w	r3, r7, #8
 80070f8:	4618      	mov	r0, r3
 80070fa:	f000 f857 	bl	80071ac <prvGetNextExpireTime>
 80070fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	4619      	mov	r1, r3
 8007104:	68f8      	ldr	r0, [r7, #12]
 8007106:	f000 f803 	bl	8007110 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800710a:	f000 f8d5 	bl	80072b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800710e:	e7f1      	b.n	80070f4 <prvTimerTask+0x8>

08007110 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800711a:	f7ff fa57 	bl	80065cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800711e:	f107 0308 	add.w	r3, r7, #8
 8007122:	4618      	mov	r0, r3
 8007124:	f000 f866 	bl	80071f4 <prvSampleTimeNow>
 8007128:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d130      	bne.n	8007192 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d10a      	bne.n	800714c <prvProcessTimerOrBlockTask+0x3c>
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	429a      	cmp	r2, r3
 800713c:	d806      	bhi.n	800714c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800713e:	f7ff fa53 	bl	80065e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007142:	68f9      	ldr	r1, [r7, #12]
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f7ff ff85 	bl	8007054 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800714a:	e024      	b.n	8007196 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d008      	beq.n	8007164 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007152:	4b13      	ldr	r3, [pc, #76]	; (80071a0 <prvProcessTimerOrBlockTask+0x90>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d101      	bne.n	8007160 <prvProcessTimerOrBlockTask+0x50>
 800715c:	2301      	movs	r3, #1
 800715e:	e000      	b.n	8007162 <prvProcessTimerOrBlockTask+0x52>
 8007160:	2300      	movs	r3, #0
 8007162:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007164:	4b0f      	ldr	r3, [pc, #60]	; (80071a4 <prvProcessTimerOrBlockTask+0x94>)
 8007166:	6818      	ldr	r0, [r3, #0]
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	4619      	mov	r1, r3
 8007172:	f7fe ffc1 	bl	80060f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007176:	f7ff fa37 	bl	80065e8 <xTaskResumeAll>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10a      	bne.n	8007196 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007180:	4b09      	ldr	r3, [pc, #36]	; (80071a8 <prvProcessTimerOrBlockTask+0x98>)
 8007182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007186:	601a      	str	r2, [r3, #0]
 8007188:	f3bf 8f4f 	dsb	sy
 800718c:	f3bf 8f6f 	isb	sy
}
 8007190:	e001      	b.n	8007196 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007192:	f7ff fa29 	bl	80065e8 <xTaskResumeAll>
}
 8007196:	bf00      	nop
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	20000c48 	.word	0x20000c48
 80071a4:	20000c4c 	.word	0x20000c4c
 80071a8:	e000ed04 	.word	0xe000ed04

080071ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80071b4:	4b0e      	ldr	r3, [pc, #56]	; (80071f0 <prvGetNextExpireTime+0x44>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d101      	bne.n	80071c2 <prvGetNextExpireTime+0x16>
 80071be:	2201      	movs	r2, #1
 80071c0:	e000      	b.n	80071c4 <prvGetNextExpireTime+0x18>
 80071c2:	2200      	movs	r2, #0
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d105      	bne.n	80071dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071d0:	4b07      	ldr	r3, [pc, #28]	; (80071f0 <prvGetNextExpireTime+0x44>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	60fb      	str	r3, [r7, #12]
 80071da:	e001      	b.n	80071e0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80071dc:	2300      	movs	r3, #0
 80071de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80071e0:	68fb      	ldr	r3, [r7, #12]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3714      	adds	r7, #20
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	20000c44 	.word	0x20000c44

080071f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80071fc:	f7ff fa90 	bl	8006720 <xTaskGetTickCount>
 8007200:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007202:	4b0b      	ldr	r3, [pc, #44]	; (8007230 <prvSampleTimeNow+0x3c>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	429a      	cmp	r2, r3
 800720a:	d205      	bcs.n	8007218 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800720c:	f000 f930 	bl	8007470 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	601a      	str	r2, [r3, #0]
 8007216:	e002      	b.n	800721e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800721e:	4a04      	ldr	r2, [pc, #16]	; (8007230 <prvSampleTimeNow+0x3c>)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007224:	68fb      	ldr	r3, [r7, #12]
}
 8007226:	4618      	mov	r0, r3
 8007228:	3710      	adds	r7, #16
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	20000c54 	.word	0x20000c54

08007234 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b086      	sub	sp, #24
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
 8007240:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007242:	2300      	movs	r3, #0
 8007244:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	68ba      	ldr	r2, [r7, #8]
 800724a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007252:	68ba      	ldr	r2, [r7, #8]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	429a      	cmp	r2, r3
 8007258:	d812      	bhi.n	8007280 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	1ad2      	subs	r2, r2, r3
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	699b      	ldr	r3, [r3, #24]
 8007264:	429a      	cmp	r2, r3
 8007266:	d302      	bcc.n	800726e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007268:	2301      	movs	r3, #1
 800726a:	617b      	str	r3, [r7, #20]
 800726c:	e01b      	b.n	80072a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800726e:	4b10      	ldr	r3, [pc, #64]	; (80072b0 <prvInsertTimerInActiveList+0x7c>)
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	3304      	adds	r3, #4
 8007276:	4619      	mov	r1, r3
 8007278:	4610      	mov	r0, r2
 800727a:	f7fe fa3a 	bl	80056f2 <vListInsert>
 800727e:	e012      	b.n	80072a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	429a      	cmp	r2, r3
 8007286:	d206      	bcs.n	8007296 <prvInsertTimerInActiveList+0x62>
 8007288:	68ba      	ldr	r2, [r7, #8]
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	429a      	cmp	r2, r3
 800728e:	d302      	bcc.n	8007296 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007290:	2301      	movs	r3, #1
 8007292:	617b      	str	r3, [r7, #20]
 8007294:	e007      	b.n	80072a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007296:	4b07      	ldr	r3, [pc, #28]	; (80072b4 <prvInsertTimerInActiveList+0x80>)
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	3304      	adds	r3, #4
 800729e:	4619      	mov	r1, r3
 80072a0:	4610      	mov	r0, r2
 80072a2:	f7fe fa26 	bl	80056f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80072a6:	697b      	ldr	r3, [r7, #20]
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3718      	adds	r7, #24
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	20000c48 	.word	0x20000c48
 80072b4:	20000c44 	.word	0x20000c44

080072b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b08e      	sub	sp, #56	; 0x38
 80072bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80072be:	e0c6      	b.n	800744e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	da17      	bge.n	80072f6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80072c6:	1d3b      	adds	r3, r7, #4
 80072c8:	3304      	adds	r3, #4
 80072ca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80072cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d109      	bne.n	80072e6 <prvProcessReceivedCommands+0x2e>
 80072d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d6:	f383 8811 	msr	BASEPRI, r3
 80072da:	f3bf 8f6f 	isb	sy
 80072de:	f3bf 8f4f 	dsb	sy
 80072e2:	61fb      	str	r3, [r7, #28]
 80072e4:	e7fe      	b.n	80072e4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80072e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072ec:	6850      	ldr	r0, [r2, #4]
 80072ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072f0:	6892      	ldr	r2, [r2, #8]
 80072f2:	4611      	mov	r1, r2
 80072f4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f2c0 80a7 	blt.w	800744c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007304:	695b      	ldr	r3, [r3, #20]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d004      	beq.n	8007314 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800730a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730c:	3304      	adds	r3, #4
 800730e:	4618      	mov	r0, r3
 8007310:	f7fe fa28 	bl	8005764 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007314:	463b      	mov	r3, r7
 8007316:	4618      	mov	r0, r3
 8007318:	f7ff ff6c 	bl	80071f4 <prvSampleTimeNow>
 800731c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2b09      	cmp	r3, #9
 8007322:	f200 8094 	bhi.w	800744e <prvProcessReceivedCommands+0x196>
 8007326:	a201      	add	r2, pc, #4	; (adr r2, 800732c <prvProcessReceivedCommands+0x74>)
 8007328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732c:	08007355 	.word	0x08007355
 8007330:	08007355 	.word	0x08007355
 8007334:	08007355 	.word	0x08007355
 8007338:	080073c7 	.word	0x080073c7
 800733c:	080073db 	.word	0x080073db
 8007340:	08007423 	.word	0x08007423
 8007344:	08007355 	.word	0x08007355
 8007348:	08007355 	.word	0x08007355
 800734c:	080073c7 	.word	0x080073c7
 8007350:	080073db 	.word	0x080073db
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007356:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800735a:	f043 0301 	orr.w	r3, r3, #1
 800735e:	b2da      	uxtb	r2, r3
 8007360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007362:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007366:	68ba      	ldr	r2, [r7, #8]
 8007368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736a:	699b      	ldr	r3, [r3, #24]
 800736c:	18d1      	adds	r1, r2, r3
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007372:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007374:	f7ff ff5e 	bl	8007234 <prvInsertTimerInActiveList>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d067      	beq.n	800744e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800737e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007384:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007388:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800738c:	f003 0304 	and.w	r3, r3, #4
 8007390:	2b00      	cmp	r3, #0
 8007392:	d05c      	beq.n	800744e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	441a      	add	r2, r3
 800739c:	2300      	movs	r3, #0
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	2300      	movs	r3, #0
 80073a2:	2100      	movs	r1, #0
 80073a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073a6:	f7ff fe09 	bl	8006fbc <xTimerGenericCommand>
 80073aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80073ac:	6a3b      	ldr	r3, [r7, #32]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d14d      	bne.n	800744e <prvProcessReceivedCommands+0x196>
 80073b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b6:	f383 8811 	msr	BASEPRI, r3
 80073ba:	f3bf 8f6f 	isb	sy
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	61bb      	str	r3, [r7, #24]
 80073c4:	e7fe      	b.n	80073c4 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80073c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073cc:	f023 0301 	bic.w	r3, r3, #1
 80073d0:	b2da      	uxtb	r2, r3
 80073d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80073d8:	e039      	b.n	800744e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80073da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073e0:	f043 0301 	orr.w	r3, r3, #1
 80073e4:	b2da      	uxtb	r2, r3
 80073e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80073ec:	68ba      	ldr	r2, [r7, #8]
 80073ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80073f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f4:	699b      	ldr	r3, [r3, #24]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d109      	bne.n	800740e <prvProcessReceivedCommands+0x156>
 80073fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fe:	f383 8811 	msr	BASEPRI, r3
 8007402:	f3bf 8f6f 	isb	sy
 8007406:	f3bf 8f4f 	dsb	sy
 800740a:	617b      	str	r3, [r7, #20]
 800740c:	e7fe      	b.n	800740c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800740e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007410:	699a      	ldr	r2, [r3, #24]
 8007412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007414:	18d1      	adds	r1, r2, r3
 8007416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800741a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800741c:	f7ff ff0a 	bl	8007234 <prvInsertTimerInActiveList>
					break;
 8007420:	e015      	b.n	800744e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007424:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007428:	f003 0302 	and.w	r3, r3, #2
 800742c:	2b00      	cmp	r3, #0
 800742e:	d103      	bne.n	8007438 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8007430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007432:	f000 fbc7 	bl	8007bc4 <vPortFree>
 8007436:	e00a      	b.n	800744e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800743e:	f023 0301 	bic.w	r3, r3, #1
 8007442:	b2da      	uxtb	r2, r3
 8007444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007446:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800744a:	e000      	b.n	800744e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800744c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800744e:	4b07      	ldr	r3, [pc, #28]	; (800746c <prvProcessReceivedCommands+0x1b4>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	1d39      	adds	r1, r7, #4
 8007454:	2200      	movs	r2, #0
 8007456:	4618      	mov	r0, r3
 8007458:	f7fe fc3a 	bl	8005cd0 <xQueueReceive>
 800745c:	4603      	mov	r3, r0
 800745e:	2b00      	cmp	r3, #0
 8007460:	f47f af2e 	bne.w	80072c0 <prvProcessReceivedCommands+0x8>
	}
}
 8007464:	bf00      	nop
 8007466:	3730      	adds	r7, #48	; 0x30
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	20000c4c 	.word	0x20000c4c

08007470 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b088      	sub	sp, #32
 8007474:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007476:	e047      	b.n	8007508 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007478:	4b2d      	ldr	r3, [pc, #180]	; (8007530 <prvSwitchTimerLists+0xc0>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007482:	4b2b      	ldr	r3, [pc, #172]	; (8007530 <prvSwitchTimerLists+0xc0>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	3304      	adds	r3, #4
 8007490:	4618      	mov	r0, r3
 8007492:	f7fe f967 	bl	8005764 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6a1b      	ldr	r3, [r3, #32]
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074a4:	f003 0304 	and.w	r3, r3, #4
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d02d      	beq.n	8007508 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	699b      	ldr	r3, [r3, #24]
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	4413      	add	r3, r2
 80074b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80074b6:	68ba      	ldr	r2, [r7, #8]
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d90e      	bls.n	80074dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	68fa      	ldr	r2, [r7, #12]
 80074c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80074ca:	4b19      	ldr	r3, [pc, #100]	; (8007530 <prvSwitchTimerLists+0xc0>)
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	3304      	adds	r3, #4
 80074d2:	4619      	mov	r1, r3
 80074d4:	4610      	mov	r0, r2
 80074d6:	f7fe f90c 	bl	80056f2 <vListInsert>
 80074da:	e015      	b.n	8007508 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80074dc:	2300      	movs	r3, #0
 80074de:	9300      	str	r3, [sp, #0]
 80074e0:	2300      	movs	r3, #0
 80074e2:	693a      	ldr	r2, [r7, #16]
 80074e4:	2100      	movs	r1, #0
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	f7ff fd68 	bl	8006fbc <xTimerGenericCommand>
 80074ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d109      	bne.n	8007508 <prvSwitchTimerLists+0x98>
 80074f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f8:	f383 8811 	msr	BASEPRI, r3
 80074fc:	f3bf 8f6f 	isb	sy
 8007500:	f3bf 8f4f 	dsb	sy
 8007504:	603b      	str	r3, [r7, #0]
 8007506:	e7fe      	b.n	8007506 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007508:	4b09      	ldr	r3, [pc, #36]	; (8007530 <prvSwitchTimerLists+0xc0>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1b2      	bne.n	8007478 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007512:	4b07      	ldr	r3, [pc, #28]	; (8007530 <prvSwitchTimerLists+0xc0>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007518:	4b06      	ldr	r3, [pc, #24]	; (8007534 <prvSwitchTimerLists+0xc4>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a04      	ldr	r2, [pc, #16]	; (8007530 <prvSwitchTimerLists+0xc0>)
 800751e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007520:	4a04      	ldr	r2, [pc, #16]	; (8007534 <prvSwitchTimerLists+0xc4>)
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	6013      	str	r3, [r2, #0]
}
 8007526:	bf00      	nop
 8007528:	3718      	adds	r7, #24
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	20000c44 	.word	0x20000c44
 8007534:	20000c48 	.word	0x20000c48

08007538 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800753e:	f000 f965 	bl	800780c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007542:	4b15      	ldr	r3, [pc, #84]	; (8007598 <prvCheckForValidListAndQueue+0x60>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d120      	bne.n	800758c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800754a:	4814      	ldr	r0, [pc, #80]	; (800759c <prvCheckForValidListAndQueue+0x64>)
 800754c:	f7fe f880 	bl	8005650 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007550:	4813      	ldr	r0, [pc, #76]	; (80075a0 <prvCheckForValidListAndQueue+0x68>)
 8007552:	f7fe f87d 	bl	8005650 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007556:	4b13      	ldr	r3, [pc, #76]	; (80075a4 <prvCheckForValidListAndQueue+0x6c>)
 8007558:	4a10      	ldr	r2, [pc, #64]	; (800759c <prvCheckForValidListAndQueue+0x64>)
 800755a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800755c:	4b12      	ldr	r3, [pc, #72]	; (80075a8 <prvCheckForValidListAndQueue+0x70>)
 800755e:	4a10      	ldr	r2, [pc, #64]	; (80075a0 <prvCheckForValidListAndQueue+0x68>)
 8007560:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007562:	2300      	movs	r3, #0
 8007564:	9300      	str	r3, [sp, #0]
 8007566:	4b11      	ldr	r3, [pc, #68]	; (80075ac <prvCheckForValidListAndQueue+0x74>)
 8007568:	4a11      	ldr	r2, [pc, #68]	; (80075b0 <prvCheckForValidListAndQueue+0x78>)
 800756a:	2110      	movs	r1, #16
 800756c:	200a      	movs	r0, #10
 800756e:	f7fe f98b 	bl	8005888 <xQueueGenericCreateStatic>
 8007572:	4602      	mov	r2, r0
 8007574:	4b08      	ldr	r3, [pc, #32]	; (8007598 <prvCheckForValidListAndQueue+0x60>)
 8007576:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007578:	4b07      	ldr	r3, [pc, #28]	; (8007598 <prvCheckForValidListAndQueue+0x60>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d005      	beq.n	800758c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007580:	4b05      	ldr	r3, [pc, #20]	; (8007598 <prvCheckForValidListAndQueue+0x60>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	490b      	ldr	r1, [pc, #44]	; (80075b4 <prvCheckForValidListAndQueue+0x7c>)
 8007586:	4618      	mov	r0, r3
 8007588:	f7fe fd8e 	bl	80060a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800758c:	f000 f96c 	bl	8007868 <vPortExitCritical>
}
 8007590:	bf00      	nop
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	20000c4c 	.word	0x20000c4c
 800759c:	20000c1c 	.word	0x20000c1c
 80075a0:	20000c30 	.word	0x20000c30
 80075a4:	20000c44 	.word	0x20000c44
 80075a8:	20000c48 	.word	0x20000c48
 80075ac:	20000cf8 	.word	0x20000cf8
 80075b0:	20000c58 	.word	0x20000c58
 80075b4:	08007ef0 	.word	0x08007ef0

080075b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	3b04      	subs	r3, #4
 80075c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80075d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	3b04      	subs	r3, #4
 80075d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	f023 0201 	bic.w	r2, r3, #1
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	3b04      	subs	r3, #4
 80075e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80075e8:	4a0c      	ldr	r2, [pc, #48]	; (800761c <pxPortInitialiseStack+0x64>)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	3b14      	subs	r3, #20
 80075f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	3b04      	subs	r3, #4
 80075fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f06f 0202 	mvn.w	r2, #2
 8007606:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	3b20      	subs	r3, #32
 800760c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800760e:	68fb      	ldr	r3, [r7, #12]
}
 8007610:	4618      	mov	r0, r3
 8007612:	3714      	adds	r7, #20
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr
 800761c:	08007621 	.word	0x08007621

08007620 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007626:	2300      	movs	r3, #0
 8007628:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800762a:	4b11      	ldr	r3, [pc, #68]	; (8007670 <prvTaskExitError+0x50>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007632:	d009      	beq.n	8007648 <prvTaskExitError+0x28>
 8007634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007638:	f383 8811 	msr	BASEPRI, r3
 800763c:	f3bf 8f6f 	isb	sy
 8007640:	f3bf 8f4f 	dsb	sy
 8007644:	60fb      	str	r3, [r7, #12]
 8007646:	e7fe      	b.n	8007646 <prvTaskExitError+0x26>
 8007648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764c:	f383 8811 	msr	BASEPRI, r3
 8007650:	f3bf 8f6f 	isb	sy
 8007654:	f3bf 8f4f 	dsb	sy
 8007658:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800765a:	bf00      	nop
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d0fc      	beq.n	800765c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007662:	bf00      	nop
 8007664:	3714      	adds	r7, #20
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	20000030 	.word	0x20000030
	...

08007680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007680:	4b07      	ldr	r3, [pc, #28]	; (80076a0 <pxCurrentTCBConst2>)
 8007682:	6819      	ldr	r1, [r3, #0]
 8007684:	6808      	ldr	r0, [r1, #0]
 8007686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800768a:	f380 8809 	msr	PSP, r0
 800768e:	f3bf 8f6f 	isb	sy
 8007692:	f04f 0000 	mov.w	r0, #0
 8007696:	f380 8811 	msr	BASEPRI, r0
 800769a:	4770      	bx	lr
 800769c:	f3af 8000 	nop.w

080076a0 <pxCurrentTCBConst2>:
 80076a0:	2000071c 	.word	0x2000071c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80076a4:	bf00      	nop
 80076a6:	bf00      	nop

080076a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80076a8:	4808      	ldr	r0, [pc, #32]	; (80076cc <prvPortStartFirstTask+0x24>)
 80076aa:	6800      	ldr	r0, [r0, #0]
 80076ac:	6800      	ldr	r0, [r0, #0]
 80076ae:	f380 8808 	msr	MSP, r0
 80076b2:	f04f 0000 	mov.w	r0, #0
 80076b6:	f380 8814 	msr	CONTROL, r0
 80076ba:	b662      	cpsie	i
 80076bc:	b661      	cpsie	f
 80076be:	f3bf 8f4f 	dsb	sy
 80076c2:	f3bf 8f6f 	isb	sy
 80076c6:	df00      	svc	0
 80076c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80076ca:	bf00      	nop
 80076cc:	e000ed08 	.word	0xe000ed08

080076d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80076d6:	4b44      	ldr	r3, [pc, #272]	; (80077e8 <xPortStartScheduler+0x118>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a44      	ldr	r2, [pc, #272]	; (80077ec <xPortStartScheduler+0x11c>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d109      	bne.n	80076f4 <xPortStartScheduler+0x24>
 80076e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e4:	f383 8811 	msr	BASEPRI, r3
 80076e8:	f3bf 8f6f 	isb	sy
 80076ec:	f3bf 8f4f 	dsb	sy
 80076f0:	613b      	str	r3, [r7, #16]
 80076f2:	e7fe      	b.n	80076f2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80076f4:	4b3c      	ldr	r3, [pc, #240]	; (80077e8 <xPortStartScheduler+0x118>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a3d      	ldr	r2, [pc, #244]	; (80077f0 <xPortStartScheduler+0x120>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d109      	bne.n	8007712 <xPortStartScheduler+0x42>
 80076fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007702:	f383 8811 	msr	BASEPRI, r3
 8007706:	f3bf 8f6f 	isb	sy
 800770a:	f3bf 8f4f 	dsb	sy
 800770e:	60fb      	str	r3, [r7, #12]
 8007710:	e7fe      	b.n	8007710 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007712:	4b38      	ldr	r3, [pc, #224]	; (80077f4 <xPortStartScheduler+0x124>)
 8007714:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	b2db      	uxtb	r3, r3
 800771c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	22ff      	movs	r2, #255	; 0xff
 8007722:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	b2db      	uxtb	r3, r3
 800772a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800772c:	78fb      	ldrb	r3, [r7, #3]
 800772e:	b2db      	uxtb	r3, r3
 8007730:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007734:	b2da      	uxtb	r2, r3
 8007736:	4b30      	ldr	r3, [pc, #192]	; (80077f8 <xPortStartScheduler+0x128>)
 8007738:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800773a:	4b30      	ldr	r3, [pc, #192]	; (80077fc <xPortStartScheduler+0x12c>)
 800773c:	2207      	movs	r2, #7
 800773e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007740:	e009      	b.n	8007756 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007742:	4b2e      	ldr	r3, [pc, #184]	; (80077fc <xPortStartScheduler+0x12c>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	3b01      	subs	r3, #1
 8007748:	4a2c      	ldr	r2, [pc, #176]	; (80077fc <xPortStartScheduler+0x12c>)
 800774a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800774c:	78fb      	ldrb	r3, [r7, #3]
 800774e:	b2db      	uxtb	r3, r3
 8007750:	005b      	lsls	r3, r3, #1
 8007752:	b2db      	uxtb	r3, r3
 8007754:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007756:	78fb      	ldrb	r3, [r7, #3]
 8007758:	b2db      	uxtb	r3, r3
 800775a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800775e:	2b80      	cmp	r3, #128	; 0x80
 8007760:	d0ef      	beq.n	8007742 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007762:	4b26      	ldr	r3, [pc, #152]	; (80077fc <xPortStartScheduler+0x12c>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f1c3 0307 	rsb	r3, r3, #7
 800776a:	2b04      	cmp	r3, #4
 800776c:	d009      	beq.n	8007782 <xPortStartScheduler+0xb2>
 800776e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	60bb      	str	r3, [r7, #8]
 8007780:	e7fe      	b.n	8007780 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007782:	4b1e      	ldr	r3, [pc, #120]	; (80077fc <xPortStartScheduler+0x12c>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	021b      	lsls	r3, r3, #8
 8007788:	4a1c      	ldr	r2, [pc, #112]	; (80077fc <xPortStartScheduler+0x12c>)
 800778a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800778c:	4b1b      	ldr	r3, [pc, #108]	; (80077fc <xPortStartScheduler+0x12c>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007794:	4a19      	ldr	r2, [pc, #100]	; (80077fc <xPortStartScheduler+0x12c>)
 8007796:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	b2da      	uxtb	r2, r3
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80077a0:	4b17      	ldr	r3, [pc, #92]	; (8007800 <xPortStartScheduler+0x130>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a16      	ldr	r2, [pc, #88]	; (8007800 <xPortStartScheduler+0x130>)
 80077a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80077aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80077ac:	4b14      	ldr	r3, [pc, #80]	; (8007800 <xPortStartScheduler+0x130>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a13      	ldr	r2, [pc, #76]	; (8007800 <xPortStartScheduler+0x130>)
 80077b2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80077b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80077b8:	f000 f8d6 	bl	8007968 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80077bc:	4b11      	ldr	r3, [pc, #68]	; (8007804 <xPortStartScheduler+0x134>)
 80077be:	2200      	movs	r2, #0
 80077c0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80077c2:	f000 f8f5 	bl	80079b0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80077c6:	4b10      	ldr	r3, [pc, #64]	; (8007808 <xPortStartScheduler+0x138>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a0f      	ldr	r2, [pc, #60]	; (8007808 <xPortStartScheduler+0x138>)
 80077cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80077d0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80077d2:	f7ff ff69 	bl	80076a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80077d6:	f7ff f86b 	bl	80068b0 <vTaskSwitchContext>
	prvTaskExitError();
 80077da:	f7ff ff21 	bl	8007620 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3718      	adds	r7, #24
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	e000ed00 	.word	0xe000ed00
 80077ec:	410fc271 	.word	0x410fc271
 80077f0:	410fc270 	.word	0x410fc270
 80077f4:	e000e400 	.word	0xe000e400
 80077f8:	20000d48 	.word	0x20000d48
 80077fc:	20000d4c 	.word	0x20000d4c
 8007800:	e000ed20 	.word	0xe000ed20
 8007804:	20000030 	.word	0x20000030
 8007808:	e000ef34 	.word	0xe000ef34

0800780c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007816:	f383 8811 	msr	BASEPRI, r3
 800781a:	f3bf 8f6f 	isb	sy
 800781e:	f3bf 8f4f 	dsb	sy
 8007822:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007824:	4b0e      	ldr	r3, [pc, #56]	; (8007860 <vPortEnterCritical+0x54>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	3301      	adds	r3, #1
 800782a:	4a0d      	ldr	r2, [pc, #52]	; (8007860 <vPortEnterCritical+0x54>)
 800782c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800782e:	4b0c      	ldr	r3, [pc, #48]	; (8007860 <vPortEnterCritical+0x54>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d10e      	bne.n	8007854 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007836:	4b0b      	ldr	r3, [pc, #44]	; (8007864 <vPortEnterCritical+0x58>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	b2db      	uxtb	r3, r3
 800783c:	2b00      	cmp	r3, #0
 800783e:	d009      	beq.n	8007854 <vPortEnterCritical+0x48>
 8007840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007844:	f383 8811 	msr	BASEPRI, r3
 8007848:	f3bf 8f6f 	isb	sy
 800784c:	f3bf 8f4f 	dsb	sy
 8007850:	603b      	str	r3, [r7, #0]
 8007852:	e7fe      	b.n	8007852 <vPortEnterCritical+0x46>
	}
}
 8007854:	bf00      	nop
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr
 8007860:	20000030 	.word	0x20000030
 8007864:	e000ed04 	.word	0xe000ed04

08007868 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800786e:	4b11      	ldr	r3, [pc, #68]	; (80078b4 <vPortExitCritical+0x4c>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d109      	bne.n	800788a <vPortExitCritical+0x22>
 8007876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787a:	f383 8811 	msr	BASEPRI, r3
 800787e:	f3bf 8f6f 	isb	sy
 8007882:	f3bf 8f4f 	dsb	sy
 8007886:	607b      	str	r3, [r7, #4]
 8007888:	e7fe      	b.n	8007888 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800788a:	4b0a      	ldr	r3, [pc, #40]	; (80078b4 <vPortExitCritical+0x4c>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	3b01      	subs	r3, #1
 8007890:	4a08      	ldr	r2, [pc, #32]	; (80078b4 <vPortExitCritical+0x4c>)
 8007892:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007894:	4b07      	ldr	r3, [pc, #28]	; (80078b4 <vPortExitCritical+0x4c>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d104      	bne.n	80078a6 <vPortExitCritical+0x3e>
 800789c:	2300      	movs	r3, #0
 800789e:	603b      	str	r3, [r7, #0]
	__asm volatile
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80078a6:	bf00      	nop
 80078a8:	370c      	adds	r7, #12
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	20000030 	.word	0x20000030
	...

080078c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80078c0:	f3ef 8009 	mrs	r0, PSP
 80078c4:	f3bf 8f6f 	isb	sy
 80078c8:	4b15      	ldr	r3, [pc, #84]	; (8007920 <pxCurrentTCBConst>)
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	f01e 0f10 	tst.w	lr, #16
 80078d0:	bf08      	it	eq
 80078d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80078d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078da:	6010      	str	r0, [r2, #0]
 80078dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80078e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80078e4:	f380 8811 	msr	BASEPRI, r0
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	f3bf 8f6f 	isb	sy
 80078f0:	f7fe ffde 	bl	80068b0 <vTaskSwitchContext>
 80078f4:	f04f 0000 	mov.w	r0, #0
 80078f8:	f380 8811 	msr	BASEPRI, r0
 80078fc:	bc09      	pop	{r0, r3}
 80078fe:	6819      	ldr	r1, [r3, #0]
 8007900:	6808      	ldr	r0, [r1, #0]
 8007902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007906:	f01e 0f10 	tst.w	lr, #16
 800790a:	bf08      	it	eq
 800790c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007910:	f380 8809 	msr	PSP, r0
 8007914:	f3bf 8f6f 	isb	sy
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	f3af 8000 	nop.w

08007920 <pxCurrentTCBConst>:
 8007920:	2000071c 	.word	0x2000071c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007924:	bf00      	nop
 8007926:	bf00      	nop

08007928 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
	__asm volatile
 800792e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007932:	f383 8811 	msr	BASEPRI, r3
 8007936:	f3bf 8f6f 	isb	sy
 800793a:	f3bf 8f4f 	dsb	sy
 800793e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007940:	f7fe fefe 	bl	8006740 <xTaskIncrementTick>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d003      	beq.n	8007952 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800794a:	4b06      	ldr	r3, [pc, #24]	; (8007964 <xPortSysTickHandler+0x3c>)
 800794c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007950:	601a      	str	r2, [r3, #0]
 8007952:	2300      	movs	r3, #0
 8007954:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800795c:	bf00      	nop
 800795e:	3708      	adds	r7, #8
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	e000ed04 	.word	0xe000ed04

08007968 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007968:	b480      	push	{r7}
 800796a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800796c:	4b0b      	ldr	r3, [pc, #44]	; (800799c <vPortSetupTimerInterrupt+0x34>)
 800796e:	2200      	movs	r2, #0
 8007970:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007972:	4b0b      	ldr	r3, [pc, #44]	; (80079a0 <vPortSetupTimerInterrupt+0x38>)
 8007974:	2200      	movs	r2, #0
 8007976:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007978:	4b0a      	ldr	r3, [pc, #40]	; (80079a4 <vPortSetupTimerInterrupt+0x3c>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a0a      	ldr	r2, [pc, #40]	; (80079a8 <vPortSetupTimerInterrupt+0x40>)
 800797e:	fba2 2303 	umull	r2, r3, r2, r3
 8007982:	099b      	lsrs	r3, r3, #6
 8007984:	4a09      	ldr	r2, [pc, #36]	; (80079ac <vPortSetupTimerInterrupt+0x44>)
 8007986:	3b01      	subs	r3, #1
 8007988:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800798a:	4b04      	ldr	r3, [pc, #16]	; (800799c <vPortSetupTimerInterrupt+0x34>)
 800798c:	2207      	movs	r2, #7
 800798e:	601a      	str	r2, [r3, #0]
}
 8007990:	bf00      	nop
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop
 800799c:	e000e010 	.word	0xe000e010
 80079a0:	e000e018 	.word	0xe000e018
 80079a4:	20000024 	.word	0x20000024
 80079a8:	10624dd3 	.word	0x10624dd3
 80079ac:	e000e014 	.word	0xe000e014

080079b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80079b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80079c0 <vPortEnableVFP+0x10>
 80079b4:	6801      	ldr	r1, [r0, #0]
 80079b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80079ba:	6001      	str	r1, [r0, #0]
 80079bc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80079be:	bf00      	nop
 80079c0:	e000ed88 	.word	0xe000ed88

080079c4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80079c4:	b480      	push	{r7}
 80079c6:	b085      	sub	sp, #20
 80079c8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80079ca:	f3ef 8305 	mrs	r3, IPSR
 80079ce:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2b0f      	cmp	r3, #15
 80079d4:	d913      	bls.n	80079fe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80079d6:	4a16      	ldr	r2, [pc, #88]	; (8007a30 <vPortValidateInterruptPriority+0x6c>)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	4413      	add	r3, r2
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80079e0:	4b14      	ldr	r3, [pc, #80]	; (8007a34 <vPortValidateInterruptPriority+0x70>)
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	7afa      	ldrb	r2, [r7, #11]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d209      	bcs.n	80079fe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80079ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ee:	f383 8811 	msr	BASEPRI, r3
 80079f2:	f3bf 8f6f 	isb	sy
 80079f6:	f3bf 8f4f 	dsb	sy
 80079fa:	607b      	str	r3, [r7, #4]
 80079fc:	e7fe      	b.n	80079fc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80079fe:	4b0e      	ldr	r3, [pc, #56]	; (8007a38 <vPortValidateInterruptPriority+0x74>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007a06:	4b0d      	ldr	r3, [pc, #52]	; (8007a3c <vPortValidateInterruptPriority+0x78>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d909      	bls.n	8007a22 <vPortValidateInterruptPriority+0x5e>
 8007a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a12:	f383 8811 	msr	BASEPRI, r3
 8007a16:	f3bf 8f6f 	isb	sy
 8007a1a:	f3bf 8f4f 	dsb	sy
 8007a1e:	603b      	str	r3, [r7, #0]
 8007a20:	e7fe      	b.n	8007a20 <vPortValidateInterruptPriority+0x5c>
	}
 8007a22:	bf00      	nop
 8007a24:	3714      	adds	r7, #20
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop
 8007a30:	e000e3f0 	.word	0xe000e3f0
 8007a34:	20000d48 	.word	0x20000d48
 8007a38:	e000ed0c 	.word	0xe000ed0c
 8007a3c:	20000d4c 	.word	0x20000d4c

08007a40 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b08a      	sub	sp, #40	; 0x28
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007a4c:	f7fe fdbe 	bl	80065cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007a50:	4b57      	ldr	r3, [pc, #348]	; (8007bb0 <pvPortMalloc+0x170>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d101      	bne.n	8007a5c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007a58:	f000 f90c 	bl	8007c74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a5c:	4b55      	ldr	r3, [pc, #340]	; (8007bb4 <pvPortMalloc+0x174>)
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4013      	ands	r3, r2
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	f040 808c 	bne.w	8007b82 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d01c      	beq.n	8007aaa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007a70:	2208      	movs	r2, #8
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4413      	add	r3, r2
 8007a76:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f003 0307 	and.w	r3, r3, #7
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d013      	beq.n	8007aaa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f023 0307 	bic.w	r3, r3, #7
 8007a88:	3308      	adds	r3, #8
 8007a8a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f003 0307 	and.w	r3, r3, #7
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d009      	beq.n	8007aaa <pvPortMalloc+0x6a>
 8007a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9a:	f383 8811 	msr	BASEPRI, r3
 8007a9e:	f3bf 8f6f 	isb	sy
 8007aa2:	f3bf 8f4f 	dsb	sy
 8007aa6:	617b      	str	r3, [r7, #20]
 8007aa8:	e7fe      	b.n	8007aa8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d068      	beq.n	8007b82 <pvPortMalloc+0x142>
 8007ab0:	4b41      	ldr	r3, [pc, #260]	; (8007bb8 <pvPortMalloc+0x178>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d863      	bhi.n	8007b82 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007aba:	4b40      	ldr	r3, [pc, #256]	; (8007bbc <pvPortMalloc+0x17c>)
 8007abc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007abe:	4b3f      	ldr	r3, [pc, #252]	; (8007bbc <pvPortMalloc+0x17c>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ac4:	e004      	b.n	8007ad0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d903      	bls.n	8007ae2 <pvPortMalloc+0xa2>
 8007ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d1f1      	bne.n	8007ac6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007ae2:	4b33      	ldr	r3, [pc, #204]	; (8007bb0 <pvPortMalloc+0x170>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d04a      	beq.n	8007b82 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007aec:	6a3b      	ldr	r3, [r7, #32]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2208      	movs	r2, #8
 8007af2:	4413      	add	r3, r2
 8007af4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	6a3b      	ldr	r3, [r7, #32]
 8007afc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b00:	685a      	ldr	r2, [r3, #4]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	1ad2      	subs	r2, r2, r3
 8007b06:	2308      	movs	r3, #8
 8007b08:	005b      	lsls	r3, r3, #1
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d91e      	bls.n	8007b4c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4413      	add	r3, r2
 8007b14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	f003 0307 	and.w	r3, r3, #7
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d009      	beq.n	8007b34 <pvPortMalloc+0xf4>
 8007b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b24:	f383 8811 	msr	BASEPRI, r3
 8007b28:	f3bf 8f6f 	isb	sy
 8007b2c:	f3bf 8f4f 	dsb	sy
 8007b30:	613b      	str	r3, [r7, #16]
 8007b32:	e7fe      	b.n	8007b32 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b36:	685a      	ldr	r2, [r3, #4]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	1ad2      	subs	r2, r2, r3
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b46:	69b8      	ldr	r0, [r7, #24]
 8007b48:	f000 f8f6 	bl	8007d38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b4c:	4b1a      	ldr	r3, [pc, #104]	; (8007bb8 <pvPortMalloc+0x178>)
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	1ad3      	subs	r3, r2, r3
 8007b56:	4a18      	ldr	r2, [pc, #96]	; (8007bb8 <pvPortMalloc+0x178>)
 8007b58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b5a:	4b17      	ldr	r3, [pc, #92]	; (8007bb8 <pvPortMalloc+0x178>)
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	4b18      	ldr	r3, [pc, #96]	; (8007bc0 <pvPortMalloc+0x180>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d203      	bcs.n	8007b6e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b66:	4b14      	ldr	r3, [pc, #80]	; (8007bb8 <pvPortMalloc+0x178>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a15      	ldr	r2, [pc, #84]	; (8007bc0 <pvPortMalloc+0x180>)
 8007b6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b70:	685a      	ldr	r2, [r3, #4]
 8007b72:	4b10      	ldr	r3, [pc, #64]	; (8007bb4 <pvPortMalloc+0x174>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	431a      	orrs	r2, r3
 8007b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7e:	2200      	movs	r2, #0
 8007b80:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007b82:	f7fe fd31 	bl	80065e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	f003 0307 	and.w	r3, r3, #7
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d009      	beq.n	8007ba4 <pvPortMalloc+0x164>
 8007b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b94:	f383 8811 	msr	BASEPRI, r3
 8007b98:	f3bf 8f6f 	isb	sy
 8007b9c:	f3bf 8f4f 	dsb	sy
 8007ba0:	60fb      	str	r3, [r7, #12]
 8007ba2:	e7fe      	b.n	8007ba2 <pvPortMalloc+0x162>
	return pvReturn;
 8007ba4:	69fb      	ldr	r3, [r7, #28]
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3728      	adds	r7, #40	; 0x28
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	20001958 	.word	0x20001958
 8007bb4:	20001964 	.word	0x20001964
 8007bb8:	2000195c 	.word	0x2000195c
 8007bbc:	20001950 	.word	0x20001950
 8007bc0:	20001960 	.word	0x20001960

08007bc4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b086      	sub	sp, #24
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d046      	beq.n	8007c64 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007bd6:	2308      	movs	r3, #8
 8007bd8:	425b      	negs	r3, r3
 8007bda:	697a      	ldr	r2, [r7, #20]
 8007bdc:	4413      	add	r3, r2
 8007bde:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	685a      	ldr	r2, [r3, #4]
 8007be8:	4b20      	ldr	r3, [pc, #128]	; (8007c6c <vPortFree+0xa8>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4013      	ands	r3, r2
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d109      	bne.n	8007c06 <vPortFree+0x42>
 8007bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf6:	f383 8811 	msr	BASEPRI, r3
 8007bfa:	f3bf 8f6f 	isb	sy
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	60fb      	str	r3, [r7, #12]
 8007c04:	e7fe      	b.n	8007c04 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d009      	beq.n	8007c22 <vPortFree+0x5e>
 8007c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c12:	f383 8811 	msr	BASEPRI, r3
 8007c16:	f3bf 8f6f 	isb	sy
 8007c1a:	f3bf 8f4f 	dsb	sy
 8007c1e:	60bb      	str	r3, [r7, #8]
 8007c20:	e7fe      	b.n	8007c20 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	685a      	ldr	r2, [r3, #4]
 8007c26:	4b11      	ldr	r3, [pc, #68]	; (8007c6c <vPortFree+0xa8>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4013      	ands	r3, r2
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d019      	beq.n	8007c64 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d115      	bne.n	8007c64 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	685a      	ldr	r2, [r3, #4]
 8007c3c:	4b0b      	ldr	r3, [pc, #44]	; (8007c6c <vPortFree+0xa8>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	43db      	mvns	r3, r3
 8007c42:	401a      	ands	r2, r3
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c48:	f7fe fcc0 	bl	80065cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	685a      	ldr	r2, [r3, #4]
 8007c50:	4b07      	ldr	r3, [pc, #28]	; (8007c70 <vPortFree+0xac>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4413      	add	r3, r2
 8007c56:	4a06      	ldr	r2, [pc, #24]	; (8007c70 <vPortFree+0xac>)
 8007c58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c5a:	6938      	ldr	r0, [r7, #16]
 8007c5c:	f000 f86c 	bl	8007d38 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007c60:	f7fe fcc2 	bl	80065e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007c64:	bf00      	nop
 8007c66:	3718      	adds	r7, #24
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	20001964 	.word	0x20001964
 8007c70:	2000195c 	.word	0x2000195c

08007c74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007c74:	b480      	push	{r7}
 8007c76:	b085      	sub	sp, #20
 8007c78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007c7a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007c7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007c80:	4b27      	ldr	r3, [pc, #156]	; (8007d20 <prvHeapInit+0xac>)
 8007c82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f003 0307 	and.w	r3, r3, #7
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d00c      	beq.n	8007ca8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	3307      	adds	r3, #7
 8007c92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f023 0307 	bic.w	r3, r3, #7
 8007c9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	4a1f      	ldr	r2, [pc, #124]	; (8007d20 <prvHeapInit+0xac>)
 8007ca4:	4413      	add	r3, r2
 8007ca6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007cac:	4a1d      	ldr	r2, [pc, #116]	; (8007d24 <prvHeapInit+0xb0>)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007cb2:	4b1c      	ldr	r3, [pc, #112]	; (8007d24 <prvHeapInit+0xb0>)
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	68ba      	ldr	r2, [r7, #8]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007cc0:	2208      	movs	r2, #8
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	1a9b      	subs	r3, r3, r2
 8007cc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f023 0307 	bic.w	r3, r3, #7
 8007cce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	4a15      	ldr	r2, [pc, #84]	; (8007d28 <prvHeapInit+0xb4>)
 8007cd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007cd6:	4b14      	ldr	r3, [pc, #80]	; (8007d28 <prvHeapInit+0xb4>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007cde:	4b12      	ldr	r3, [pc, #72]	; (8007d28 <prvHeapInit+0xb4>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	1ad2      	subs	r2, r2, r3
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007cf4:	4b0c      	ldr	r3, [pc, #48]	; (8007d28 <prvHeapInit+0xb4>)
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	4a0a      	ldr	r2, [pc, #40]	; (8007d2c <prvHeapInit+0xb8>)
 8007d02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	4a09      	ldr	r2, [pc, #36]	; (8007d30 <prvHeapInit+0xbc>)
 8007d0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d0c:	4b09      	ldr	r3, [pc, #36]	; (8007d34 <prvHeapInit+0xc0>)
 8007d0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007d12:	601a      	str	r2, [r3, #0]
}
 8007d14:	bf00      	nop
 8007d16:	3714      	adds	r7, #20
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr
 8007d20:	20000d50 	.word	0x20000d50
 8007d24:	20001950 	.word	0x20001950
 8007d28:	20001958 	.word	0x20001958
 8007d2c:	20001960 	.word	0x20001960
 8007d30:	2000195c 	.word	0x2000195c
 8007d34:	20001964 	.word	0x20001964

08007d38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b085      	sub	sp, #20
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007d40:	4b28      	ldr	r3, [pc, #160]	; (8007de4 <prvInsertBlockIntoFreeList+0xac>)
 8007d42:	60fb      	str	r3, [r7, #12]
 8007d44:	e002      	b.n	8007d4c <prvInsertBlockIntoFreeList+0x14>
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	60fb      	str	r3, [r7, #12]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d8f7      	bhi.n	8007d46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	68ba      	ldr	r2, [r7, #8]
 8007d60:	4413      	add	r3, r2
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d108      	bne.n	8007d7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	685a      	ldr	r2, [r3, #4]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	441a      	add	r2, r3
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	68ba      	ldr	r2, [r7, #8]
 8007d84:	441a      	add	r2, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d118      	bne.n	8007dc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	4b15      	ldr	r3, [pc, #84]	; (8007de8 <prvInsertBlockIntoFreeList+0xb0>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d00d      	beq.n	8007db6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	685a      	ldr	r2, [r3, #4]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	441a      	add	r2, r3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	601a      	str	r2, [r3, #0]
 8007db4:	e008      	b.n	8007dc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007db6:	4b0c      	ldr	r3, [pc, #48]	; (8007de8 <prvInsertBlockIntoFreeList+0xb0>)
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	601a      	str	r2, [r3, #0]
 8007dbe:	e003      	b.n	8007dc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d002      	beq.n	8007dd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007dd6:	bf00      	nop
 8007dd8:	3714      	adds	r7, #20
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	20001950 	.word	0x20001950
 8007de8:	20001958 	.word	0x20001958

08007dec <__libc_init_array>:
 8007dec:	b570      	push	{r4, r5, r6, lr}
 8007dee:	4e0d      	ldr	r6, [pc, #52]	; (8007e24 <__libc_init_array+0x38>)
 8007df0:	4c0d      	ldr	r4, [pc, #52]	; (8007e28 <__libc_init_array+0x3c>)
 8007df2:	1ba4      	subs	r4, r4, r6
 8007df4:	10a4      	asrs	r4, r4, #2
 8007df6:	2500      	movs	r5, #0
 8007df8:	42a5      	cmp	r5, r4
 8007dfa:	d109      	bne.n	8007e10 <__libc_init_array+0x24>
 8007dfc:	4e0b      	ldr	r6, [pc, #44]	; (8007e2c <__libc_init_array+0x40>)
 8007dfe:	4c0c      	ldr	r4, [pc, #48]	; (8007e30 <__libc_init_array+0x44>)
 8007e00:	f000 f82c 	bl	8007e5c <_init>
 8007e04:	1ba4      	subs	r4, r4, r6
 8007e06:	10a4      	asrs	r4, r4, #2
 8007e08:	2500      	movs	r5, #0
 8007e0a:	42a5      	cmp	r5, r4
 8007e0c:	d105      	bne.n	8007e1a <__libc_init_array+0x2e>
 8007e0e:	bd70      	pop	{r4, r5, r6, pc}
 8007e10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e14:	4798      	blx	r3
 8007e16:	3501      	adds	r5, #1
 8007e18:	e7ee      	b.n	8007df8 <__libc_init_array+0xc>
 8007e1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e1e:	4798      	blx	r3
 8007e20:	3501      	adds	r5, #1
 8007e22:	e7f2      	b.n	8007e0a <__libc_init_array+0x1e>
 8007e24:	08007f78 	.word	0x08007f78
 8007e28:	08007f78 	.word	0x08007f78
 8007e2c:	08007f78 	.word	0x08007f78
 8007e30:	08007f7c 	.word	0x08007f7c

08007e34 <memcpy>:
 8007e34:	b510      	push	{r4, lr}
 8007e36:	1e43      	subs	r3, r0, #1
 8007e38:	440a      	add	r2, r1
 8007e3a:	4291      	cmp	r1, r2
 8007e3c:	d100      	bne.n	8007e40 <memcpy+0xc>
 8007e3e:	bd10      	pop	{r4, pc}
 8007e40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e48:	e7f7      	b.n	8007e3a <memcpy+0x6>

08007e4a <memset>:
 8007e4a:	4402      	add	r2, r0
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d100      	bne.n	8007e54 <memset+0xa>
 8007e52:	4770      	bx	lr
 8007e54:	f803 1b01 	strb.w	r1, [r3], #1
 8007e58:	e7f9      	b.n	8007e4e <memset+0x4>
	...

08007e5c <_init>:
 8007e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e5e:	bf00      	nop
 8007e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e62:	bc08      	pop	{r3}
 8007e64:	469e      	mov	lr, r3
 8007e66:	4770      	bx	lr

08007e68 <_fini>:
 8007e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e6a:	bf00      	nop
 8007e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e6e:	bc08      	pop	{r3}
 8007e70:	469e      	mov	lr, r3
 8007e72:	4770      	bx	lr
