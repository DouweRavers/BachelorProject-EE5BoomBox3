
EE5BoomBox3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005994  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08005b74  08005b74  00015b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c14  08005c14  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005c14  08005c14  00015c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c1c  08005c1c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c1c  08005c1c  00015c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c20  08005c20  00015c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005c24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a44  20000010  08005c34  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a54  08005c34  00021a54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bdbf  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000329e  00000000  00000000  0003bdff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001720  00000000  00000000  0003f0a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015a8  00000000  00000000  000407c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f6bf  00000000  00000000  00041d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012851  00000000  00000000  00061427  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce4e1  00000000  00000000  00073c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00142159  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061ac  00000000  00000000  001421d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005b5c 	.word	0x08005b5c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	08005b5c 	.word	0x08005b5c

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <init_app>:
int row=0;
int col=0;

/* Execute all configuration protocols */
void init_app()
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	lcd_init ();
 8000524:	f000 f8d8 	bl	80006d8 <lcd_init>
	lcd_put_cur(0, 0);
 8000528:	2100      	movs	r1, #0
 800052a:	2000      	movs	r0, #0
 800052c:	f000 f8b6 	bl	800069c <lcd_put_cur>
	lcd_send_string("LCD DEMO");
 8000530:	4805      	ldr	r0, [pc, #20]	; (8000548 <init_app+0x28>)
 8000532:	f000 f90e 	bl	8000752 <lcd_send_string>

	lcd_put_cur(1, 0);
 8000536:	2100      	movs	r1, #0
 8000538:	2001      	movs	r0, #1
 800053a:	f000 f8af 	bl	800069c <lcd_put_cur>
	lcd_send_string("Hello world");
 800053e:	4803      	ldr	r0, [pc, #12]	; (800054c <init_app+0x2c>)
 8000540:	f000 f907 	bl	8000752 <lcd_send_string>
}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}
 8000548:	08005b74 	.word	0x08005b74
 800054c:	08005b80 	.word	0x08005b80

08000550 <tick_app>:

void tick_app()
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
	osDelay(500);
 8000554:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000558:	f002 fe9a 	bl	8003290 <osDelay>
}
 800055c:	bf00      	nop
 800055e:	bd80      	pop	{r7, pc}

08000560 <delay>:
#define timer htim6


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 800056a:	4b08      	ldr	r3, [pc, #32]	; (800058c <delay+0x2c>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	2200      	movs	r2, #0
 8000570:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8000572:	bf00      	nop
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <delay+0x2c>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800057a:	88fb      	ldrh	r3, [r7, #6]
 800057c:	429a      	cmp	r2, r3
 800057e:	d3f9      	bcc.n	8000574 <delay+0x14>
}
 8000580:	bf00      	nop
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr
 800058c:	20001938 	.word	0x20001938

08000590 <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	6039      	str	r1, [r7, #0]
 800059a:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	461a      	mov	r2, r3
 80005a2:	2101      	movs	r1, #1
 80005a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a8:	f000 fe1e 	bl	80011e8 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	08db      	lsrs	r3, r3, #3
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	461a      	mov	r2, r3
 80005ba:	2180      	movs	r1, #128	; 0x80
 80005bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c0:	f000 fe12 	bl	80011e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	089b      	lsrs	r3, r3, #2
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	461a      	mov	r2, r3
 80005d2:	2140      	movs	r1, #64	; 0x40
 80005d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d8:	f000 fe06 	bl	80011e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	085b      	lsrs	r3, r3, #1
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	461a      	mov	r2, r3
 80005ea:	2120      	movs	r1, #32
 80005ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f0:	f000 fdfa 	bl	80011e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	461a      	mov	r2, r3
 80005fe:	2110      	movs	r1, #16
 8000600:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000604:	f000 fdf0 	bl	80011e8 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8000608:	2201      	movs	r2, #1
 800060a:	2102      	movs	r1, #2
 800060c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000610:	f000 fdea 	bl	80011e8 <HAL_GPIO_WritePin>
	delay (20);
 8000614:	2014      	movs	r0, #20
 8000616:	f7ff ffa3 	bl	8000560 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2102      	movs	r1, #2
 800061e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000622:	f000 fde1 	bl	80011e8 <HAL_GPIO_WritePin>
	delay (20);
 8000626:	2014      	movs	r0, #20
 8000628:	f7ff ff9a 	bl	8000560 <delay>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	091b      	lsrs	r3, r3, #4
 8000642:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8000644:	7bfb      	ldrb	r3, [r7, #15]
 8000646:	2100      	movs	r1, #0
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff ffa1 	bl	8000590 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	f003 030f 	and.w	r3, r3, #15
 8000654:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ff98 	bl	8000590 <send_to_lcd>
}
 8000660:	bf00      	nop
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	091b      	lsrs	r3, r3, #4
 8000676:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	2101      	movs	r1, #1
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff ff87 	bl	8000590 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	f003 030f 	and.w	r3, r3, #15
 8000688:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	2101      	movs	r1, #1
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff ff7e 	bl	8000590 <send_to_lcd>
}
 8000694:	bf00      	nop
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <lcd_put_cur>:
	lcd_send_cmd(0x01);
	HAL_Delay(2);
}

void lcd_put_cur(int row, int col)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]
    switch (row)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d002      	beq.n	80006b2 <lcd_put_cur+0x16>
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d005      	beq.n	80006bc <lcd_put_cur+0x20>
 80006b0:	e009      	b.n	80006c6 <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b8:	603b      	str	r3, [r7, #0]
            break;
 80006ba:	e004      	b.n	80006c6 <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80006c2:	603b      	str	r3, [r7, #0]
            break;
 80006c4:	bf00      	nop
    }

    lcd_send_cmd (col);
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff ffb2 	bl	8000634 <lcd_send_cmd>
}
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <lcd_init>:


void lcd_init (void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	osDelay(50);  // wait for >40ms
 80006dc:	2032      	movs	r0, #50	; 0x32
 80006de:	f002 fdd7 	bl	8003290 <osDelay>
	lcd_send_cmd (0x30);
 80006e2:	2030      	movs	r0, #48	; 0x30
 80006e4:	f7ff ffa6 	bl	8000634 <lcd_send_cmd>
	osDelay(5);  // wait for >4.1ms
 80006e8:	2005      	movs	r0, #5
 80006ea:	f002 fdd1 	bl	8003290 <osDelay>
	lcd_send_cmd (0x30);
 80006ee:	2030      	movs	r0, #48	; 0x30
 80006f0:	f7ff ffa0 	bl	8000634 <lcd_send_cmd>
	osDelay(1);  // wait for >100us
 80006f4:	2001      	movs	r0, #1
 80006f6:	f002 fdcb 	bl	8003290 <osDelay>
	lcd_send_cmd (0x30);
 80006fa:	2030      	movs	r0, #48	; 0x30
 80006fc:	f7ff ff9a 	bl	8000634 <lcd_send_cmd>
	osDelay(10);
 8000700:	200a      	movs	r0, #10
 8000702:	f002 fdc5 	bl	8003290 <osDelay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000706:	2020      	movs	r0, #32
 8000708:	f7ff ff94 	bl	8000634 <lcd_send_cmd>
	osDelay(10);
 800070c:	200a      	movs	r0, #10
 800070e:	f002 fdbf 	bl	8003290 <osDelay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000712:	2028      	movs	r0, #40	; 0x28
 8000714:	f7ff ff8e 	bl	8000634 <lcd_send_cmd>
	osDelay(1);
 8000718:	2001      	movs	r0, #1
 800071a:	f002 fdb9 	bl	8003290 <osDelay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800071e:	2008      	movs	r0, #8
 8000720:	f7ff ff88 	bl	8000634 <lcd_send_cmd>
	osDelay(1);
 8000724:	2001      	movs	r0, #1
 8000726:	f002 fdb3 	bl	8003290 <osDelay>
	lcd_send_cmd (0x01);  // clear display
 800072a:	2001      	movs	r0, #1
 800072c:	f7ff ff82 	bl	8000634 <lcd_send_cmd>
	osDelay(1);
 8000730:	2001      	movs	r0, #1
 8000732:	f002 fdad 	bl	8003290 <osDelay>
	osDelay(1);
 8000736:	2001      	movs	r0, #1
 8000738:	f002 fdaa 	bl	8003290 <osDelay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800073c:	2006      	movs	r0, #6
 800073e:	f7ff ff79 	bl	8000634 <lcd_send_cmd>
	osDelay(1);
 8000742:	2001      	movs	r0, #1
 8000744:	f002 fda4 	bl	8003290 <osDelay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000748:	200c      	movs	r0, #12
 800074a:	f7ff ff73 	bl	8000634 <lcd_send_cmd>
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}

08000752 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b082      	sub	sp, #8
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800075a:	e006      	b.n	800076a <lcd_send_string+0x18>
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	1c5a      	adds	r2, r3, #1
 8000760:	607a      	str	r2, [r7, #4]
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ff7f 	bl	8000668 <lcd_send_data>
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d1f4      	bne.n	800075c <lcd_send_string+0xa>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000780:	f000 fa5b 	bl	8000c3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000784:	f000 f81e 	bl	80007c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000788:	f000 f904 	bl	8000994 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800078c:	f000 f8b6 	bl	80008fc <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000790:	f000 f87e 	bl	8000890 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 8000794:	4807      	ldr	r0, [pc, #28]	; (80007b4 <main+0x38>)
 8000796:	f001 fd6f 	bl	8002278 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800079a:	f002 fc69 	bl	8003070 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mainTask */
  mainTaskHandle = osThreadNew(StartMainTask, NULL, &mainTask_attributes);
 800079e:	4a06      	ldr	r2, [pc, #24]	; (80007b8 <main+0x3c>)
 80007a0:	2100      	movs	r1, #0
 80007a2:	4806      	ldr	r0, [pc, #24]	; (80007bc <main+0x40>)
 80007a4:	f002 fcce 	bl	8003144 <osThreadNew>
 80007a8:	4602      	mov	r2, r0
 80007aa:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <main+0x44>)
 80007ac:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007ae:	f002 fc93 	bl	80030d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <main+0x36>
 80007b4:	20001938 	.word	0x20001938
 80007b8:	08005bc0 	.word	0x08005bc0
 80007bc:	08000a41 	.word	0x08000a41
 80007c0:	20001934 	.word	0x20001934

080007c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b0a4      	sub	sp, #144	; 0x90
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007ce:	2238      	movs	r2, #56	; 0x38
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f005 f9b9 	bl	8005b4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007e8:	463b      	mov	r3, r7
 80007ea:	2244      	movs	r2, #68	; 0x44
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f005 f9ab 	bl	8005b4a <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007f4:	2000      	movs	r0, #0
 80007f6:	f000 fd0f 	bl	8001218 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007fa:	2302      	movs	r3, #2
 80007fc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000802:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000804:	2340      	movs	r3, #64	; 0x40
 8000806:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000808:	2302      	movs	r3, #2
 800080a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800080c:	2302      	movs	r3, #2
 800080e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000810:	2304      	movs	r3, #4
 8000812:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000814:	2355      	movs	r3, #85	; 0x55
 8000816:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800081a:	2302      	movs	r3, #2
 800081c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000820:	2302      	movs	r3, #2
 8000822:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000826:	2302      	movs	r3, #2
 8000828:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000830:	4618      	mov	r0, r3
 8000832:	f000 fda5 	bl	8001380 <HAL_RCC_OscConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800083c:	f000 f909 	bl	8000a52 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000840:	230f      	movs	r3, #15
 8000842:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000844:	2303      	movs	r3, #3
 8000846:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800084c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000850:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000856:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800085a:	2104      	movs	r1, #4
 800085c:	4618      	mov	r0, r3
 800085e:	f001 f8a7 	bl	80019b0 <HAL_RCC_ClockConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000868:	f000 f8f3 	bl	8000a52 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800086c:	2302      	movs	r3, #2
 800086e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000870:	2300      	movs	r3, #0
 8000872:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000874:	463b      	mov	r3, r7
 8000876:	4618      	mov	r0, r3
 8000878:	f001 fab6 	bl	8001de8 <HAL_RCCEx_PeriphCLKConfig>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000882:	f000 f8e6 	bl	8000a52 <Error_Handler>
  }
}
 8000886:	bf00      	nop
 8000888:	3790      	adds	r7, #144	; 0x90
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
	...

08000890 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_TIM6_Init+0x64>)
 80008a2:	4a15      	ldr	r2, [pc, #84]	; (80008f8 <MX_TIM6_Init+0x68>)
 80008a4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 170-1;
 80008a6:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <MX_TIM6_Init+0x64>)
 80008a8:	22a9      	movs	r2, #169	; 0xa9
 80008aa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ac:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_TIM6_Init+0x64>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65534;
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <MX_TIM6_Init+0x64>)
 80008b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80008b8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_TIM6_Init+0x64>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80008c0:	480c      	ldr	r0, [pc, #48]	; (80008f4 <MX_TIM6_Init+0x64>)
 80008c2:	f001 fc81 	bl	80021c8 <HAL_TIM_Base_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80008cc:	f000 f8c1 	bl	8000a52 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d0:	2300      	movs	r3, #0
 80008d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	4619      	mov	r1, r3
 80008dc:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_TIM6_Init+0x64>)
 80008de:	f001 fdbd 	bl	800245c <HAL_TIMEx_MasterConfigSynchronization>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80008e8:	f000 f8b3 	bl	8000a52 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20001938 	.word	0x20001938
 80008f8:	40001000 	.word	0x40001000

080008fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000900:	4b22      	ldr	r3, [pc, #136]	; (800098c <MX_USART2_UART_Init+0x90>)
 8000902:	4a23      	ldr	r2, [pc, #140]	; (8000990 <MX_USART2_UART_Init+0x94>)
 8000904:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000906:	4b21      	ldr	r3, [pc, #132]	; (800098c <MX_USART2_UART_Init+0x90>)
 8000908:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800090c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800090e:	4b1f      	ldr	r3, [pc, #124]	; (800098c <MX_USART2_UART_Init+0x90>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000914:	4b1d      	ldr	r3, [pc, #116]	; (800098c <MX_USART2_UART_Init+0x90>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800091a:	4b1c      	ldr	r3, [pc, #112]	; (800098c <MX_USART2_UART_Init+0x90>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000920:	4b1a      	ldr	r3, [pc, #104]	; (800098c <MX_USART2_UART_Init+0x90>)
 8000922:	220c      	movs	r2, #12
 8000924:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000926:	4b19      	ldr	r3, [pc, #100]	; (800098c <MX_USART2_UART_Init+0x90>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800092c:	4b17      	ldr	r3, [pc, #92]	; (800098c <MX_USART2_UART_Init+0x90>)
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000932:	4b16      	ldr	r3, [pc, #88]	; (800098c <MX_USART2_UART_Init+0x90>)
 8000934:	2200      	movs	r2, #0
 8000936:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000938:	4b14      	ldr	r3, [pc, #80]	; (800098c <MX_USART2_UART_Init+0x90>)
 800093a:	2200      	movs	r2, #0
 800093c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800093e:	4b13      	ldr	r3, [pc, #76]	; (800098c <MX_USART2_UART_Init+0x90>)
 8000940:	2200      	movs	r2, #0
 8000942:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000944:	4811      	ldr	r0, [pc, #68]	; (800098c <MX_USART2_UART_Init+0x90>)
 8000946:	f001 fe0b 	bl	8002560 <HAL_UART_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000950:	f000 f87f 	bl	8000a52 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000954:	2100      	movs	r1, #0
 8000956:	480d      	ldr	r0, [pc, #52]	; (800098c <MX_USART2_UART_Init+0x90>)
 8000958:	f002 fa9d 	bl	8002e96 <HAL_UARTEx_SetTxFifoThreshold>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000962:	f000 f876 	bl	8000a52 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000966:	2100      	movs	r1, #0
 8000968:	4808      	ldr	r0, [pc, #32]	; (800098c <MX_USART2_UART_Init+0x90>)
 800096a:	f002 fad2 	bl	8002f12 <HAL_UARTEx_SetRxFifoThreshold>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000974:	f000 f86d 	bl	8000a52 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000978:	4804      	ldr	r0, [pc, #16]	; (800098c <MX_USART2_UART_Init+0x90>)
 800097a:	f002 fa53 	bl	8002e24 <HAL_UARTEx_DisableFifoMode>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000984:	f000 f865 	bl	8000a52 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20001984 	.word	0x20001984
 8000990:	40004400 	.word	0x40004400

08000994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b088      	sub	sp, #32
 8000998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	4b23      	ldr	r3, [pc, #140]	; (8000a38 <MX_GPIO_Init+0xa4>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	4a22      	ldr	r2, [pc, #136]	; (8000a38 <MX_GPIO_Init+0xa4>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b6:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <MX_GPIO_Init+0xa4>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c2:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <MX_GPIO_Init+0xa4>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	4a1c      	ldr	r2, [pc, #112]	; (8000a38 <MX_GPIO_Init+0xa4>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ce:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <MX_GPIO_Init+0xa4>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80009da:	2200      	movs	r2, #0
 80009dc:	21f3      	movs	r1, #243	; 0xf3
 80009de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e2:	f000 fc01 	bl	80011e8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ec:	4813      	ldr	r0, [pc, #76]	; (8000a3c <MX_GPIO_Init+0xa8>)
 80009ee:	f000 fbfb 	bl	80011e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80009f2:	23f3      	movs	r3, #243	; 0xf3
 80009f4:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 030c 	add.w	r3, r7, #12
 8000a06:	4619      	mov	r1, r3
 8000a08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0c:	f000 fa6a 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a22:	f107 030c 	add.w	r3, r7, #12
 8000a26:	4619      	mov	r1, r3
 8000a28:	4804      	ldr	r0, [pc, #16]	; (8000a3c <MX_GPIO_Init+0xa8>)
 8000a2a:	f000 fa5b 	bl	8000ee4 <HAL_GPIO_Init>

}
 8000a2e:	bf00      	nop
 8000a30:	3720      	adds	r7, #32
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	48000400 	.word	0x48000400

08000a40 <StartMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void *argument)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	init_app();
 8000a48:	f7ff fd6a 	bl	8000520 <init_app>
	for(;;)
	{
		tick_app();
 8000a4c:	f7ff fd80 	bl	8000550 <tick_app>
 8000a50:	e7fc      	b.n	8000a4c <StartMainTask+0xc>

08000a52 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a56:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <Error_Handler+0x6>
	...

08000a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a62:	4b12      	ldr	r3, [pc, #72]	; (8000aac <HAL_MspInit+0x50>)
 8000a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a66:	4a11      	ldr	r2, [pc, #68]	; (8000aac <HAL_MspInit+0x50>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <HAL_MspInit+0x50>)
 8000a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <HAL_MspInit+0x50>)
 8000a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7e:	4a0b      	ldr	r2, [pc, #44]	; (8000aac <HAL_MspInit+0x50>)
 8000a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a84:	6593      	str	r3, [r2, #88]	; 0x58
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <HAL_MspInit+0x50>)
 8000a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a92:	2200      	movs	r2, #0
 8000a94:	210f      	movs	r1, #15
 8000a96:	f06f 0001 	mvn.w	r0, #1
 8000a9a:	f000 f9fc 	bl	8000e96 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a9e:	f000 fc5f 	bl	8001360 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40021000 	.word	0x40021000

08000ab0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <HAL_TIM_Base_MspInit+0x38>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d10b      	bne.n	8000ada <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <HAL_TIM_Base_MspInit+0x3c>)
 8000ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac6:	4a09      	ldr	r2, [pc, #36]	; (8000aec <HAL_TIM_Base_MspInit+0x3c>)
 8000ac8:	f043 0310 	orr.w	r3, r3, #16
 8000acc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ace:	4b07      	ldr	r3, [pc, #28]	; (8000aec <HAL_TIM_Base_MspInit+0x3c>)
 8000ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad2:	f003 0310 	and.w	r3, r3, #16
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000ada:	bf00      	nop
 8000adc:	3714      	adds	r7, #20
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	40001000 	.word	0x40001000
 8000aec:	40021000 	.word	0x40021000

08000af0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	; 0x28
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a17      	ldr	r2, [pc, #92]	; (8000b6c <HAL_UART_MspInit+0x7c>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d128      	bne.n	8000b64 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b12:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <HAL_UART_MspInit+0x80>)
 8000b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b16:	4a16      	ldr	r2, [pc, #88]	; (8000b70 <HAL_UART_MspInit+0x80>)
 8000b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b1e:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <HAL_UART_MspInit+0x80>)
 8000b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <HAL_UART_MspInit+0x80>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2e:	4a10      	ldr	r2, [pc, #64]	; (8000b70 <HAL_UART_MspInit+0x80>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <HAL_UART_MspInit+0x80>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000b42:	230c      	movs	r3, #12
 8000b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b52:	2307      	movs	r3, #7
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b60:	f000 f9c0 	bl	8000ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b64:	bf00      	nop
 8000b66:	3728      	adds	r7, #40	; 0x28
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40004400 	.word	0x40004400
 8000b70:	40021000 	.word	0x40021000

08000b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <NMI_Handler+0x4>

08000b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <HardFault_Handler+0x4>

08000b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <MemManage_Handler+0x4>

08000b86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <BusFault_Handler+0x4>

08000b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <UsageFault_Handler+0x4>

08000b92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba4:	f000 f89c 	bl	8000ce0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ba8:	f003 ff64 	bl	8004a74 <xTaskGetSchedulerState>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d001      	beq.n	8000bb6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000bb2:	f004 fd39 	bl	8005628 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <SystemInit+0x28>)
 8000bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bc6:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <SystemInit+0x28>)
 8000bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bd0:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <SystemInit+0x28>)
 8000bd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bd6:	609a      	str	r2, [r3, #8]
#endif
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000be8:	480d      	ldr	r0, [pc, #52]	; (8000c20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bec:	480d      	ldr	r0, [pc, #52]	; (8000c24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bee:	490e      	ldr	r1, [pc, #56]	; (8000c28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bf0:	4a0e      	ldr	r2, [pc, #56]	; (8000c2c <LoopForever+0xe>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000bf4:	e002      	b.n	8000bfc <LoopCopyDataInit>

08000bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfa:	3304      	adds	r3, #4

08000bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c00:	d3f9      	bcc.n	8000bf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c02:	4a0b      	ldr	r2, [pc, #44]	; (8000c30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c04:	4c0b      	ldr	r4, [pc, #44]	; (8000c34 <LoopForever+0x16>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c08:	e001      	b.n	8000c0e <LoopFillZerobss>

08000c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c0c:	3204      	adds	r2, #4

08000c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c10:	d3fb      	bcc.n	8000c0a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c12:	f7ff ffd3 	bl	8000bbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c16:	f004 ff69 	bl	8005aec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c1a:	f7ff fdaf 	bl	800077c <main>

08000c1e <LoopForever>:

LoopForever:
    b LoopForever
 8000c1e:	e7fe      	b.n	8000c1e <LoopForever>
  ldr   r0, =_estack
 8000c20:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c28:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c2c:	08005c24 	.word	0x08005c24
  ldr r2, =_sbss
 8000c30:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c34:	20001a54 	.word	0x20001a54

08000c38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c38:	e7fe      	b.n	8000c38 <ADC1_2_IRQHandler>

08000c3a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c40:	2300      	movs	r3, #0
 8000c42:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c44:	2003      	movs	r0, #3
 8000c46:	f000 f91b 	bl	8000e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c4a:	200f      	movs	r0, #15
 8000c4c:	f000 f80e 	bl	8000c6c <HAL_InitTick>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d002      	beq.n	8000c5c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	71fb      	strb	r3, [r7, #7]
 8000c5a:	e001      	b.n	8000c60 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c5c:	f7ff fefe 	bl	8000a5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c60:	79fb      	ldrb	r3, [r7, #7]

}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c74:	2300      	movs	r3, #0
 8000c76:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c78:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <HAL_InitTick+0x68>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d022      	beq.n	8000cc6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c80:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <HAL_InitTick+0x6c>)
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <HAL_InitTick+0x68>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 f918 	bl	8000eca <HAL_SYSTICK_Config>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d10f      	bne.n	8000cc0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b0f      	cmp	r3, #15
 8000ca4:	d809      	bhi.n	8000cba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	6879      	ldr	r1, [r7, #4]
 8000caa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cae:	f000 f8f2 	bl	8000e96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <HAL_InitTick+0x70>)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6013      	str	r3, [r2, #0]
 8000cb8:	e007      	b.n	8000cca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	73fb      	strb	r3, [r7, #15]
 8000cbe:	e004      	b.n	8000cca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	73fb      	strb	r3, [r7, #15]
 8000cc4:	e001      	b.n	8000cca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000008 	.word	0x20000008
 8000cd8:	20000000 	.word	0x20000000
 8000cdc:	20000004 	.word	0x20000004

08000ce0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <HAL_IncTick+0x1c>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <HAL_IncTick+0x20>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4413      	add	r3, r2
 8000cee:	4a03      	ldr	r2, [pc, #12]	; (8000cfc <HAL_IncTick+0x1c>)
 8000cf0:	6013      	str	r3, [r2, #0]
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	20001a10 	.word	0x20001a10
 8000d00:	20000008 	.word	0x20000008

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <HAL_GetTick+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20001a10 	.word	0x20001a10

08000d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4e:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	60d3      	str	r3, [r2, #12]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d68:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <__NVIC_GetPriorityGrouping+0x18>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	0a1b      	lsrs	r3, r3, #8
 8000d6e:	f003 0307 	and.w	r3, r3, #7
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	6039      	str	r1, [r7, #0]
 8000d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	db0a      	blt.n	8000daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	490c      	ldr	r1, [pc, #48]	; (8000dcc <__NVIC_SetPriority+0x4c>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	0112      	lsls	r2, r2, #4
 8000da0:	b2d2      	uxtb	r2, r2
 8000da2:	440b      	add	r3, r1
 8000da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da8:	e00a      	b.n	8000dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	4908      	ldr	r1, [pc, #32]	; (8000dd0 <__NVIC_SetPriority+0x50>)
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	f003 030f 	and.w	r3, r3, #15
 8000db6:	3b04      	subs	r3, #4
 8000db8:	0112      	lsls	r2, r2, #4
 8000dba:	b2d2      	uxtb	r2, r2
 8000dbc:	440b      	add	r3, r1
 8000dbe:	761a      	strb	r2, [r3, #24]
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000e100 	.word	0xe000e100
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b089      	sub	sp, #36	; 0x24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	f1c3 0307 	rsb	r3, r3, #7
 8000dee:	2b04      	cmp	r3, #4
 8000df0:	bf28      	it	cs
 8000df2:	2304      	movcs	r3, #4
 8000df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	2b06      	cmp	r3, #6
 8000dfc:	d902      	bls.n	8000e04 <NVIC_EncodePriority+0x30>
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3b03      	subs	r3, #3
 8000e02:	e000      	b.n	8000e06 <NVIC_EncodePriority+0x32>
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43da      	mvns	r2, r3
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	401a      	ands	r2, r3
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	fa01 f303 	lsl.w	r3, r1, r3
 8000e26:	43d9      	mvns	r1, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	4313      	orrs	r3, r2
         );
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3724      	adds	r7, #36	; 0x24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
	...

08000e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3b01      	subs	r3, #1
 8000e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e4c:	d301      	bcc.n	8000e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e00f      	b.n	8000e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e52:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <SysTick_Config+0x40>)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e5a:	210f      	movs	r1, #15
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e60:	f7ff ff8e 	bl	8000d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <SysTick_Config+0x40>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e6a:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <SysTick_Config+0x40>)
 8000e6c:	2207      	movs	r2, #7
 8000e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	e000e010 	.word	0xe000e010

08000e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff ff47 	bl	8000d1c <__NVIC_SetPriorityGrouping>
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b086      	sub	sp, #24
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	60b9      	str	r1, [r7, #8]
 8000ea0:	607a      	str	r2, [r7, #4]
 8000ea2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea4:	f7ff ff5e 	bl	8000d64 <__NVIC_GetPriorityGrouping>
 8000ea8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	68b9      	ldr	r1, [r7, #8]
 8000eae:	6978      	ldr	r0, [r7, #20]
 8000eb0:	f7ff ff90 	bl	8000dd4 <NVIC_EncodePriority>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff5f 	bl	8000d80 <__NVIC_SetPriority>
}
 8000ec2:	bf00      	nop
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ffb2 	bl	8000e3c <SysTick_Config>
 8000ed8:	4603      	mov	r3, r0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b087      	sub	sp, #28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000ef2:	e15a      	b.n	80011aa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	2101      	movs	r1, #1
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	fa01 f303 	lsl.w	r3, r1, r3
 8000f00:	4013      	ands	r3, r2
 8000f02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f000 814c 	beq.w	80011a4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d00b      	beq.n	8000f2c <HAL_GPIO_Init+0x48>
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d007      	beq.n	8000f2c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f20:	2b11      	cmp	r3, #17
 8000f22:	d003      	beq.n	8000f2c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2b12      	cmp	r3, #18
 8000f2a:	d130      	bne.n	8000f8e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	2203      	movs	r2, #3
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4013      	ands	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	68da      	ldr	r2, [r3, #12]
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f62:	2201      	movs	r2, #1
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	091b      	lsrs	r3, r3, #4
 8000f78:	f003 0201 	and.w	r2, r3, #1
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	2203      	movs	r2, #3
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	689a      	ldr	r2, [r3, #8]
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_Init+0xea>
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	2b12      	cmp	r3, #18
 8000fcc:	d123      	bne.n	8001016 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	08da      	lsrs	r2, r3, #3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3208      	adds	r2, #8
 8000fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	220f      	movs	r2, #15
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	691a      	ldr	r2, [r3, #16]
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	f003 0307 	and.w	r3, r3, #7
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	08da      	lsrs	r2, r3, #3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3208      	adds	r2, #8
 8001010:	6939      	ldr	r1, [r7, #16]
 8001012:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	2203      	movs	r2, #3
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	4013      	ands	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f003 0203 	and.w	r2, r3, #3
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	4313      	orrs	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001052:	2b00      	cmp	r3, #0
 8001054:	f000 80a6 	beq.w	80011a4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001058:	4b5b      	ldr	r3, [pc, #364]	; (80011c8 <HAL_GPIO_Init+0x2e4>)
 800105a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800105c:	4a5a      	ldr	r2, [pc, #360]	; (80011c8 <HAL_GPIO_Init+0x2e4>)
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	6613      	str	r3, [r2, #96]	; 0x60
 8001064:	4b58      	ldr	r3, [pc, #352]	; (80011c8 <HAL_GPIO_Init+0x2e4>)
 8001066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001070:	4a56      	ldr	r2, [pc, #344]	; (80011cc <HAL_GPIO_Init+0x2e8>)
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	089b      	lsrs	r3, r3, #2
 8001076:	3302      	adds	r3, #2
 8001078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	f003 0303 	and.w	r3, r3, #3
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	220f      	movs	r2, #15
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800109a:	d01f      	beq.n	80010dc <HAL_GPIO_Init+0x1f8>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a4c      	ldr	r2, [pc, #304]	; (80011d0 <HAL_GPIO_Init+0x2ec>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d019      	beq.n	80010d8 <HAL_GPIO_Init+0x1f4>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a4b      	ldr	r2, [pc, #300]	; (80011d4 <HAL_GPIO_Init+0x2f0>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d013      	beq.n	80010d4 <HAL_GPIO_Init+0x1f0>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a4a      	ldr	r2, [pc, #296]	; (80011d8 <HAL_GPIO_Init+0x2f4>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d00d      	beq.n	80010d0 <HAL_GPIO_Init+0x1ec>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a49      	ldr	r2, [pc, #292]	; (80011dc <HAL_GPIO_Init+0x2f8>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d007      	beq.n	80010cc <HAL_GPIO_Init+0x1e8>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a48      	ldr	r2, [pc, #288]	; (80011e0 <HAL_GPIO_Init+0x2fc>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d101      	bne.n	80010c8 <HAL_GPIO_Init+0x1e4>
 80010c4:	2305      	movs	r3, #5
 80010c6:	e00a      	b.n	80010de <HAL_GPIO_Init+0x1fa>
 80010c8:	2306      	movs	r3, #6
 80010ca:	e008      	b.n	80010de <HAL_GPIO_Init+0x1fa>
 80010cc:	2304      	movs	r3, #4
 80010ce:	e006      	b.n	80010de <HAL_GPIO_Init+0x1fa>
 80010d0:	2303      	movs	r3, #3
 80010d2:	e004      	b.n	80010de <HAL_GPIO_Init+0x1fa>
 80010d4:	2302      	movs	r3, #2
 80010d6:	e002      	b.n	80010de <HAL_GPIO_Init+0x1fa>
 80010d8:	2301      	movs	r3, #1
 80010da:	e000      	b.n	80010de <HAL_GPIO_Init+0x1fa>
 80010dc:	2300      	movs	r3, #0
 80010de:	697a      	ldr	r2, [r7, #20]
 80010e0:	f002 0203 	and.w	r2, r2, #3
 80010e4:	0092      	lsls	r2, r2, #2
 80010e6:	4093      	lsls	r3, r2
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010ee:	4937      	ldr	r1, [pc, #220]	; (80011cc <HAL_GPIO_Init+0x2e8>)
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	089b      	lsrs	r3, r3, #2
 80010f4:	3302      	adds	r3, #2
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010fc:	4b39      	ldr	r3, [pc, #228]	; (80011e4 <HAL_GPIO_Init+0x300>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	43db      	mvns	r3, r3
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4013      	ands	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001120:	4a30      	ldr	r2, [pc, #192]	; (80011e4 <HAL_GPIO_Init+0x300>)
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001126:	4b2f      	ldr	r3, [pc, #188]	; (80011e4 <HAL_GPIO_Init+0x300>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	43db      	mvns	r3, r3
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	4013      	ands	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4313      	orrs	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800114a:	4a26      	ldr	r2, [pc, #152]	; (80011e4 <HAL_GPIO_Init+0x300>)
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001150:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <HAL_GPIO_Init+0x300>)
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	43db      	mvns	r3, r3
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4013      	ands	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	4313      	orrs	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001174:	4a1b      	ldr	r2, [pc, #108]	; (80011e4 <HAL_GPIO_Init+0x300>)
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800117a:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <HAL_GPIO_Init+0x300>)
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	43db      	mvns	r3, r3
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4013      	ands	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	4313      	orrs	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800119e:	4a11      	ldr	r2, [pc, #68]	; (80011e4 <HAL_GPIO_Init+0x300>)
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	3301      	adds	r3, #1
 80011a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	fa22 f303 	lsr.w	r3, r2, r3
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	f47f ae9d 	bne.w	8000ef4 <HAL_GPIO_Init+0x10>
  }
}
 80011ba:	bf00      	nop
 80011bc:	371c      	adds	r7, #28
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40010000 	.word	0x40010000
 80011d0:	48000400 	.word	0x48000400
 80011d4:	48000800 	.word	0x48000800
 80011d8:	48000c00 	.word	0x48000c00
 80011dc:	48001000 	.word	0x48001000
 80011e0:	48001400 	.word	0x48001400
 80011e4:	40010400 	.word	0x40010400

080011e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	807b      	strh	r3, [r7, #2]
 80011f4:	4613      	mov	r3, r2
 80011f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011f8:	787b      	ldrb	r3, [r7, #1]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011fe:	887a      	ldrh	r2, [r7, #2]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001204:	e002      	b.n	800120c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001206:	887a      	ldrh	r2, [r7, #2]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d141      	bne.n	80012aa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001226:	4b4b      	ldr	r3, [pc, #300]	; (8001354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800122e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001232:	d131      	bne.n	8001298 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001234:	4b47      	ldr	r3, [pc, #284]	; (8001354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001236:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800123a:	4a46      	ldr	r2, [pc, #280]	; (8001354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800123c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001240:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001244:	4b43      	ldr	r3, [pc, #268]	; (8001354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800124c:	4a41      	ldr	r2, [pc, #260]	; (8001354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800124e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001252:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001254:	4b40      	ldr	r3, [pc, #256]	; (8001358 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2232      	movs	r2, #50	; 0x32
 800125a:	fb02 f303 	mul.w	r3, r2, r3
 800125e:	4a3f      	ldr	r2, [pc, #252]	; (800135c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001260:	fba2 2303 	umull	r2, r3, r2, r3
 8001264:	0c9b      	lsrs	r3, r3, #18
 8001266:	3301      	adds	r3, #1
 8001268:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800126a:	e002      	b.n	8001272 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	3b01      	subs	r3, #1
 8001270:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001272:	4b38      	ldr	r3, [pc, #224]	; (8001354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800127a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800127e:	d102      	bne.n	8001286 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1f2      	bne.n	800126c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001286:	4b33      	ldr	r3, [pc, #204]	; (8001354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800128e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001292:	d158      	bne.n	8001346 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e057      	b.n	8001348 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001298:	4b2e      	ldr	r3, [pc, #184]	; (8001354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800129a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800129e:	4a2d      	ldr	r2, [pc, #180]	; (8001354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80012a8:	e04d      	b.n	8001346 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012b0:	d141      	bne.n	8001336 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012b2:	4b28      	ldr	r3, [pc, #160]	; (8001354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012be:	d131      	bne.n	8001324 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012c0:	4b24      	ldr	r3, [pc, #144]	; (8001354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012c6:	4a23      	ldr	r2, [pc, #140]	; (8001354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012d0:	4b20      	ldr	r3, [pc, #128]	; (8001354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012d8:	4a1e      	ldr	r2, [pc, #120]	; (8001354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012e0:	4b1d      	ldr	r3, [pc, #116]	; (8001358 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2232      	movs	r2, #50	; 0x32
 80012e6:	fb02 f303 	mul.w	r3, r2, r3
 80012ea:	4a1c      	ldr	r2, [pc, #112]	; (800135c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80012ec:	fba2 2303 	umull	r2, r3, r2, r3
 80012f0:	0c9b      	lsrs	r3, r3, #18
 80012f2:	3301      	adds	r3, #1
 80012f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012f6:	e002      	b.n	80012fe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800130a:	d102      	bne.n	8001312 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1f2      	bne.n	80012f8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800131a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800131e:	d112      	bne.n	8001346 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e011      	b.n	8001348 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001324:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001326:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800132a:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800132c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001330:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001334:	e007      	b.n	8001346 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001336:	4b07      	ldr	r3, [pc, #28]	; (8001354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800133e:	4a05      	ldr	r2, [pc, #20]	; (8001354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001340:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001344:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	40007000 	.word	0x40007000
 8001358:	20000000 	.word	0x20000000
 800135c:	431bde83 	.word	0x431bde83

08001360 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	4a04      	ldr	r2, [pc, #16]	; (800137c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800136a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800136e:	6093      	str	r3, [r2, #8]
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40007000 	.word	0x40007000

08001380 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e308      	b.n	80019a4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b00      	cmp	r3, #0
 800139c:	d075      	beq.n	800148a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800139e:	4ba3      	ldr	r3, [pc, #652]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 030c 	and.w	r3, r3, #12
 80013a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013a8:	4ba0      	ldr	r3, [pc, #640]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	f003 0303 	and.w	r3, r3, #3
 80013b0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	2b0c      	cmp	r3, #12
 80013b6:	d102      	bne.n	80013be <HAL_RCC_OscConfig+0x3e>
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	2b03      	cmp	r3, #3
 80013bc:	d002      	beq.n	80013c4 <HAL_RCC_OscConfig+0x44>
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	2b08      	cmp	r3, #8
 80013c2:	d10b      	bne.n	80013dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c4:	4b99      	ldr	r3, [pc, #612]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d05b      	beq.n	8001488 <HAL_RCC_OscConfig+0x108>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d157      	bne.n	8001488 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e2e3      	b.n	80019a4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013e4:	d106      	bne.n	80013f4 <HAL_RCC_OscConfig+0x74>
 80013e6:	4b91      	ldr	r3, [pc, #580]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a90      	ldr	r2, [pc, #576]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80013ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	e01d      	b.n	8001430 <HAL_RCC_OscConfig+0xb0>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013fc:	d10c      	bne.n	8001418 <HAL_RCC_OscConfig+0x98>
 80013fe:	4b8b      	ldr	r3, [pc, #556]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a8a      	ldr	r2, [pc, #552]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 8001404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	4b88      	ldr	r3, [pc, #544]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a87      	ldr	r2, [pc, #540]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 8001410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	e00b      	b.n	8001430 <HAL_RCC_OscConfig+0xb0>
 8001418:	4b84      	ldr	r3, [pc, #528]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a83      	ldr	r2, [pc, #524]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 800141e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b81      	ldr	r3, [pc, #516]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a80      	ldr	r2, [pc, #512]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 800142a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800142e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d013      	beq.n	8001460 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001438:	f7ff fc64 	bl	8000d04 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001440:	f7ff fc60 	bl	8000d04 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b64      	cmp	r3, #100	; 0x64
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e2a8      	b.n	80019a4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001452:	4b76      	ldr	r3, [pc, #472]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0f0      	beq.n	8001440 <HAL_RCC_OscConfig+0xc0>
 800145e:	e014      	b.n	800148a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001460:	f7ff fc50 	bl	8000d04 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001468:	f7ff fc4c 	bl	8000d04 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b64      	cmp	r3, #100	; 0x64
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e294      	b.n	80019a4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800147a:	4b6c      	ldr	r3, [pc, #432]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f0      	bne.n	8001468 <HAL_RCC_OscConfig+0xe8>
 8001486:	e000      	b.n	800148a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d075      	beq.n	8001582 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001496:	4b65      	ldr	r3, [pc, #404]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 030c 	and.w	r3, r3, #12
 800149e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014a0:	4b62      	ldr	r3, [pc, #392]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	f003 0303 	and.w	r3, r3, #3
 80014a8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	2b0c      	cmp	r3, #12
 80014ae:	d102      	bne.n	80014b6 <HAL_RCC_OscConfig+0x136>
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d002      	beq.n	80014bc <HAL_RCC_OscConfig+0x13c>
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	2b04      	cmp	r3, #4
 80014ba:	d11f      	bne.n	80014fc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014bc:	4b5b      	ldr	r3, [pc, #364]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d005      	beq.n	80014d4 <HAL_RCC_OscConfig+0x154>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d101      	bne.n	80014d4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e267      	b.n	80019a4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d4:	4b55      	ldr	r3, [pc, #340]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	061b      	lsls	r3, r3, #24
 80014e2:	4952      	ldr	r1, [pc, #328]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80014e4:	4313      	orrs	r3, r2
 80014e6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80014e8:	4b51      	ldr	r3, [pc, #324]	; (8001630 <HAL_RCC_OscConfig+0x2b0>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fbbd 	bl	8000c6c <HAL_InitTick>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d043      	beq.n	8001580 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e253      	b.n	80019a4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d023      	beq.n	800154c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001504:	4b49      	ldr	r3, [pc, #292]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a48      	ldr	r2, [pc, #288]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 800150a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800150e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001510:	f7ff fbf8 	bl	8000d04 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001518:	f7ff fbf4 	bl	8000d04 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e23c      	b.n	80019a4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800152a:	4b40      	ldr	r3, [pc, #256]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0f0      	beq.n	8001518 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001536:	4b3d      	ldr	r3, [pc, #244]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	061b      	lsls	r3, r3, #24
 8001544:	4939      	ldr	r1, [pc, #228]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 8001546:	4313      	orrs	r3, r2
 8001548:	604b      	str	r3, [r1, #4]
 800154a:	e01a      	b.n	8001582 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800154c:	4b37      	ldr	r3, [pc, #220]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a36      	ldr	r2, [pc, #216]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 8001552:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001556:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001558:	f7ff fbd4 	bl	8000d04 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001560:	f7ff fbd0 	bl	8000d04 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e218      	b.n	80019a4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001572:	4b2e      	ldr	r3, [pc, #184]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f0      	bne.n	8001560 <HAL_RCC_OscConfig+0x1e0>
 800157e:	e000      	b.n	8001582 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001580:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	2b00      	cmp	r3, #0
 800158c:	d03c      	beq.n	8001608 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d01c      	beq.n	80015d0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001596:	4b25      	ldr	r3, [pc, #148]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 8001598:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800159c:	4a23      	ldr	r2, [pc, #140]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a6:	f7ff fbad 	bl	8000d04 <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ae:	f7ff fba9 	bl	8000d04 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e1f1      	b.n	80019a4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015c0:	4b1a      	ldr	r3, [pc, #104]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80015c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0ef      	beq.n	80015ae <HAL_RCC_OscConfig+0x22e>
 80015ce:	e01b      	b.n	8001608 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015d0:	4b16      	ldr	r3, [pc, #88]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80015d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015d6:	4a15      	ldr	r2, [pc, #84]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80015d8:	f023 0301 	bic.w	r3, r3, #1
 80015dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e0:	f7ff fb90 	bl	8000d04 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e8:	f7ff fb8c 	bl	8000d04 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e1d4      	b.n	80019a4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015fa:	4b0c      	ldr	r3, [pc, #48]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 80015fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1ef      	bne.n	80015e8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b00      	cmp	r3, #0
 8001612:	f000 80ab 	beq.w	800176c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001616:	2300      	movs	r3, #0
 8001618:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800161a:	4b04      	ldr	r3, [pc, #16]	; (800162c <HAL_RCC_OscConfig+0x2ac>)
 800161c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d106      	bne.n	8001634 <HAL_RCC_OscConfig+0x2b4>
 8001626:	2301      	movs	r3, #1
 8001628:	e005      	b.n	8001636 <HAL_RCC_OscConfig+0x2b6>
 800162a:	bf00      	nop
 800162c:	40021000 	.word	0x40021000
 8001630:	20000004 	.word	0x20000004
 8001634:	2300      	movs	r3, #0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00d      	beq.n	8001656 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800163a:	4baf      	ldr	r3, [pc, #700]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 800163c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800163e:	4aae      	ldr	r2, [pc, #696]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 8001640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001644:	6593      	str	r3, [r2, #88]	; 0x58
 8001646:	4bac      	ldr	r3, [pc, #688]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 8001648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001652:	2301      	movs	r3, #1
 8001654:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001656:	4ba9      	ldr	r3, [pc, #676]	; (80018fc <HAL_RCC_OscConfig+0x57c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800165e:	2b00      	cmp	r3, #0
 8001660:	d118      	bne.n	8001694 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001662:	4ba6      	ldr	r3, [pc, #664]	; (80018fc <HAL_RCC_OscConfig+0x57c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4aa5      	ldr	r2, [pc, #660]	; (80018fc <HAL_RCC_OscConfig+0x57c>)
 8001668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800166c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800166e:	f7ff fb49 	bl	8000d04 <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001676:	f7ff fb45 	bl	8000d04 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e18d      	b.n	80019a4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001688:	4b9c      	ldr	r3, [pc, #624]	; (80018fc <HAL_RCC_OscConfig+0x57c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0f0      	beq.n	8001676 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d108      	bne.n	80016ae <HAL_RCC_OscConfig+0x32e>
 800169c:	4b96      	ldr	r3, [pc, #600]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 800169e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016a2:	4a95      	ldr	r2, [pc, #596]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016ac:	e024      	b.n	80016f8 <HAL_RCC_OscConfig+0x378>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2b05      	cmp	r3, #5
 80016b4:	d110      	bne.n	80016d8 <HAL_RCC_OscConfig+0x358>
 80016b6:	4b90      	ldr	r3, [pc, #576]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 80016b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016bc:	4a8e      	ldr	r2, [pc, #568]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 80016be:	f043 0304 	orr.w	r3, r3, #4
 80016c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016c6:	4b8c      	ldr	r3, [pc, #560]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 80016c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016cc:	4a8a      	ldr	r2, [pc, #552]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016d6:	e00f      	b.n	80016f8 <HAL_RCC_OscConfig+0x378>
 80016d8:	4b87      	ldr	r3, [pc, #540]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 80016da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016de:	4a86      	ldr	r2, [pc, #536]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 80016e0:	f023 0301 	bic.w	r3, r3, #1
 80016e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016e8:	4b83      	ldr	r3, [pc, #524]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 80016ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ee:	4a82      	ldr	r2, [pc, #520]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 80016f0:	f023 0304 	bic.w	r3, r3, #4
 80016f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d016      	beq.n	800172e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001700:	f7ff fb00 	bl	8000d04 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001706:	e00a      	b.n	800171e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001708:	f7ff fafc 	bl	8000d04 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	f241 3288 	movw	r2, #5000	; 0x1388
 8001716:	4293      	cmp	r3, r2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e142      	b.n	80019a4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800171e:	4b76      	ldr	r3, [pc, #472]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 8001720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0ed      	beq.n	8001708 <HAL_RCC_OscConfig+0x388>
 800172c:	e015      	b.n	800175a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800172e:	f7ff fae9 	bl	8000d04 <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001734:	e00a      	b.n	800174c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001736:	f7ff fae5 	bl	8000d04 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	f241 3288 	movw	r2, #5000	; 0x1388
 8001744:	4293      	cmp	r3, r2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e12b      	b.n	80019a4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800174c:	4b6a      	ldr	r3, [pc, #424]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 800174e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1ed      	bne.n	8001736 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800175a:	7ffb      	ldrb	r3, [r7, #31]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d105      	bne.n	800176c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001760:	4b65      	ldr	r3, [pc, #404]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 8001762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001764:	4a64      	ldr	r2, [pc, #400]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 8001766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800176a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0320 	and.w	r3, r3, #32
 8001774:	2b00      	cmp	r3, #0
 8001776:	d03c      	beq.n	80017f2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d01c      	beq.n	80017ba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001780:	4b5d      	ldr	r3, [pc, #372]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 8001782:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001786:	4a5c      	ldr	r2, [pc, #368]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001790:	f7ff fab8 	bl	8000d04 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001798:	f7ff fab4 	bl	8000d04 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e0fc      	b.n	80019a4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017aa:	4b53      	ldr	r3, [pc, #332]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 80017ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0ef      	beq.n	8001798 <HAL_RCC_OscConfig+0x418>
 80017b8:	e01b      	b.n	80017f2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017ba:	4b4f      	ldr	r3, [pc, #316]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 80017bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017c0:	4a4d      	ldr	r2, [pc, #308]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 80017c2:	f023 0301 	bic.w	r3, r3, #1
 80017c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ca:	f7ff fa9b 	bl	8000d04 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017d2:	f7ff fa97 	bl	8000d04 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e0df      	b.n	80019a4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017e4:	4b44      	ldr	r3, [pc, #272]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 80017e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1ef      	bne.n	80017d2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 80d3 	beq.w	80019a2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017fc:	4b3e      	ldr	r3, [pc, #248]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f003 030c 	and.w	r3, r3, #12
 8001804:	2b0c      	cmp	r3, #12
 8001806:	f000 808d 	beq.w	8001924 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d15a      	bne.n	80018c8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001812:	4b39      	ldr	r3, [pc, #228]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a38      	ldr	r2, [pc, #224]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 8001818:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800181c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181e:	f7ff fa71 	bl	8000d04 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001826:	f7ff fa6d 	bl	8000d04 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e0b5      	b.n	80019a4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001838:	4b2f      	ldr	r3, [pc, #188]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1f0      	bne.n	8001826 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001844:	4b2c      	ldr	r3, [pc, #176]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	4b2d      	ldr	r3, [pc, #180]	; (8001900 <HAL_RCC_OscConfig+0x580>)
 800184a:	4013      	ands	r3, r2
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	6a11      	ldr	r1, [r2, #32]
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001854:	3a01      	subs	r2, #1
 8001856:	0112      	lsls	r2, r2, #4
 8001858:	4311      	orrs	r1, r2
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800185e:	0212      	lsls	r2, r2, #8
 8001860:	4311      	orrs	r1, r2
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001866:	0852      	lsrs	r2, r2, #1
 8001868:	3a01      	subs	r2, #1
 800186a:	0552      	lsls	r2, r2, #21
 800186c:	4311      	orrs	r1, r2
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001872:	0852      	lsrs	r2, r2, #1
 8001874:	3a01      	subs	r2, #1
 8001876:	0652      	lsls	r2, r2, #25
 8001878:	4311      	orrs	r1, r2
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800187e:	06d2      	lsls	r2, r2, #27
 8001880:	430a      	orrs	r2, r1
 8001882:	491d      	ldr	r1, [pc, #116]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 8001884:	4313      	orrs	r3, r2
 8001886:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001888:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a1a      	ldr	r2, [pc, #104]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 800188e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001892:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001894:	4b18      	ldr	r3, [pc, #96]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	4a17      	ldr	r2, [pc, #92]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 800189a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800189e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a0:	f7ff fa30 	bl	8000d04 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a8:	f7ff fa2c 	bl	8000d04 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e074      	b.n	80019a4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ba:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0f0      	beq.n	80018a8 <HAL_RCC_OscConfig+0x528>
 80018c6:	e06c      	b.n	80019a2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 80018ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018d2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80018d4:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	4a07      	ldr	r2, [pc, #28]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 80018da:	f023 0303 	bic.w	r3, r3, #3
 80018de:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80018e0:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 80018e6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80018ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f0:	f7ff fa08 	bl	8000d04 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018f6:	e00e      	b.n	8001916 <HAL_RCC_OscConfig+0x596>
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40007000 	.word	0x40007000
 8001900:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001904:	f7ff f9fe 	bl	8000d04 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e046      	b.n	80019a4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001916:	4b25      	ldr	r3, [pc, #148]	; (80019ac <HAL_RCC_OscConfig+0x62c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x584>
 8001922:	e03e      	b.n	80019a2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69db      	ldr	r3, [r3, #28]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d101      	bne.n	8001930 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e039      	b.n	80019a4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001930:	4b1e      	ldr	r3, [pc, #120]	; (80019ac <HAL_RCC_OscConfig+0x62c>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	f003 0203 	and.w	r2, r3, #3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	429a      	cmp	r2, r3
 8001942:	d12c      	bne.n	800199e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194e:	3b01      	subs	r3, #1
 8001950:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001952:	429a      	cmp	r2, r3
 8001954:	d123      	bne.n	800199e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001960:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001962:	429a      	cmp	r2, r3
 8001964:	d11b      	bne.n	800199e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001970:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001972:	429a      	cmp	r2, r3
 8001974:	d113      	bne.n	800199e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001980:	085b      	lsrs	r3, r3, #1
 8001982:	3b01      	subs	r3, #1
 8001984:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001986:	429a      	cmp	r2, r3
 8001988:	d109      	bne.n	800199e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001994:	085b      	lsrs	r3, r3, #1
 8001996:	3b01      	subs	r3, #1
 8001998:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800199a:	429a      	cmp	r2, r3
 800199c:	d001      	beq.n	80019a2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e000      	b.n	80019a4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3720      	adds	r7, #32
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40021000 	.word	0x40021000

080019b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e11e      	b.n	8001c06 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019c8:	4b91      	ldr	r3, [pc, #580]	; (8001c10 <HAL_RCC_ClockConfig+0x260>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 030f 	and.w	r3, r3, #15
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d910      	bls.n	80019f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d6:	4b8e      	ldr	r3, [pc, #568]	; (8001c10 <HAL_RCC_ClockConfig+0x260>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f023 020f 	bic.w	r2, r3, #15
 80019de:	498c      	ldr	r1, [pc, #560]	; (8001c10 <HAL_RCC_ClockConfig+0x260>)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e6:	4b8a      	ldr	r3, [pc, #552]	; (8001c10 <HAL_RCC_ClockConfig+0x260>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d001      	beq.n	80019f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e106      	b.n	8001c06 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d073      	beq.n	8001aec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b03      	cmp	r3, #3
 8001a0a:	d129      	bne.n	8001a60 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a0c:	4b81      	ldr	r3, [pc, #516]	; (8001c14 <HAL_RCC_ClockConfig+0x264>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e0f4      	b.n	8001c06 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001a1c:	f000 f99e 	bl	8001d5c <RCC_GetSysClockFreqFromPLLSource>
 8001a20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	4a7c      	ldr	r2, [pc, #496]	; (8001c18 <HAL_RCC_ClockConfig+0x268>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d93f      	bls.n	8001aaa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a2a:	4b7a      	ldr	r3, [pc, #488]	; (8001c14 <HAL_RCC_ClockConfig+0x264>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d009      	beq.n	8001a4a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d033      	beq.n	8001aaa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d12f      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a4a:	4b72      	ldr	r3, [pc, #456]	; (8001c14 <HAL_RCC_ClockConfig+0x264>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a52:	4a70      	ldr	r2, [pc, #448]	; (8001c14 <HAL_RCC_ClockConfig+0x264>)
 8001a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a58:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001a5a:	2380      	movs	r3, #128	; 0x80
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	e024      	b.n	8001aaa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d107      	bne.n	8001a78 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a68:	4b6a      	ldr	r3, [pc, #424]	; (8001c14 <HAL_RCC_ClockConfig+0x264>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d109      	bne.n	8001a88 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e0c6      	b.n	8001c06 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a78:	4b66      	ldr	r3, [pc, #408]	; (8001c14 <HAL_RCC_ClockConfig+0x264>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e0be      	b.n	8001c06 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001a88:	f000 f8ce 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 8001a8c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	4a61      	ldr	r2, [pc, #388]	; (8001c18 <HAL_RCC_ClockConfig+0x268>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d909      	bls.n	8001aaa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a96:	4b5f      	ldr	r3, [pc, #380]	; (8001c14 <HAL_RCC_ClockConfig+0x264>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a9e:	4a5d      	ldr	r2, [pc, #372]	; (8001c14 <HAL_RCC_ClockConfig+0x264>)
 8001aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aa4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001aa6:	2380      	movs	r3, #128	; 0x80
 8001aa8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001aaa:	4b5a      	ldr	r3, [pc, #360]	; (8001c14 <HAL_RCC_ClockConfig+0x264>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f023 0203 	bic.w	r2, r3, #3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	4957      	ldr	r1, [pc, #348]	; (8001c14 <HAL_RCC_ClockConfig+0x264>)
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001abc:	f7ff f922 	bl	8000d04 <HAL_GetTick>
 8001ac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac2:	e00a      	b.n	8001ada <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac4:	f7ff f91e 	bl	8000d04 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e095      	b.n	8001c06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ada:	4b4e      	ldr	r3, [pc, #312]	; (8001c14 <HAL_RCC_ClockConfig+0x264>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 020c 	and.w	r2, r3, #12
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d1eb      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d023      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d005      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b04:	4b43      	ldr	r3, [pc, #268]	; (8001c14 <HAL_RCC_ClockConfig+0x264>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	4a42      	ldr	r2, [pc, #264]	; (8001c14 <HAL_RCC_ClockConfig+0x264>)
 8001b0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b0e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0308 	and.w	r3, r3, #8
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d007      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001b1c:	4b3d      	ldr	r3, [pc, #244]	; (8001c14 <HAL_RCC_ClockConfig+0x264>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001b24:	4a3b      	ldr	r2, [pc, #236]	; (8001c14 <HAL_RCC_ClockConfig+0x264>)
 8001b26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b2c:	4b39      	ldr	r3, [pc, #228]	; (8001c14 <HAL_RCC_ClockConfig+0x264>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	4936      	ldr	r1, [pc, #216]	; (8001c14 <HAL_RCC_ClockConfig+0x264>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	608b      	str	r3, [r1, #8]
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	2b80      	cmp	r3, #128	; 0x80
 8001b44:	d105      	bne.n	8001b52 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001b46:	4b33      	ldr	r3, [pc, #204]	; (8001c14 <HAL_RCC_ClockConfig+0x264>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	4a32      	ldr	r2, [pc, #200]	; (8001c14 <HAL_RCC_ClockConfig+0x264>)
 8001b4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b50:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b52:	4b2f      	ldr	r3, [pc, #188]	; (8001c10 <HAL_RCC_ClockConfig+0x260>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d21d      	bcs.n	8001b9c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b60:	4b2b      	ldr	r3, [pc, #172]	; (8001c10 <HAL_RCC_ClockConfig+0x260>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f023 020f 	bic.w	r2, r3, #15
 8001b68:	4929      	ldr	r1, [pc, #164]	; (8001c10 <HAL_RCC_ClockConfig+0x260>)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b70:	f7ff f8c8 	bl	8000d04 <HAL_GetTick>
 8001b74:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b76:	e00a      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b78:	f7ff f8c4 	bl	8000d04 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e03b      	b.n	8001c06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8e:	4b20      	ldr	r3, [pc, #128]	; (8001c10 <HAL_RCC_ClockConfig+0x260>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d1ed      	bne.n	8001b78 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d008      	beq.n	8001bba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ba8:	4b1a      	ldr	r3, [pc, #104]	; (8001c14 <HAL_RCC_ClockConfig+0x264>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	4917      	ldr	r1, [pc, #92]	; (8001c14 <HAL_RCC_ClockConfig+0x264>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0308 	and.w	r3, r3, #8
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d009      	beq.n	8001bda <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bc6:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <HAL_RCC_ClockConfig+0x264>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	490f      	ldr	r1, [pc, #60]	; (8001c14 <HAL_RCC_ClockConfig+0x264>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bda:	f000 f825 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 8001bde:	4601      	mov	r1, r0
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <HAL_RCC_ClockConfig+0x264>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	091b      	lsrs	r3, r3, #4
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	4a0c      	ldr	r2, [pc, #48]	; (8001c1c <HAL_RCC_ClockConfig+0x26c>)
 8001bec:	5cd3      	ldrb	r3, [r2, r3]
 8001bee:	f003 031f 	and.w	r3, r3, #31
 8001bf2:	fa21 f303 	lsr.w	r3, r1, r3
 8001bf6:	4a0a      	ldr	r2, [pc, #40]	; (8001c20 <HAL_RCC_ClockConfig+0x270>)
 8001bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <HAL_RCC_ClockConfig+0x274>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff f834 	bl	8000c6c <HAL_InitTick>
 8001c04:	4603      	mov	r3, r0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40022000 	.word	0x40022000
 8001c14:	40021000 	.word	0x40021000
 8001c18:	04c4b400 	.word	0x04c4b400
 8001c1c:	08005be4 	.word	0x08005be4
 8001c20:	20000000 	.word	0x20000000
 8001c24:	20000004 	.word	0x20000004

08001c28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001c2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 030c 	and.w	r3, r3, #12
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	d102      	bne.n	8001c40 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c3a:	4b2a      	ldr	r3, [pc, #168]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	e047      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001c40:	4b27      	ldr	r3, [pc, #156]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 030c 	and.w	r3, r3, #12
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	d102      	bne.n	8001c52 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c4c:	4b26      	ldr	r3, [pc, #152]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	e03e      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001c52:	4b23      	ldr	r3, [pc, #140]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 030c 	and.w	r3, r3, #12
 8001c5a:	2b0c      	cmp	r3, #12
 8001c5c:	d136      	bne.n	8001ccc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c5e:	4b20      	ldr	r3, [pc, #128]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c68:	4b1d      	ldr	r3, [pc, #116]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	091b      	lsrs	r3, r3, #4
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	3301      	adds	r3, #1
 8001c74:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2b03      	cmp	r3, #3
 8001c7a:	d10c      	bne.n	8001c96 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c7c:	4a1a      	ldr	r2, [pc, #104]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c84:	4a16      	ldr	r2, [pc, #88]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c86:	68d2      	ldr	r2, [r2, #12]
 8001c88:	0a12      	lsrs	r2, r2, #8
 8001c8a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c8e:	fb02 f303 	mul.w	r3, r2, r3
 8001c92:	617b      	str	r3, [r7, #20]
      break;
 8001c94:	e00c      	b.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c96:	4a13      	ldr	r2, [pc, #76]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9e:	4a10      	ldr	r2, [pc, #64]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ca0:	68d2      	ldr	r2, [r2, #12]
 8001ca2:	0a12      	lsrs	r2, r2, #8
 8001ca4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ca8:	fb02 f303 	mul.w	r3, r2, r3
 8001cac:	617b      	str	r3, [r7, #20]
      break;
 8001cae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	0e5b      	lsrs	r3, r3, #25
 8001cb6:	f003 0303 	and.w	r3, r3, #3
 8001cba:	3301      	adds	r3, #1
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001cc0:	697a      	ldr	r2, [r7, #20]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	e001      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001cd0:	693b      	ldr	r3, [r7, #16]
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	371c      	adds	r7, #28
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	00f42400 	.word	0x00f42400
 8001ce8:	007a1200 	.word	0x007a1200

08001cec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cf0:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	20000000 	.word	0x20000000

08001d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d08:	f7ff fff0 	bl	8001cec <HAL_RCC_GetHCLKFreq>
 8001d0c:	4601      	mov	r1, r0
 8001d0e:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	0a1b      	lsrs	r3, r3, #8
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	4a04      	ldr	r2, [pc, #16]	; (8001d2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d1a:	5cd3      	ldrb	r3, [r2, r3]
 8001d1c:	f003 031f 	and.w	r3, r3, #31
 8001d20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	08005bf4 	.word	0x08005bf4

08001d30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d34:	f7ff ffda 	bl	8001cec <HAL_RCC_GetHCLKFreq>
 8001d38:	4601      	mov	r1, r0
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	0adb      	lsrs	r3, r3, #11
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	4a04      	ldr	r2, [pc, #16]	; (8001d58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d46:	5cd3      	ldrb	r3, [r2, r3]
 8001d48:	f003 031f 	and.w	r3, r3, #31
 8001d4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40021000 	.word	0x40021000
 8001d58:	08005bf4 	.word	0x08005bf4

08001d5c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b087      	sub	sp, #28
 8001d60:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d62:	4b1e      	ldr	r3, [pc, #120]	; (8001ddc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d6c:	4b1b      	ldr	r3, [pc, #108]	; (8001ddc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	091b      	lsrs	r3, r3, #4
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	3301      	adds	r3, #1
 8001d78:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	2b03      	cmp	r3, #3
 8001d7e:	d10c      	bne.n	8001d9a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d80:	4a17      	ldr	r2, [pc, #92]	; (8001de0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d88:	4a14      	ldr	r2, [pc, #80]	; (8001ddc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d8a:	68d2      	ldr	r2, [r2, #12]
 8001d8c:	0a12      	lsrs	r2, r2, #8
 8001d8e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d92:	fb02 f303 	mul.w	r3, r2, r3
 8001d96:	617b      	str	r3, [r7, #20]
    break;
 8001d98:	e00c      	b.n	8001db4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d9a:	4a12      	ldr	r2, [pc, #72]	; (8001de4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da2:	4a0e      	ldr	r2, [pc, #56]	; (8001ddc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001da4:	68d2      	ldr	r2, [r2, #12]
 8001da6:	0a12      	lsrs	r2, r2, #8
 8001da8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001dac:	fb02 f303 	mul.w	r3, r2, r3
 8001db0:	617b      	str	r3, [r7, #20]
    break;
 8001db2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001db4:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	0e5b      	lsrs	r3, r3, #25
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dcc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001dce:	687b      	ldr	r3, [r7, #4]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	371c      	adds	r7, #28
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	007a1200 	.word	0x007a1200
 8001de4:	00f42400 	.word	0x00f42400

08001de8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001df0:	2300      	movs	r3, #0
 8001df2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001df4:	2300      	movs	r3, #0
 8001df6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 8098 	beq.w	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e06:	2300      	movs	r3, #0
 8001e08:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e0a:	4b43      	ldr	r3, [pc, #268]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10d      	bne.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e16:	4b40      	ldr	r3, [pc, #256]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1a:	4a3f      	ldr	r2, [pc, #252]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e20:	6593      	str	r3, [r2, #88]	; 0x58
 8001e22:	4b3d      	ldr	r3, [pc, #244]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	60bb      	str	r3, [r7, #8]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e32:	4b3a      	ldr	r3, [pc, #232]	; (8001f1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a39      	ldr	r2, [pc, #228]	; (8001f1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e3e:	f7fe ff61 	bl	8000d04 <HAL_GetTick>
 8001e42:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e44:	e009      	b.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e46:	f7fe ff5d 	bl	8000d04 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d902      	bls.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	74fb      	strb	r3, [r7, #19]
        break;
 8001e58:	e005      	b.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e5a:	4b30      	ldr	r3, [pc, #192]	; (8001f1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0ef      	beq.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001e66:	7cfb      	ldrb	r3, [r7, #19]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d159      	bne.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e6c:	4b2a      	ldr	r3, [pc, #168]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e76:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d01e      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d019      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e88:	4b23      	ldr	r3, [pc, #140]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e94:	4b20      	ldr	r3, [pc, #128]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e9a:	4a1f      	ldr	r2, [pc, #124]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ea4:	4b1c      	ldr	r3, [pc, #112]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eaa:	4a1b      	ldr	r2, [pc, #108]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001eb4:	4a18      	ldr	r2, [pc, #96]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d016      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec6:	f7fe ff1d 	bl	8000d04 <HAL_GetTick>
 8001eca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ecc:	e00b      	b.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ece:	f7fe ff19 	bl	8000d04 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d902      	bls.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	74fb      	strb	r3, [r7, #19]
            break;
 8001ee4:	e006      	b.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ee6:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0ec      	beq.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001ef4:	7cfb      	ldrb	r3, [r7, #19]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10b      	bne.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001efa:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	4903      	ldr	r1, [pc, #12]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001f10:	e008      	b.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f12:	7cfb      	ldrb	r3, [r7, #19]
 8001f14:	74bb      	strb	r3, [r7, #18]
 8001f16:	e005      	b.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f20:	7cfb      	ldrb	r3, [r7, #19]
 8001f22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f24:	7c7b      	ldrb	r3, [r7, #17]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d105      	bne.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f2a:	4ba6      	ldr	r3, [pc, #664]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2e:	4aa5      	ldr	r2, [pc, #660]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f34:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00a      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f42:	4ba0      	ldr	r3, [pc, #640]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f48:	f023 0203 	bic.w	r2, r3, #3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	499c      	ldr	r1, [pc, #624]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00a      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f64:	4b97      	ldr	r3, [pc, #604]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f6a:	f023 020c 	bic.w	r2, r3, #12
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	4994      	ldr	r1, [pc, #592]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0304 	and.w	r3, r3, #4
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00a      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f86:	4b8f      	ldr	r3, [pc, #572]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f8c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	498b      	ldr	r1, [pc, #556]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0308 	and.w	r3, r3, #8
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00a      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001fa8:	4b86      	ldr	r3, [pc, #536]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	4983      	ldr	r1, [pc, #524]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0320 	and.w	r3, r3, #32
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00a      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001fca:	4b7e      	ldr	r3, [pc, #504]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	497a      	ldr	r1, [pc, #488]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00a      	beq.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fec:	4b75      	ldr	r3, [pc, #468]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	4972      	ldr	r1, [pc, #456]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00a      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800200e:	4b6d      	ldr	r3, [pc, #436]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002014:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	69db      	ldr	r3, [r3, #28]
 800201c:	4969      	ldr	r1, [pc, #420]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800201e:	4313      	orrs	r3, r2
 8002020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00a      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002030:	4b64      	ldr	r3, [pc, #400]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002036:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	4961      	ldr	r1, [pc, #388]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002040:	4313      	orrs	r3, r2
 8002042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00a      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002052:	4b5c      	ldr	r3, [pc, #368]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002058:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002060:	4958      	ldr	r1, [pc, #352]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002062:	4313      	orrs	r3, r2
 8002064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002070:	2b00      	cmp	r3, #0
 8002072:	d015      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002074:	4b53      	ldr	r3, [pc, #332]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002082:	4950      	ldr	r1, [pc, #320]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002084:	4313      	orrs	r3, r2
 8002086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002092:	d105      	bne.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002094:	4b4b      	ldr	r3, [pc, #300]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	4a4a      	ldr	r2, [pc, #296]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800209a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800209e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d015      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80020ac:	4b45      	ldr	r3, [pc, #276]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ba:	4942      	ldr	r1, [pc, #264]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020ca:	d105      	bne.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020cc:	4b3d      	ldr	r3, [pc, #244]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	4a3c      	ldr	r2, [pc, #240]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020d6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d015      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80020e4:	4b37      	ldr	r3, [pc, #220]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	4934      	ldr	r1, [pc, #208]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002102:	d105      	bne.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002104:	4b2f      	ldr	r3, [pc, #188]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	4a2e      	ldr	r2, [pc, #184]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800210a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800210e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d015      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800211c:	4b29      	ldr	r3, [pc, #164]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800211e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002122:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800212a:	4926      	ldr	r1, [pc, #152]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800212c:	4313      	orrs	r3, r2
 800212e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002136:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800213a:	d105      	bne.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800213c:	4b21      	ldr	r3, [pc, #132]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	4a20      	ldr	r2, [pc, #128]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002142:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002146:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d015      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002154:	4b1b      	ldr	r3, [pc, #108]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002162:	4918      	ldr	r1, [pc, #96]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002164:	4313      	orrs	r3, r2
 8002166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800216e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002172:	d105      	bne.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002174:	4b13      	ldr	r3, [pc, #76]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	4a12      	ldr	r2, [pc, #72]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800217a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800217e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d015      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800218c:	4b0d      	ldr	r3, [pc, #52]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800218e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002192:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219a:	490a      	ldr	r1, [pc, #40]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800219c:	4313      	orrs	r3, r2
 800219e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021aa:	d105      	bne.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80021ac:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	4a04      	ldr	r2, [pc, #16]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80021b8:	7cbb      	ldrb	r3, [r7, #18]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40021000 	.word	0x40021000

080021c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e049      	b.n	800226e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d106      	bne.n	80021f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7fe fc5e 	bl	8000ab0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2202      	movs	r2, #2
 80021f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3304      	adds	r3, #4
 8002204:	4619      	mov	r1, r3
 8002206:	4610      	mov	r0, r2
 8002208:	f000 f898 	bl	800233c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
	...

08002278 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b01      	cmp	r3, #1
 800228a:	d001      	beq.n	8002290 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e042      	b.n	8002316 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2202      	movs	r2, #2
 8002294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a21      	ldr	r2, [pc, #132]	; (8002324 <HAL_TIM_Base_Start+0xac>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d018      	beq.n	80022d4 <HAL_TIM_Base_Start+0x5c>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022aa:	d013      	beq.n	80022d4 <HAL_TIM_Base_Start+0x5c>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a1d      	ldr	r2, [pc, #116]	; (8002328 <HAL_TIM_Base_Start+0xb0>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d00e      	beq.n	80022d4 <HAL_TIM_Base_Start+0x5c>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a1c      	ldr	r2, [pc, #112]	; (800232c <HAL_TIM_Base_Start+0xb4>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d009      	beq.n	80022d4 <HAL_TIM_Base_Start+0x5c>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a1a      	ldr	r2, [pc, #104]	; (8002330 <HAL_TIM_Base_Start+0xb8>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d004      	beq.n	80022d4 <HAL_TIM_Base_Start+0x5c>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a19      	ldr	r2, [pc, #100]	; (8002334 <HAL_TIM_Base_Start+0xbc>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d115      	bne.n	8002300 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	4b17      	ldr	r3, [pc, #92]	; (8002338 <HAL_TIM_Base_Start+0xc0>)
 80022dc:	4013      	ands	r3, r2
 80022de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2b06      	cmp	r3, #6
 80022e4:	d015      	beq.n	8002312 <HAL_TIM_Base_Start+0x9a>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ec:	d011      	beq.n	8002312 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f042 0201 	orr.w	r2, r2, #1
 80022fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022fe:	e008      	b.n	8002312 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 0201 	orr.w	r2, r2, #1
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	e000      	b.n	8002314 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002312:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40012c00 	.word	0x40012c00
 8002328:	40000400 	.word	0x40000400
 800232c:	40000800 	.word	0x40000800
 8002330:	40013400 	.word	0x40013400
 8002334:	40014000 	.word	0x40014000
 8002338:	00010007 	.word	0x00010007

0800233c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a3c      	ldr	r2, [pc, #240]	; (8002440 <TIM_Base_SetConfig+0x104>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d00f      	beq.n	8002374 <TIM_Base_SetConfig+0x38>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800235a:	d00b      	beq.n	8002374 <TIM_Base_SetConfig+0x38>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a39      	ldr	r2, [pc, #228]	; (8002444 <TIM_Base_SetConfig+0x108>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d007      	beq.n	8002374 <TIM_Base_SetConfig+0x38>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a38      	ldr	r2, [pc, #224]	; (8002448 <TIM_Base_SetConfig+0x10c>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d003      	beq.n	8002374 <TIM_Base_SetConfig+0x38>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a37      	ldr	r2, [pc, #220]	; (800244c <TIM_Base_SetConfig+0x110>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d108      	bne.n	8002386 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800237a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	4313      	orrs	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a2d      	ldr	r2, [pc, #180]	; (8002440 <TIM_Base_SetConfig+0x104>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d01b      	beq.n	80023c6 <TIM_Base_SetConfig+0x8a>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002394:	d017      	beq.n	80023c6 <TIM_Base_SetConfig+0x8a>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a2a      	ldr	r2, [pc, #168]	; (8002444 <TIM_Base_SetConfig+0x108>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d013      	beq.n	80023c6 <TIM_Base_SetConfig+0x8a>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a29      	ldr	r2, [pc, #164]	; (8002448 <TIM_Base_SetConfig+0x10c>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d00f      	beq.n	80023c6 <TIM_Base_SetConfig+0x8a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a28      	ldr	r2, [pc, #160]	; (800244c <TIM_Base_SetConfig+0x110>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d00b      	beq.n	80023c6 <TIM_Base_SetConfig+0x8a>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a27      	ldr	r2, [pc, #156]	; (8002450 <TIM_Base_SetConfig+0x114>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d007      	beq.n	80023c6 <TIM_Base_SetConfig+0x8a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a26      	ldr	r2, [pc, #152]	; (8002454 <TIM_Base_SetConfig+0x118>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d003      	beq.n	80023c6 <TIM_Base_SetConfig+0x8a>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a25      	ldr	r2, [pc, #148]	; (8002458 <TIM_Base_SetConfig+0x11c>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d108      	bne.n	80023d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a10      	ldr	r2, [pc, #64]	; (8002440 <TIM_Base_SetConfig+0x104>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d00f      	beq.n	8002424 <TIM_Base_SetConfig+0xe8>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a11      	ldr	r2, [pc, #68]	; (800244c <TIM_Base_SetConfig+0x110>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d00b      	beq.n	8002424 <TIM_Base_SetConfig+0xe8>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a10      	ldr	r2, [pc, #64]	; (8002450 <TIM_Base_SetConfig+0x114>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d007      	beq.n	8002424 <TIM_Base_SetConfig+0xe8>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a0f      	ldr	r2, [pc, #60]	; (8002454 <TIM_Base_SetConfig+0x118>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d003      	beq.n	8002424 <TIM_Base_SetConfig+0xe8>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a0e      	ldr	r2, [pc, #56]	; (8002458 <TIM_Base_SetConfig+0x11c>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d103      	bne.n	800242c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	691a      	ldr	r2, [r3, #16]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	615a      	str	r2, [r3, #20]
}
 8002432:	bf00      	nop
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40012c00 	.word	0x40012c00
 8002444:	40000400 	.word	0x40000400
 8002448:	40000800 	.word	0x40000800
 800244c:	40013400 	.word	0x40013400
 8002450:	40014000 	.word	0x40014000
 8002454:	40014400 	.word	0x40014400
 8002458:	40014800 	.word	0x40014800

0800245c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800246c:	2b01      	cmp	r3, #1
 800246e:	d101      	bne.n	8002474 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002470:	2302      	movs	r3, #2
 8002472:	e065      	b.n	8002540 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a2c      	ldr	r2, [pc, #176]	; (800254c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d004      	beq.n	80024a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a2b      	ldr	r2, [pc, #172]	; (8002550 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d108      	bne.n	80024ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80024ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80024c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a1b      	ldr	r2, [pc, #108]	; (800254c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d018      	beq.n	8002514 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ea:	d013      	beq.n	8002514 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a18      	ldr	r2, [pc, #96]	; (8002554 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d00e      	beq.n	8002514 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a17      	ldr	r2, [pc, #92]	; (8002558 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d009      	beq.n	8002514 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a12      	ldr	r2, [pc, #72]	; (8002550 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d004      	beq.n	8002514 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a13      	ldr	r2, [pc, #76]	; (800255c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d10c      	bne.n	800252e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800251a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	4313      	orrs	r3, r2
 8002524:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	40012c00 	.word	0x40012c00
 8002550:	40013400 	.word	0x40013400
 8002554:	40000400 	.word	0x40000400
 8002558:	40000800 	.word	0x40000800
 800255c:	40014000 	.word	0x40014000

08002560 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e042      	b.n	80025f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002578:	2b00      	cmp	r3, #0
 800257a:	d106      	bne.n	800258a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7fe fab3 	bl	8000af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2224      	movs	r2, #36	; 0x24
 800258e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 0201 	bic.w	r2, r2, #1
 80025a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f82c 	bl	8002600 <UART_SetConfig>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d101      	bne.n	80025b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e022      	b.n	80025f8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d002      	beq.n	80025c0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 fac8 	bl	8002b50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0201 	orr.w	r2, r2, #1
 80025ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 fb4f 	bl	8002c94 <UART_CheckIdleState>
 80025f6:	4603      	mov	r3, r0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002600:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002604:	b088      	sub	sp, #32
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800260a:	2300      	movs	r3, #0
 800260c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	4313      	orrs	r3, r2
 8002624:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800262a:	69fa      	ldr	r2, [r7, #28]
 800262c:	4313      	orrs	r3, r2
 800262e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	4bb0      	ldr	r3, [pc, #704]	; (80028f8 <UART_SetConfig+0x2f8>)
 8002638:	4013      	ands	r3, r2
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6812      	ldr	r2, [r2, #0]
 800263e:	69f9      	ldr	r1, [r7, #28]
 8002640:	430b      	orrs	r3, r1
 8002642:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4aa5      	ldr	r2, [pc, #660]	; (80028fc <UART_SetConfig+0x2fc>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d004      	beq.n	8002674 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	69fa      	ldr	r2, [r7, #28]
 8002670:	4313      	orrs	r3, r2
 8002672:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800267e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6812      	ldr	r2, [r2, #0]
 8002686:	69f9      	ldr	r1, [r7, #28]
 8002688:	430b      	orrs	r3, r1
 800268a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002692:	f023 010f 	bic.w	r1, r3, #15
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a96      	ldr	r2, [pc, #600]	; (8002900 <UART_SetConfig+0x300>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d121      	bne.n	80026f0 <UART_SetConfig+0xf0>
 80026ac:	4b95      	ldr	r3, [pc, #596]	; (8002904 <UART_SetConfig+0x304>)
 80026ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	2b03      	cmp	r3, #3
 80026b8:	d816      	bhi.n	80026e8 <UART_SetConfig+0xe8>
 80026ba:	a201      	add	r2, pc, #4	; (adr r2, 80026c0 <UART_SetConfig+0xc0>)
 80026bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c0:	080026d1 	.word	0x080026d1
 80026c4:	080026dd 	.word	0x080026dd
 80026c8:	080026d7 	.word	0x080026d7
 80026cc:	080026e3 	.word	0x080026e3
 80026d0:	2301      	movs	r3, #1
 80026d2:	76fb      	strb	r3, [r7, #27]
 80026d4:	e0be      	b.n	8002854 <UART_SetConfig+0x254>
 80026d6:	2302      	movs	r3, #2
 80026d8:	76fb      	strb	r3, [r7, #27]
 80026da:	e0bb      	b.n	8002854 <UART_SetConfig+0x254>
 80026dc:	2304      	movs	r3, #4
 80026de:	76fb      	strb	r3, [r7, #27]
 80026e0:	e0b8      	b.n	8002854 <UART_SetConfig+0x254>
 80026e2:	2308      	movs	r3, #8
 80026e4:	76fb      	strb	r3, [r7, #27]
 80026e6:	e0b5      	b.n	8002854 <UART_SetConfig+0x254>
 80026e8:	2310      	movs	r3, #16
 80026ea:	76fb      	strb	r3, [r7, #27]
 80026ec:	bf00      	nop
 80026ee:	e0b1      	b.n	8002854 <UART_SetConfig+0x254>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a84      	ldr	r2, [pc, #528]	; (8002908 <UART_SetConfig+0x308>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d134      	bne.n	8002764 <UART_SetConfig+0x164>
 80026fa:	4b82      	ldr	r3, [pc, #520]	; (8002904 <UART_SetConfig+0x304>)
 80026fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002700:	f003 030c 	and.w	r3, r3, #12
 8002704:	2b0c      	cmp	r3, #12
 8002706:	d829      	bhi.n	800275c <UART_SetConfig+0x15c>
 8002708:	a201      	add	r2, pc, #4	; (adr r2, 8002710 <UART_SetConfig+0x110>)
 800270a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800270e:	bf00      	nop
 8002710:	08002745 	.word	0x08002745
 8002714:	0800275d 	.word	0x0800275d
 8002718:	0800275d 	.word	0x0800275d
 800271c:	0800275d 	.word	0x0800275d
 8002720:	08002751 	.word	0x08002751
 8002724:	0800275d 	.word	0x0800275d
 8002728:	0800275d 	.word	0x0800275d
 800272c:	0800275d 	.word	0x0800275d
 8002730:	0800274b 	.word	0x0800274b
 8002734:	0800275d 	.word	0x0800275d
 8002738:	0800275d 	.word	0x0800275d
 800273c:	0800275d 	.word	0x0800275d
 8002740:	08002757 	.word	0x08002757
 8002744:	2300      	movs	r3, #0
 8002746:	76fb      	strb	r3, [r7, #27]
 8002748:	e084      	b.n	8002854 <UART_SetConfig+0x254>
 800274a:	2302      	movs	r3, #2
 800274c:	76fb      	strb	r3, [r7, #27]
 800274e:	e081      	b.n	8002854 <UART_SetConfig+0x254>
 8002750:	2304      	movs	r3, #4
 8002752:	76fb      	strb	r3, [r7, #27]
 8002754:	e07e      	b.n	8002854 <UART_SetConfig+0x254>
 8002756:	2308      	movs	r3, #8
 8002758:	76fb      	strb	r3, [r7, #27]
 800275a:	e07b      	b.n	8002854 <UART_SetConfig+0x254>
 800275c:	2310      	movs	r3, #16
 800275e:	76fb      	strb	r3, [r7, #27]
 8002760:	bf00      	nop
 8002762:	e077      	b.n	8002854 <UART_SetConfig+0x254>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a68      	ldr	r2, [pc, #416]	; (800290c <UART_SetConfig+0x30c>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d120      	bne.n	80027b0 <UART_SetConfig+0x1b0>
 800276e:	4b65      	ldr	r3, [pc, #404]	; (8002904 <UART_SetConfig+0x304>)
 8002770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002774:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002778:	2b10      	cmp	r3, #16
 800277a:	d00f      	beq.n	800279c <UART_SetConfig+0x19c>
 800277c:	2b10      	cmp	r3, #16
 800277e:	d802      	bhi.n	8002786 <UART_SetConfig+0x186>
 8002780:	2b00      	cmp	r3, #0
 8002782:	d005      	beq.n	8002790 <UART_SetConfig+0x190>
 8002784:	e010      	b.n	80027a8 <UART_SetConfig+0x1a8>
 8002786:	2b20      	cmp	r3, #32
 8002788:	d005      	beq.n	8002796 <UART_SetConfig+0x196>
 800278a:	2b30      	cmp	r3, #48	; 0x30
 800278c:	d009      	beq.n	80027a2 <UART_SetConfig+0x1a2>
 800278e:	e00b      	b.n	80027a8 <UART_SetConfig+0x1a8>
 8002790:	2300      	movs	r3, #0
 8002792:	76fb      	strb	r3, [r7, #27]
 8002794:	e05e      	b.n	8002854 <UART_SetConfig+0x254>
 8002796:	2302      	movs	r3, #2
 8002798:	76fb      	strb	r3, [r7, #27]
 800279a:	e05b      	b.n	8002854 <UART_SetConfig+0x254>
 800279c:	2304      	movs	r3, #4
 800279e:	76fb      	strb	r3, [r7, #27]
 80027a0:	e058      	b.n	8002854 <UART_SetConfig+0x254>
 80027a2:	2308      	movs	r3, #8
 80027a4:	76fb      	strb	r3, [r7, #27]
 80027a6:	e055      	b.n	8002854 <UART_SetConfig+0x254>
 80027a8:	2310      	movs	r3, #16
 80027aa:	76fb      	strb	r3, [r7, #27]
 80027ac:	bf00      	nop
 80027ae:	e051      	b.n	8002854 <UART_SetConfig+0x254>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a56      	ldr	r2, [pc, #344]	; (8002910 <UART_SetConfig+0x310>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d120      	bne.n	80027fc <UART_SetConfig+0x1fc>
 80027ba:	4b52      	ldr	r3, [pc, #328]	; (8002904 <UART_SetConfig+0x304>)
 80027bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80027c4:	2b40      	cmp	r3, #64	; 0x40
 80027c6:	d00f      	beq.n	80027e8 <UART_SetConfig+0x1e8>
 80027c8:	2b40      	cmp	r3, #64	; 0x40
 80027ca:	d802      	bhi.n	80027d2 <UART_SetConfig+0x1d2>
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d005      	beq.n	80027dc <UART_SetConfig+0x1dc>
 80027d0:	e010      	b.n	80027f4 <UART_SetConfig+0x1f4>
 80027d2:	2b80      	cmp	r3, #128	; 0x80
 80027d4:	d005      	beq.n	80027e2 <UART_SetConfig+0x1e2>
 80027d6:	2bc0      	cmp	r3, #192	; 0xc0
 80027d8:	d009      	beq.n	80027ee <UART_SetConfig+0x1ee>
 80027da:	e00b      	b.n	80027f4 <UART_SetConfig+0x1f4>
 80027dc:	2300      	movs	r3, #0
 80027de:	76fb      	strb	r3, [r7, #27]
 80027e0:	e038      	b.n	8002854 <UART_SetConfig+0x254>
 80027e2:	2302      	movs	r3, #2
 80027e4:	76fb      	strb	r3, [r7, #27]
 80027e6:	e035      	b.n	8002854 <UART_SetConfig+0x254>
 80027e8:	2304      	movs	r3, #4
 80027ea:	76fb      	strb	r3, [r7, #27]
 80027ec:	e032      	b.n	8002854 <UART_SetConfig+0x254>
 80027ee:	2308      	movs	r3, #8
 80027f0:	76fb      	strb	r3, [r7, #27]
 80027f2:	e02f      	b.n	8002854 <UART_SetConfig+0x254>
 80027f4:	2310      	movs	r3, #16
 80027f6:	76fb      	strb	r3, [r7, #27]
 80027f8:	bf00      	nop
 80027fa:	e02b      	b.n	8002854 <UART_SetConfig+0x254>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a3e      	ldr	r2, [pc, #248]	; (80028fc <UART_SetConfig+0x2fc>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d124      	bne.n	8002850 <UART_SetConfig+0x250>
 8002806:	4b3f      	ldr	r3, [pc, #252]	; (8002904 <UART_SetConfig+0x304>)
 8002808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002810:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002814:	d012      	beq.n	800283c <UART_SetConfig+0x23c>
 8002816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800281a:	d802      	bhi.n	8002822 <UART_SetConfig+0x222>
 800281c:	2b00      	cmp	r3, #0
 800281e:	d007      	beq.n	8002830 <UART_SetConfig+0x230>
 8002820:	e012      	b.n	8002848 <UART_SetConfig+0x248>
 8002822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002826:	d006      	beq.n	8002836 <UART_SetConfig+0x236>
 8002828:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800282c:	d009      	beq.n	8002842 <UART_SetConfig+0x242>
 800282e:	e00b      	b.n	8002848 <UART_SetConfig+0x248>
 8002830:	2300      	movs	r3, #0
 8002832:	76fb      	strb	r3, [r7, #27]
 8002834:	e00e      	b.n	8002854 <UART_SetConfig+0x254>
 8002836:	2302      	movs	r3, #2
 8002838:	76fb      	strb	r3, [r7, #27]
 800283a:	e00b      	b.n	8002854 <UART_SetConfig+0x254>
 800283c:	2304      	movs	r3, #4
 800283e:	76fb      	strb	r3, [r7, #27]
 8002840:	e008      	b.n	8002854 <UART_SetConfig+0x254>
 8002842:	2308      	movs	r3, #8
 8002844:	76fb      	strb	r3, [r7, #27]
 8002846:	e005      	b.n	8002854 <UART_SetConfig+0x254>
 8002848:	2310      	movs	r3, #16
 800284a:	76fb      	strb	r3, [r7, #27]
 800284c:	bf00      	nop
 800284e:	e001      	b.n	8002854 <UART_SetConfig+0x254>
 8002850:	2310      	movs	r3, #16
 8002852:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a28      	ldr	r2, [pc, #160]	; (80028fc <UART_SetConfig+0x2fc>)
 800285a:	4293      	cmp	r3, r2
 800285c:	f040 80a1 	bne.w	80029a2 <UART_SetConfig+0x3a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002860:	7efb      	ldrb	r3, [r7, #27]
 8002862:	2b08      	cmp	r3, #8
 8002864:	d823      	bhi.n	80028ae <UART_SetConfig+0x2ae>
 8002866:	a201      	add	r2, pc, #4	; (adr r2, 800286c <UART_SetConfig+0x26c>)
 8002868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800286c:	08002891 	.word	0x08002891
 8002870:	080028af 	.word	0x080028af
 8002874:	08002899 	.word	0x08002899
 8002878:	080028af 	.word	0x080028af
 800287c:	0800289f 	.word	0x0800289f
 8002880:	080028af 	.word	0x080028af
 8002884:	080028af 	.word	0x080028af
 8002888:	080028af 	.word	0x080028af
 800288c:	080028a7 	.word	0x080028a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002890:	f7ff fa38 	bl	8001d04 <HAL_RCC_GetPCLK1Freq>
 8002894:	6178      	str	r0, [r7, #20]
        break;
 8002896:	e00f      	b.n	80028b8 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002898:	4b1e      	ldr	r3, [pc, #120]	; (8002914 <UART_SetConfig+0x314>)
 800289a:	617b      	str	r3, [r7, #20]
        break;
 800289c:	e00c      	b.n	80028b8 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800289e:	f7ff f9c3 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 80028a2:	6178      	str	r0, [r7, #20]
        break;
 80028a4:	e008      	b.n	80028b8 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028aa:	617b      	str	r3, [r7, #20]
        break;
 80028ac:	e004      	b.n	80028b8 <UART_SetConfig+0x2b8>
      default:
        pclk = 0U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	76bb      	strb	r3, [r7, #26]
        break;
 80028b6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 8130 	beq.w	8002b20 <UART_SetConfig+0x520>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	4a14      	ldr	r2, [pc, #80]	; (8002918 <UART_SetConfig+0x318>)
 80028c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028ca:	461a      	mov	r2, r3
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80028d2:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	4413      	add	r3, r2
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d305      	bcc.n	80028f0 <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d915      	bls.n	800291c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	76bb      	strb	r3, [r7, #26]
 80028f4:	e114      	b.n	8002b20 <UART_SetConfig+0x520>
 80028f6:	bf00      	nop
 80028f8:	cfff69f3 	.word	0xcfff69f3
 80028fc:	40008000 	.word	0x40008000
 8002900:	40013800 	.word	0x40013800
 8002904:	40021000 	.word	0x40021000
 8002908:	40004400 	.word	0x40004400
 800290c:	40004800 	.word	0x40004800
 8002910:	40004c00 	.word	0x40004c00
 8002914:	00f42400 	.word	0x00f42400
 8002918:	08005bfc 	.word	0x08005bfc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	4618      	mov	r0, r3
 8002920:	f04f 0100 	mov.w	r1, #0
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	4a87      	ldr	r2, [pc, #540]	; (8002b48 <UART_SetConfig+0x548>)
 800292a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800292e:	b29b      	uxth	r3, r3
 8002930:	f04f 0400 	mov.w	r4, #0
 8002934:	461a      	mov	r2, r3
 8002936:	4623      	mov	r3, r4
 8002938:	f7fd fc72 	bl	8000220 <__aeabi_uldivmod>
 800293c:	4603      	mov	r3, r0
 800293e:	460c      	mov	r4, r1
 8002940:	4619      	mov	r1, r3
 8002942:	4622      	mov	r2, r4
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	f04f 0400 	mov.w	r4, #0
 800294c:	0214      	lsls	r4, r2, #8
 800294e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002952:	020b      	lsls	r3, r1, #8
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6852      	ldr	r2, [r2, #4]
 8002958:	0852      	lsrs	r2, r2, #1
 800295a:	4611      	mov	r1, r2
 800295c:	f04f 0200 	mov.w	r2, #0
 8002960:	eb13 0b01 	adds.w	fp, r3, r1
 8002964:	eb44 0c02 	adc.w	ip, r4, r2
 8002968:	4658      	mov	r0, fp
 800296a:	4661      	mov	r1, ip
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f04f 0400 	mov.w	r4, #0
 8002974:	461a      	mov	r2, r3
 8002976:	4623      	mov	r3, r4
 8002978:	f7fd fc52 	bl	8000220 <__aeabi_uldivmod>
 800297c:	4603      	mov	r3, r0
 800297e:	460c      	mov	r4, r1
 8002980:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002988:	d308      	bcc.n	800299c <UART_SetConfig+0x39c>
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002990:	d204      	bcs.n	800299c <UART_SetConfig+0x39c>
        {
          huart->Instance->BRR = usartdiv;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	60da      	str	r2, [r3, #12]
 800299a:	e0c1      	b.n	8002b20 <UART_SetConfig+0x520>
        }
        else
        {
          ret = HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	76bb      	strb	r3, [r7, #26]
 80029a0:	e0be      	b.n	8002b20 <UART_SetConfig+0x520>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029aa:	d164      	bne.n	8002a76 <UART_SetConfig+0x476>
  {
    switch (clocksource)
 80029ac:	7efb      	ldrb	r3, [r7, #27]
 80029ae:	2b08      	cmp	r3, #8
 80029b0:	d827      	bhi.n	8002a02 <UART_SetConfig+0x402>
 80029b2:	a201      	add	r2, pc, #4	; (adr r2, 80029b8 <UART_SetConfig+0x3b8>)
 80029b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b8:	080029dd 	.word	0x080029dd
 80029bc:	080029e5 	.word	0x080029e5
 80029c0:	080029ed 	.word	0x080029ed
 80029c4:	08002a03 	.word	0x08002a03
 80029c8:	080029f3 	.word	0x080029f3
 80029cc:	08002a03 	.word	0x08002a03
 80029d0:	08002a03 	.word	0x08002a03
 80029d4:	08002a03 	.word	0x08002a03
 80029d8:	080029fb 	.word	0x080029fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029dc:	f7ff f992 	bl	8001d04 <HAL_RCC_GetPCLK1Freq>
 80029e0:	6178      	str	r0, [r7, #20]
        break;
 80029e2:	e013      	b.n	8002a0c <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80029e4:	f7ff f9a4 	bl	8001d30 <HAL_RCC_GetPCLK2Freq>
 80029e8:	6178      	str	r0, [r7, #20]
        break;
 80029ea:	e00f      	b.n	8002a0c <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029ec:	4b57      	ldr	r3, [pc, #348]	; (8002b4c <UART_SetConfig+0x54c>)
 80029ee:	617b      	str	r3, [r7, #20]
        break;
 80029f0:	e00c      	b.n	8002a0c <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029f2:	f7ff f919 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 80029f6:	6178      	str	r0, [r7, #20]
        break;
 80029f8:	e008      	b.n	8002a0c <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029fe:	617b      	str	r3, [r7, #20]
        break;
 8002a00:	e004      	b.n	8002a0c <UART_SetConfig+0x40c>
      default:
        pclk = 0U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	76bb      	strb	r3, [r7, #26]
        break;
 8002a0a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 8086 	beq.w	8002b20 <UART_SetConfig+0x520>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	4a4b      	ldr	r2, [pc, #300]	; (8002b48 <UART_SetConfig+0x548>)
 8002a1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a26:	005a      	lsls	r2, r3, #1
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	085b      	lsrs	r3, r3, #1
 8002a2e:	441a      	add	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	2b0f      	cmp	r3, #15
 8002a40:	d916      	bls.n	8002a70 <UART_SetConfig+0x470>
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a48:	d212      	bcs.n	8002a70 <UART_SetConfig+0x470>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	f023 030f 	bic.w	r3, r3, #15
 8002a52:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	085b      	lsrs	r3, r3, #1
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	89fb      	ldrh	r3, [r7, #14]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	89fa      	ldrh	r2, [r7, #14]
 8002a6c:	60da      	str	r2, [r3, #12]
 8002a6e:	e057      	b.n	8002b20 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	76bb      	strb	r3, [r7, #26]
 8002a74:	e054      	b.n	8002b20 <UART_SetConfig+0x520>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a76:	7efb      	ldrb	r3, [r7, #27]
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d828      	bhi.n	8002ace <UART_SetConfig+0x4ce>
 8002a7c:	a201      	add	r2, pc, #4	; (adr r2, 8002a84 <UART_SetConfig+0x484>)
 8002a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a82:	bf00      	nop
 8002a84:	08002aa9 	.word	0x08002aa9
 8002a88:	08002ab1 	.word	0x08002ab1
 8002a8c:	08002ab9 	.word	0x08002ab9
 8002a90:	08002acf 	.word	0x08002acf
 8002a94:	08002abf 	.word	0x08002abf
 8002a98:	08002acf 	.word	0x08002acf
 8002a9c:	08002acf 	.word	0x08002acf
 8002aa0:	08002acf 	.word	0x08002acf
 8002aa4:	08002ac7 	.word	0x08002ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002aa8:	f7ff f92c 	bl	8001d04 <HAL_RCC_GetPCLK1Freq>
 8002aac:	6178      	str	r0, [r7, #20]
        break;
 8002aae:	e013      	b.n	8002ad8 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ab0:	f7ff f93e 	bl	8001d30 <HAL_RCC_GetPCLK2Freq>
 8002ab4:	6178      	str	r0, [r7, #20]
        break;
 8002ab6:	e00f      	b.n	8002ad8 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ab8:	4b24      	ldr	r3, [pc, #144]	; (8002b4c <UART_SetConfig+0x54c>)
 8002aba:	617b      	str	r3, [r7, #20]
        break;
 8002abc:	e00c      	b.n	8002ad8 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002abe:	f7ff f8b3 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 8002ac2:	6178      	str	r0, [r7, #20]
        break;
 8002ac4:	e008      	b.n	8002ad8 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002aca:	617b      	str	r3, [r7, #20]
        break;
 8002acc:	e004      	b.n	8002ad8 <UART_SetConfig+0x4d8>
      default:
        pclk = 0U;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	76bb      	strb	r3, [r7, #26]
        break;
 8002ad6:	bf00      	nop
    }

    if (pclk != 0U)
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d020      	beq.n	8002b20 <UART_SetConfig+0x520>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	4a19      	ldr	r2, [pc, #100]	; (8002b48 <UART_SetConfig+0x548>)
 8002ae4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ae8:	461a      	mov	r2, r3
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	fbb3 f2f2 	udiv	r2, r3, r2
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	085b      	lsrs	r3, r3, #1
 8002af6:	441a      	add	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	2b0f      	cmp	r3, #15
 8002b08:	d908      	bls.n	8002b1c <UART_SetConfig+0x51c>
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b10:	d204      	bcs.n	8002b1c <UART_SetConfig+0x51c>
      {
        huart->Instance->BRR = usartdiv;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	60da      	str	r2, [r3, #12]
 8002b1a:	e001      	b.n	8002b20 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8002b3c:	7ebb      	ldrb	r3, [r7, #26]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3720      	adds	r7, #32
 8002b42:	46bd      	mov	sp, r7
 8002b44:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8002b48:	08005bfc 	.word	0x08005bfc
 8002b4c:	00f42400 	.word	0x00f42400

08002b50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00a      	beq.n	8002b7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00a      	beq.n	8002b9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00a      	beq.n	8002bbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00a      	beq.n	8002be0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be4:	f003 0310 	and.w	r3, r3, #16
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00a      	beq.n	8002c02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c06:	f003 0320 	and.w	r3, r3, #32
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00a      	beq.n	8002c24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d01a      	beq.n	8002c66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c4e:	d10a      	bne.n	8002c66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00a      	beq.n	8002c88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	605a      	str	r2, [r3, #4]
  }
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af02      	add	r7, sp, #8
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ca4:	f7fe f82e 	bl	8000d04 <HAL_GetTick>
 8002ca8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0308 	and.w	r3, r3, #8
 8002cb4:	2b08      	cmp	r3, #8
 8002cb6:	d10e      	bne.n	8002cd6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f82c 	bl	8002d24 <UART_WaitOnFlagUntilTimeout>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e022      	b.n	8002d1c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b04      	cmp	r3, #4
 8002ce2:	d10e      	bne.n	8002d02 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ce4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f816 	bl	8002d24 <UART_WaitOnFlagUntilTimeout>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e00c      	b.n	8002d1c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2220      	movs	r2, #32
 8002d06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2220      	movs	r2, #32
 8002d0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	4613      	mov	r3, r2
 8002d32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d34:	e062      	b.n	8002dfc <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d3c:	d05e      	beq.n	8002dfc <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d3e:	f7fd ffe1 	bl	8000d04 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d302      	bcc.n	8002d54 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d11d      	bne.n	8002d90 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d62:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0201 	bic.w	r2, r2, #1
 8002d72:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e045      	b.n	8002e1c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0304 	and.w	r3, r3, #4
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d02e      	beq.n	8002dfc <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002da8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dac:	d126      	bne.n	8002dfc <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002db6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002dc6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0201 	bic.w	r2, r2, #1
 8002dd6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2220      	movs	r2, #32
 8002de4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e00f      	b.n	8002e1c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	69da      	ldr	r2, [r3, #28]
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	4013      	ands	r3, r2
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	bf0c      	ite	eq
 8002e0c:	2301      	moveq	r3, #1
 8002e0e:	2300      	movne	r3, #0
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	461a      	mov	r2, r3
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d08d      	beq.n	8002d36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d101      	bne.n	8002e3a <HAL_UARTEx_DisableFifoMode+0x16>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e027      	b.n	8002e8a <HAL_UARTEx_DisableFifoMode+0x66>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2224      	movs	r2, #36	; 0x24
 8002e46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 0201 	bic.w	r2, r2, #1
 8002e60:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002e68:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3714      	adds	r7, #20
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b084      	sub	sp, #16
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
 8002e9e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e02d      	b.n	8002f0a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2224      	movs	r2, #36	; 0x24
 8002eba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0201 	bic.w	r2, r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f850 	bl	8002f90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2220      	movs	r2, #32
 8002efc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b084      	sub	sp, #16
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
 8002f1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d101      	bne.n	8002f2a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e02d      	b.n	8002f86 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2224      	movs	r2, #36	; 0x24
 8002f36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0201 	bic.w	r2, r2, #1
 8002f50:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f812 	bl	8002f90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2220      	movs	r2, #32
 8002f78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
	...

08002f90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b089      	sub	sp, #36	; 0x24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8002f98:	4a2f      	ldr	r2, [pc, #188]	; (8003058 <UARTEx_SetNbDataToProcess+0xc8>)
 8002f9a:	f107 0314 	add.w	r3, r7, #20
 8002f9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002fa2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8002fa6:	4a2d      	ldr	r2, [pc, #180]	; (800305c <UARTEx_SetNbDataToProcess+0xcc>)
 8002fa8:	f107 030c 	add.w	r3, r7, #12
 8002fac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002fb0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d108      	bne.n	8002fce <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002fcc:	e03d      	b.n	800304a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002fce:	2308      	movs	r3, #8
 8002fd0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002fd2:	2308      	movs	r3, #8
 8002fd4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	0e5b      	lsrs	r3, r3, #25
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	0f5b      	lsrs	r3, r3, #29
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002ff6:	7fbb      	ldrb	r3, [r7, #30]
 8002ff8:	7f3a      	ldrb	r2, [r7, #28]
 8002ffa:	f107 0120 	add.w	r1, r7, #32
 8002ffe:	440a      	add	r2, r1
 8003000:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003004:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003008:	7f3a      	ldrb	r2, [r7, #28]
 800300a:	f107 0120 	add.w	r1, r7, #32
 800300e:	440a      	add	r2, r1
 8003010:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003014:	fb93 f3f2 	sdiv	r3, r3, r2
 8003018:	b29a      	uxth	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003020:	7ffb      	ldrb	r3, [r7, #31]
 8003022:	7f7a      	ldrb	r2, [r7, #29]
 8003024:	f107 0120 	add.w	r1, r7, #32
 8003028:	440a      	add	r2, r1
 800302a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800302e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003032:	7f7a      	ldrb	r2, [r7, #29]
 8003034:	f107 0120 	add.w	r1, r7, #32
 8003038:	440a      	add	r2, r1
 800303a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800303e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003042:	b29a      	uxth	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800304a:	bf00      	nop
 800304c:	3724      	adds	r7, #36	; 0x24
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	08005b98 	.word	0x08005b98
 800305c:	08005ba0 	.word	0x08005ba0

08003060 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003064:	bf00      	nop
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
	...

08003070 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003076:	f3ef 8305 	mrs	r3, IPSR
 800307a:	60bb      	str	r3, [r7, #8]
  return(result);
 800307c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10f      	bne.n	80030a2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003082:	f3ef 8310 	mrs	r3, PRIMASK
 8003086:	607b      	str	r3, [r7, #4]
  return(result);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d105      	bne.n	800309a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800308e:	f3ef 8311 	mrs	r3, BASEPRI
 8003092:	603b      	str	r3, [r7, #0]
  return(result);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d007      	beq.n	80030aa <osKernelInitialize+0x3a>
 800309a:	4b0e      	ldr	r3, [pc, #56]	; (80030d4 <osKernelInitialize+0x64>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d103      	bne.n	80030aa <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80030a2:	f06f 0305 	mvn.w	r3, #5
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	e00c      	b.n	80030c4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80030aa:	4b0a      	ldr	r3, [pc, #40]	; (80030d4 <osKernelInitialize+0x64>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d105      	bne.n	80030be <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80030b2:	4b08      	ldr	r3, [pc, #32]	; (80030d4 <osKernelInitialize+0x64>)
 80030b4:	2201      	movs	r2, #1
 80030b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80030b8:	2300      	movs	r3, #0
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	e002      	b.n	80030c4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80030be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030c2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80030c4:	68fb      	ldr	r3, [r7, #12]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	2000002c 	.word	0x2000002c

080030d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030de:	f3ef 8305 	mrs	r3, IPSR
 80030e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80030e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10f      	bne.n	800310a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ea:	f3ef 8310 	mrs	r3, PRIMASK
 80030ee:	607b      	str	r3, [r7, #4]
  return(result);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d105      	bne.n	8003102 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80030f6:	f3ef 8311 	mrs	r3, BASEPRI
 80030fa:	603b      	str	r3, [r7, #0]
  return(result);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d007      	beq.n	8003112 <osKernelStart+0x3a>
 8003102:	4b0f      	ldr	r3, [pc, #60]	; (8003140 <osKernelStart+0x68>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d103      	bne.n	8003112 <osKernelStart+0x3a>
    stat = osErrorISR;
 800310a:	f06f 0305 	mvn.w	r3, #5
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	e010      	b.n	8003134 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003112:	4b0b      	ldr	r3, [pc, #44]	; (8003140 <osKernelStart+0x68>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d109      	bne.n	800312e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800311a:	f7ff ffa1 	bl	8003060 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800311e:	4b08      	ldr	r3, [pc, #32]	; (8003140 <osKernelStart+0x68>)
 8003120:	2202      	movs	r2, #2
 8003122:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003124:	f001 f870 	bl	8004208 <vTaskStartScheduler>
      stat = osOK;
 8003128:	2300      	movs	r3, #0
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	e002      	b.n	8003134 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800312e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003132:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003134:	68fb      	ldr	r3, [r7, #12]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	2000002c 	.word	0x2000002c

08003144 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003144:	b580      	push	{r7, lr}
 8003146:	b090      	sub	sp, #64	; 0x40
 8003148:	af04      	add	r7, sp, #16
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003150:	2300      	movs	r3, #0
 8003152:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003154:	f3ef 8305 	mrs	r3, IPSR
 8003158:	61fb      	str	r3, [r7, #28]
  return(result);
 800315a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800315c:	2b00      	cmp	r3, #0
 800315e:	f040 808f 	bne.w	8003280 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003162:	f3ef 8310 	mrs	r3, PRIMASK
 8003166:	61bb      	str	r3, [r7, #24]
  return(result);
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d105      	bne.n	800317a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800316e:	f3ef 8311 	mrs	r3, BASEPRI
 8003172:	617b      	str	r3, [r7, #20]
  return(result);
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <osThreadNew+0x3e>
 800317a:	4b44      	ldr	r3, [pc, #272]	; (800328c <osThreadNew+0x148>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b02      	cmp	r3, #2
 8003180:	d07e      	beq.n	8003280 <osThreadNew+0x13c>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d07b      	beq.n	8003280 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003188:	2380      	movs	r3, #128	; 0x80
 800318a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800318c:	2318      	movs	r3, #24
 800318e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003190:	2300      	movs	r3, #0
 8003192:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003194:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003198:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d045      	beq.n	800322c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d002      	beq.n	80031ae <osThreadNew+0x6a>
        name = attr->name;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d002      	beq.n	80031bc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d008      	beq.n	80031d4 <osThreadNew+0x90>
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	2b38      	cmp	r3, #56	; 0x38
 80031c6:	d805      	bhi.n	80031d4 <osThreadNew+0x90>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <osThreadNew+0x94>
        return (NULL);
 80031d4:	2300      	movs	r3, #0
 80031d6:	e054      	b.n	8003282 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	089b      	lsrs	r3, r3, #2
 80031e6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00e      	beq.n	800320e <osThreadNew+0xca>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	2b5b      	cmp	r3, #91	; 0x5b
 80031f6:	d90a      	bls.n	800320e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d006      	beq.n	800320e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d002      	beq.n	800320e <osThreadNew+0xca>
        mem = 1;
 8003208:	2301      	movs	r3, #1
 800320a:	623b      	str	r3, [r7, #32]
 800320c:	e010      	b.n	8003230 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10c      	bne.n	8003230 <osThreadNew+0xec>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d108      	bne.n	8003230 <osThreadNew+0xec>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d104      	bne.n	8003230 <osThreadNew+0xec>
          mem = 0;
 8003226:	2300      	movs	r3, #0
 8003228:	623b      	str	r3, [r7, #32]
 800322a:	e001      	b.n	8003230 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800322c:	2300      	movs	r3, #0
 800322e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003230:	6a3b      	ldr	r3, [r7, #32]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d110      	bne.n	8003258 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800323e:	9202      	str	r2, [sp, #8]
 8003240:	9301      	str	r3, [sp, #4]
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800324a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 fe09 	bl	8003e64 <xTaskCreateStatic>
 8003252:	4603      	mov	r3, r0
 8003254:	613b      	str	r3, [r7, #16]
 8003256:	e013      	b.n	8003280 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d110      	bne.n	8003280 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800325e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003260:	b29a      	uxth	r2, r3
 8003262:	f107 0310 	add.w	r3, r7, #16
 8003266:	9301      	str	r3, [sp, #4]
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 fe51 	bl	8003f18 <xTaskCreate>
 8003276:	4603      	mov	r3, r0
 8003278:	2b01      	cmp	r3, #1
 800327a:	d001      	beq.n	8003280 <osThreadNew+0x13c>
          hTask = NULL;
 800327c:	2300      	movs	r3, #0
 800327e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003280:	693b      	ldr	r3, [r7, #16]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3730      	adds	r7, #48	; 0x30
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	2000002c 	.word	0x2000002c

08003290 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003298:	f3ef 8305 	mrs	r3, IPSR
 800329c:	613b      	str	r3, [r7, #16]
  return(result);
 800329e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10f      	bne.n	80032c4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032a4:	f3ef 8310 	mrs	r3, PRIMASK
 80032a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d105      	bne.n	80032bc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80032b0:	f3ef 8311 	mrs	r3, BASEPRI
 80032b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d007      	beq.n	80032cc <osDelay+0x3c>
 80032bc:	4b0a      	ldr	r3, [pc, #40]	; (80032e8 <osDelay+0x58>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d103      	bne.n	80032cc <osDelay+0x3c>
    stat = osErrorISR;
 80032c4:	f06f 0305 	mvn.w	r3, #5
 80032c8:	617b      	str	r3, [r7, #20]
 80032ca:	e007      	b.n	80032dc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80032cc:	2300      	movs	r3, #0
 80032ce:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d002      	beq.n	80032dc <osDelay+0x4c>
      vTaskDelay(ticks);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 ff62 	bl	80041a0 <vTaskDelay>
    }
  }

  return (stat);
 80032dc:	697b      	ldr	r3, [r7, #20]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3718      	adds	r7, #24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	2000002c 	.word	0x2000002c

080032ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4a07      	ldr	r2, [pc, #28]	; (8003318 <vApplicationGetIdleTaskMemory+0x2c>)
 80032fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	4a06      	ldr	r2, [pc, #24]	; (800331c <vApplicationGetIdleTaskMemory+0x30>)
 8003302:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2280      	movs	r2, #128	; 0x80
 8003308:	601a      	str	r2, [r3, #0]
}
 800330a:	bf00      	nop
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	20000030 	.word	0x20000030
 800331c:	2000008c 	.word	0x2000008c

08003320 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4a07      	ldr	r2, [pc, #28]	; (800334c <vApplicationGetTimerTaskMemory+0x2c>)
 8003330:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	4a06      	ldr	r2, [pc, #24]	; (8003350 <vApplicationGetTimerTaskMemory+0x30>)
 8003336:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800333e:	601a      	str	r2, [r3, #0]
}
 8003340:	bf00      	nop
 8003342:	3714      	adds	r7, #20
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	2000028c 	.word	0x2000028c
 8003350:	200002e8 	.word	0x200002e8

08003354 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f103 0208 	add.w	r2, r3, #8
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800336c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f103 0208 	add.w	r2, r3, #8
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f103 0208 	add.w	r2, r3, #8
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033ae:	b480      	push	{r7}
 80033b0:	b085      	sub	sp, #20
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
 80033b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	1c5a      	adds	r2, r3, #1
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	601a      	str	r2, [r3, #0]
}
 80033ea:	bf00      	nop
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033f6:	b480      	push	{r7}
 80033f8:	b085      	sub	sp, #20
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800340c:	d103      	bne.n	8003416 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	e00c      	b.n	8003430 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	3308      	adds	r3, #8
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	e002      	b.n	8003424 <vListInsert+0x2e>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	429a      	cmp	r2, r3
 800342e:	d2f6      	bcs.n	800341e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	1c5a      	adds	r2, r3, #1
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	601a      	str	r2, [r3, #0]
}
 800345c:	bf00      	nop
 800345e:	3714      	adds	r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6892      	ldr	r2, [r2, #8]
 800347e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6852      	ldr	r2, [r2, #4]
 8003488:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	429a      	cmp	r2, r3
 8003492:	d103      	bne.n	800349c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	1e5a      	subs	r2, r3, #1
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d109      	bne.n	80034e4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80034d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d4:	f383 8811 	msr	BASEPRI, r3
 80034d8:	f3bf 8f6f 	isb	sy
 80034dc:	f3bf 8f4f 	dsb	sy
 80034e0:	60bb      	str	r3, [r7, #8]
 80034e2:	e7fe      	b.n	80034e2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80034e4:	f002 f812 	bl	800550c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f0:	68f9      	ldr	r1, [r7, #12]
 80034f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80034f4:	fb01 f303 	mul.w	r3, r1, r3
 80034f8:	441a      	add	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003514:	3b01      	subs	r3, #1
 8003516:	68f9      	ldr	r1, [r7, #12]
 8003518:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800351a:	fb01 f303 	mul.w	r3, r1, r3
 800351e:	441a      	add	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	22ff      	movs	r2, #255	; 0xff
 8003528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	22ff      	movs	r2, #255	; 0xff
 8003530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d114      	bne.n	8003564 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d01a      	beq.n	8003578 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	3310      	adds	r3, #16
 8003546:	4618      	mov	r0, r3
 8003548:	f001 f8de 	bl	8004708 <xTaskRemoveFromEventList>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d012      	beq.n	8003578 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003552:	4b0d      	ldr	r3, [pc, #52]	; (8003588 <xQueueGenericReset+0xcc>)
 8003554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	f3bf 8f4f 	dsb	sy
 800355e:	f3bf 8f6f 	isb	sy
 8003562:	e009      	b.n	8003578 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	3310      	adds	r3, #16
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff fef3 	bl	8003354 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	3324      	adds	r3, #36	; 0x24
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff feee 	bl	8003354 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003578:	f001 fff6 	bl	8005568 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800357c:	2301      	movs	r3, #1
}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	e000ed04 	.word	0xe000ed04

0800358c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800358c:	b580      	push	{r7, lr}
 800358e:	b08e      	sub	sp, #56	; 0x38
 8003590:	af02      	add	r7, sp, #8
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
 8003598:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d109      	bne.n	80035b4 <xQueueGenericCreateStatic+0x28>
 80035a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a4:	f383 8811 	msr	BASEPRI, r3
 80035a8:	f3bf 8f6f 	isb	sy
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80035b2:	e7fe      	b.n	80035b2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d109      	bne.n	80035ce <xQueueGenericCreateStatic+0x42>
 80035ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035be:	f383 8811 	msr	BASEPRI, r3
 80035c2:	f3bf 8f6f 	isb	sy
 80035c6:	f3bf 8f4f 	dsb	sy
 80035ca:	627b      	str	r3, [r7, #36]	; 0x24
 80035cc:	e7fe      	b.n	80035cc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <xQueueGenericCreateStatic+0x4e>
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <xQueueGenericCreateStatic+0x52>
 80035da:	2301      	movs	r3, #1
 80035dc:	e000      	b.n	80035e0 <xQueueGenericCreateStatic+0x54>
 80035de:	2300      	movs	r3, #0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d109      	bne.n	80035f8 <xQueueGenericCreateStatic+0x6c>
 80035e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e8:	f383 8811 	msr	BASEPRI, r3
 80035ec:	f3bf 8f6f 	isb	sy
 80035f0:	f3bf 8f4f 	dsb	sy
 80035f4:	623b      	str	r3, [r7, #32]
 80035f6:	e7fe      	b.n	80035f6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d102      	bne.n	8003604 <xQueueGenericCreateStatic+0x78>
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <xQueueGenericCreateStatic+0x7c>
 8003604:	2301      	movs	r3, #1
 8003606:	e000      	b.n	800360a <xQueueGenericCreateStatic+0x7e>
 8003608:	2300      	movs	r3, #0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d109      	bne.n	8003622 <xQueueGenericCreateStatic+0x96>
 800360e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003612:	f383 8811 	msr	BASEPRI, r3
 8003616:	f3bf 8f6f 	isb	sy
 800361a:	f3bf 8f4f 	dsb	sy
 800361e:	61fb      	str	r3, [r7, #28]
 8003620:	e7fe      	b.n	8003620 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003622:	2350      	movs	r3, #80	; 0x50
 8003624:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	2b50      	cmp	r3, #80	; 0x50
 800362a:	d009      	beq.n	8003640 <xQueueGenericCreateStatic+0xb4>
 800362c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003630:	f383 8811 	msr	BASEPRI, r3
 8003634:	f3bf 8f6f 	isb	sy
 8003638:	f3bf 8f4f 	dsb	sy
 800363c:	61bb      	str	r3, [r7, #24]
 800363e:	e7fe      	b.n	800363e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003640:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00d      	beq.n	8003668 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800364c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003654:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	4613      	mov	r3, r2
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	68b9      	ldr	r1, [r7, #8]
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 f805 	bl	8003672 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800366a:	4618      	mov	r0, r3
 800366c:	3730      	adds	r7, #48	; 0x30
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b084      	sub	sp, #16
 8003676:	af00      	add	r7, sp, #0
 8003678:	60f8      	str	r0, [r7, #12]
 800367a:	60b9      	str	r1, [r7, #8]
 800367c:	607a      	str	r2, [r7, #4]
 800367e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d103      	bne.n	800368e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	e002      	b.n	8003694 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	68ba      	ldr	r2, [r7, #8]
 800369e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80036a0:	2101      	movs	r1, #1
 80036a2:	69b8      	ldr	r0, [r7, #24]
 80036a4:	f7ff ff0a 	bl	80034bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	78fa      	ldrb	r2, [r7, #3]
 80036ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80036b0:	bf00      	nop
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b08e      	sub	sp, #56	; 0x38
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
 80036c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80036c6:	2300      	movs	r3, #0
 80036c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80036ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d109      	bne.n	80036e8 <xQueueGenericSend+0x30>
 80036d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d8:	f383 8811 	msr	BASEPRI, r3
 80036dc:	f3bf 8f6f 	isb	sy
 80036e0:	f3bf 8f4f 	dsb	sy
 80036e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80036e6:	e7fe      	b.n	80036e6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d103      	bne.n	80036f6 <xQueueGenericSend+0x3e>
 80036ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <xQueueGenericSend+0x42>
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <xQueueGenericSend+0x44>
 80036fa:	2300      	movs	r3, #0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d109      	bne.n	8003714 <xQueueGenericSend+0x5c>
 8003700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003704:	f383 8811 	msr	BASEPRI, r3
 8003708:	f3bf 8f6f 	isb	sy
 800370c:	f3bf 8f4f 	dsb	sy
 8003710:	627b      	str	r3, [r7, #36]	; 0x24
 8003712:	e7fe      	b.n	8003712 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	2b02      	cmp	r3, #2
 8003718:	d103      	bne.n	8003722 <xQueueGenericSend+0x6a>
 800371a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371e:	2b01      	cmp	r3, #1
 8003720:	d101      	bne.n	8003726 <xQueueGenericSend+0x6e>
 8003722:	2301      	movs	r3, #1
 8003724:	e000      	b.n	8003728 <xQueueGenericSend+0x70>
 8003726:	2300      	movs	r3, #0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d109      	bne.n	8003740 <xQueueGenericSend+0x88>
 800372c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003730:	f383 8811 	msr	BASEPRI, r3
 8003734:	f3bf 8f6f 	isb	sy
 8003738:	f3bf 8f4f 	dsb	sy
 800373c:	623b      	str	r3, [r7, #32]
 800373e:	e7fe      	b.n	800373e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003740:	f001 f998 	bl	8004a74 <xTaskGetSchedulerState>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d102      	bne.n	8003750 <xQueueGenericSend+0x98>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <xQueueGenericSend+0x9c>
 8003750:	2301      	movs	r3, #1
 8003752:	e000      	b.n	8003756 <xQueueGenericSend+0x9e>
 8003754:	2300      	movs	r3, #0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d109      	bne.n	800376e <xQueueGenericSend+0xb6>
 800375a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375e:	f383 8811 	msr	BASEPRI, r3
 8003762:	f3bf 8f6f 	isb	sy
 8003766:	f3bf 8f4f 	dsb	sy
 800376a:	61fb      	str	r3, [r7, #28]
 800376c:	e7fe      	b.n	800376c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800376e:	f001 fecd 	bl	800550c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003774:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377a:	429a      	cmp	r2, r3
 800377c:	d302      	bcc.n	8003784 <xQueueGenericSend+0xcc>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2b02      	cmp	r3, #2
 8003782:	d129      	bne.n	80037d8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	68b9      	ldr	r1, [r7, #8]
 8003788:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800378a:	f000 f9ff 	bl	8003b8c <prvCopyDataToQueue>
 800378e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	2b00      	cmp	r3, #0
 8003796:	d010      	beq.n	80037ba <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379a:	3324      	adds	r3, #36	; 0x24
 800379c:	4618      	mov	r0, r3
 800379e:	f000 ffb3 	bl	8004708 <xTaskRemoveFromEventList>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d013      	beq.n	80037d0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80037a8:	4b3f      	ldr	r3, [pc, #252]	; (80038a8 <xQueueGenericSend+0x1f0>)
 80037aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	f3bf 8f4f 	dsb	sy
 80037b4:	f3bf 8f6f 	isb	sy
 80037b8:	e00a      	b.n	80037d0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80037ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d007      	beq.n	80037d0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80037c0:	4b39      	ldr	r3, [pc, #228]	; (80038a8 <xQueueGenericSend+0x1f0>)
 80037c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	f3bf 8f4f 	dsb	sy
 80037cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80037d0:	f001 feca 	bl	8005568 <vPortExitCritical>
				return pdPASS;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e063      	b.n	80038a0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d103      	bne.n	80037e6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80037de:	f001 fec3 	bl	8005568 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80037e2:	2300      	movs	r3, #0
 80037e4:	e05c      	b.n	80038a0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80037e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d106      	bne.n	80037fa <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80037ec:	f107 0314 	add.w	r3, r7, #20
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 ffeb 	bl	80047cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80037f6:	2301      	movs	r3, #1
 80037f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80037fa:	f001 feb5 	bl	8005568 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80037fe:	f000 fd67 	bl	80042d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003802:	f001 fe83 	bl	800550c <vPortEnterCritical>
 8003806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003808:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800380c:	b25b      	sxtb	r3, r3
 800380e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003812:	d103      	bne.n	800381c <xQueueGenericSend+0x164>
 8003814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800381c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003822:	b25b      	sxtb	r3, r3
 8003824:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003828:	d103      	bne.n	8003832 <xQueueGenericSend+0x17a>
 800382a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003832:	f001 fe99 	bl	8005568 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003836:	1d3a      	adds	r2, r7, #4
 8003838:	f107 0314 	add.w	r3, r7, #20
 800383c:	4611      	mov	r1, r2
 800383e:	4618      	mov	r0, r3
 8003840:	f000 ffda 	bl	80047f8 <xTaskCheckForTimeOut>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d124      	bne.n	8003894 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800384a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800384c:	f000 fa96 	bl	8003d7c <prvIsQueueFull>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d018      	beq.n	8003888 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003858:	3310      	adds	r3, #16
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	4611      	mov	r1, r2
 800385e:	4618      	mov	r0, r3
 8003860:	f000 ff04 	bl	800466c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003864:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003866:	f000 fa21 	bl	8003cac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800386a:	f000 fd3f 	bl	80042ec <xTaskResumeAll>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	f47f af7c 	bne.w	800376e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003876:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <xQueueGenericSend+0x1f0>)
 8003878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	f3bf 8f4f 	dsb	sy
 8003882:	f3bf 8f6f 	isb	sy
 8003886:	e772      	b.n	800376e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003888:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800388a:	f000 fa0f 	bl	8003cac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800388e:	f000 fd2d 	bl	80042ec <xTaskResumeAll>
 8003892:	e76c      	b.n	800376e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003894:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003896:	f000 fa09 	bl	8003cac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800389a:	f000 fd27 	bl	80042ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800389e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3738      	adds	r7, #56	; 0x38
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	e000ed04 	.word	0xe000ed04

080038ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b08e      	sub	sp, #56	; 0x38
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
 80038b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80038be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d109      	bne.n	80038d8 <xQueueGenericSendFromISR+0x2c>
 80038c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c8:	f383 8811 	msr	BASEPRI, r3
 80038cc:	f3bf 8f6f 	isb	sy
 80038d0:	f3bf 8f4f 	dsb	sy
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
 80038d6:	e7fe      	b.n	80038d6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d103      	bne.n	80038e6 <xQueueGenericSendFromISR+0x3a>
 80038de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <xQueueGenericSendFromISR+0x3e>
 80038e6:	2301      	movs	r3, #1
 80038e8:	e000      	b.n	80038ec <xQueueGenericSendFromISR+0x40>
 80038ea:	2300      	movs	r3, #0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d109      	bne.n	8003904 <xQueueGenericSendFromISR+0x58>
 80038f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f4:	f383 8811 	msr	BASEPRI, r3
 80038f8:	f3bf 8f6f 	isb	sy
 80038fc:	f3bf 8f4f 	dsb	sy
 8003900:	623b      	str	r3, [r7, #32]
 8003902:	e7fe      	b.n	8003902 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	2b02      	cmp	r3, #2
 8003908:	d103      	bne.n	8003912 <xQueueGenericSendFromISR+0x66>
 800390a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390e:	2b01      	cmp	r3, #1
 8003910:	d101      	bne.n	8003916 <xQueueGenericSendFromISR+0x6a>
 8003912:	2301      	movs	r3, #1
 8003914:	e000      	b.n	8003918 <xQueueGenericSendFromISR+0x6c>
 8003916:	2300      	movs	r3, #0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d109      	bne.n	8003930 <xQueueGenericSendFromISR+0x84>
 800391c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003920:	f383 8811 	msr	BASEPRI, r3
 8003924:	f3bf 8f6f 	isb	sy
 8003928:	f3bf 8f4f 	dsb	sy
 800392c:	61fb      	str	r3, [r7, #28]
 800392e:	e7fe      	b.n	800392e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003930:	f001 fec8 	bl	80056c4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003934:	f3ef 8211 	mrs	r2, BASEPRI
 8003938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393c:	f383 8811 	msr	BASEPRI, r3
 8003940:	f3bf 8f6f 	isb	sy
 8003944:	f3bf 8f4f 	dsb	sy
 8003948:	61ba      	str	r2, [r7, #24]
 800394a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800394c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800394e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003952:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003958:	429a      	cmp	r2, r3
 800395a:	d302      	bcc.n	8003962 <xQueueGenericSendFromISR+0xb6>
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	2b02      	cmp	r3, #2
 8003960:	d12c      	bne.n	80039bc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003964:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003968:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	68b9      	ldr	r1, [r7, #8]
 8003970:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003972:	f000 f90b 	bl	8003b8c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003976:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800397a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800397e:	d112      	bne.n	80039a6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	2b00      	cmp	r3, #0
 8003986:	d016      	beq.n	80039b6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398a:	3324      	adds	r3, #36	; 0x24
 800398c:	4618      	mov	r0, r3
 800398e:	f000 febb 	bl	8004708 <xTaskRemoveFromEventList>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00e      	beq.n	80039b6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00b      	beq.n	80039b6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	e007      	b.n	80039b6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80039a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80039aa:	3301      	adds	r3, #1
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	b25a      	sxtb	r2, r3
 80039b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80039b6:	2301      	movs	r3, #1
 80039b8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80039ba:	e001      	b.n	80039c0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80039bc:	2300      	movs	r3, #0
 80039be:	637b      	str	r3, [r7, #52]	; 0x34
 80039c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80039ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3738      	adds	r7, #56	; 0x38
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b08c      	sub	sp, #48	; 0x30
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80039e0:	2300      	movs	r3, #0
 80039e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80039e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d109      	bne.n	8003a02 <xQueueReceive+0x2e>
	__asm volatile
 80039ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f2:	f383 8811 	msr	BASEPRI, r3
 80039f6:	f3bf 8f6f 	isb	sy
 80039fa:	f3bf 8f4f 	dsb	sy
 80039fe:	623b      	str	r3, [r7, #32]
 8003a00:	e7fe      	b.n	8003a00 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d103      	bne.n	8003a10 <xQueueReceive+0x3c>
 8003a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <xQueueReceive+0x40>
 8003a10:	2301      	movs	r3, #1
 8003a12:	e000      	b.n	8003a16 <xQueueReceive+0x42>
 8003a14:	2300      	movs	r3, #0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d109      	bne.n	8003a2e <xQueueReceive+0x5a>
 8003a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1e:	f383 8811 	msr	BASEPRI, r3
 8003a22:	f3bf 8f6f 	isb	sy
 8003a26:	f3bf 8f4f 	dsb	sy
 8003a2a:	61fb      	str	r3, [r7, #28]
 8003a2c:	e7fe      	b.n	8003a2c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a2e:	f001 f821 	bl	8004a74 <xTaskGetSchedulerState>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d102      	bne.n	8003a3e <xQueueReceive+0x6a>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <xQueueReceive+0x6e>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <xQueueReceive+0x70>
 8003a42:	2300      	movs	r3, #0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d109      	bne.n	8003a5c <xQueueReceive+0x88>
 8003a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4c:	f383 8811 	msr	BASEPRI, r3
 8003a50:	f3bf 8f6f 	isb	sy
 8003a54:	f3bf 8f4f 	dsb	sy
 8003a58:	61bb      	str	r3, [r7, #24]
 8003a5a:	e7fe      	b.n	8003a5a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a5c:	f001 fd56 	bl	800550c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a64:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d01f      	beq.n	8003aac <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a6c:	68b9      	ldr	r1, [r7, #8]
 8003a6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a70:	f000 f8f6 	bl	8003c60 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a76:	1e5a      	subs	r2, r3, #1
 8003a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00f      	beq.n	8003aa4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a86:	3310      	adds	r3, #16
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 fe3d 	bl	8004708 <xTaskRemoveFromEventList>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d007      	beq.n	8003aa4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a94:	4b3c      	ldr	r3, [pc, #240]	; (8003b88 <xQueueReceive+0x1b4>)
 8003a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003aa4:	f001 fd60 	bl	8005568 <vPortExitCritical>
				return pdPASS;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e069      	b.n	8003b80 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d103      	bne.n	8003aba <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ab2:	f001 fd59 	bl	8005568 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	e062      	b.n	8003b80 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d106      	bne.n	8003ace <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ac0:	f107 0310 	add.w	r3, r7, #16
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f000 fe81 	bl	80047cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003aca:	2301      	movs	r3, #1
 8003acc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ace:	f001 fd4b 	bl	8005568 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ad2:	f000 fbfd 	bl	80042d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ad6:	f001 fd19 	bl	800550c <vPortEnterCritical>
 8003ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003adc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ae0:	b25b      	sxtb	r3, r3
 8003ae2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ae6:	d103      	bne.n	8003af0 <xQueueReceive+0x11c>
 8003ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003af6:	b25b      	sxtb	r3, r3
 8003af8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003afc:	d103      	bne.n	8003b06 <xQueueReceive+0x132>
 8003afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b06:	f001 fd2f 	bl	8005568 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b0a:	1d3a      	adds	r2, r7, #4
 8003b0c:	f107 0310 	add.w	r3, r7, #16
 8003b10:	4611      	mov	r1, r2
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 fe70 	bl	80047f8 <xTaskCheckForTimeOut>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d123      	bne.n	8003b66 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b20:	f000 f916 	bl	8003d50 <prvIsQueueEmpty>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d017      	beq.n	8003b5a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2c:	3324      	adds	r3, #36	; 0x24
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	4611      	mov	r1, r2
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 fd9a 	bl	800466c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b3a:	f000 f8b7 	bl	8003cac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b3e:	f000 fbd5 	bl	80042ec <xTaskResumeAll>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d189      	bne.n	8003a5c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003b48:	4b0f      	ldr	r3, [pc, #60]	; (8003b88 <xQueueReceive+0x1b4>)
 8003b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	f3bf 8f4f 	dsb	sy
 8003b54:	f3bf 8f6f 	isb	sy
 8003b58:	e780      	b.n	8003a5c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003b5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b5c:	f000 f8a6 	bl	8003cac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b60:	f000 fbc4 	bl	80042ec <xTaskResumeAll>
 8003b64:	e77a      	b.n	8003a5c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003b66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b68:	f000 f8a0 	bl	8003cac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b6c:	f000 fbbe 	bl	80042ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b72:	f000 f8ed 	bl	8003d50 <prvIsQueueEmpty>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f43f af6f 	beq.w	8003a5c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b7e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3730      	adds	r7, #48	; 0x30
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	e000ed04 	.word	0xe000ed04

08003b8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10d      	bne.n	8003bc6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d14d      	bne.n	8003c4e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 ff7a 	bl	8004ab0 <xTaskPriorityDisinherit>
 8003bbc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	609a      	str	r2, [r3, #8]
 8003bc4:	e043      	b.n	8003c4e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d119      	bne.n	8003c00 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6858      	ldr	r0, [r3, #4]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	68b9      	ldr	r1, [r7, #8]
 8003bd8:	f001 ffac 	bl	8005b34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be4:	441a      	add	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d32b      	bcc.n	8003c4e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	605a      	str	r2, [r3, #4]
 8003bfe:	e026      	b.n	8003c4e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	68d8      	ldr	r0, [r3, #12]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c08:	461a      	mov	r2, r3
 8003c0a:	68b9      	ldr	r1, [r7, #8]
 8003c0c:	f001 ff92 	bl	8005b34 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	68da      	ldr	r2, [r3, #12]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c18:	425b      	negs	r3, r3
 8003c1a:	441a      	add	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	68da      	ldr	r2, [r3, #12]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d207      	bcs.n	8003c3c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	425b      	negs	r3, r3
 8003c36:	441a      	add	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d105      	bne.n	8003c4e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003c56:	697b      	ldr	r3, [r7, #20]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3718      	adds	r7, #24
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d018      	beq.n	8003ca4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	441a      	add	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d303      	bcc.n	8003c94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68d9      	ldr	r1, [r3, #12]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	6838      	ldr	r0, [r7, #0]
 8003ca0:	f001 ff48 	bl	8005b34 <memcpy>
	}
}
 8003ca4:	bf00      	nop
 8003ca6:	3708      	adds	r7, #8
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003cb4:	f001 fc2a 	bl	800550c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cbe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003cc0:	e011      	b.n	8003ce6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d012      	beq.n	8003cf0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	3324      	adds	r3, #36	; 0x24
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 fd1a 	bl	8004708 <xTaskRemoveFromEventList>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003cda:	f000 fded 	bl	80048b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003cde:	7bfb      	ldrb	r3, [r7, #15]
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	dce9      	bgt.n	8003cc2 <prvUnlockQueue+0x16>
 8003cee:	e000      	b.n	8003cf2 <prvUnlockQueue+0x46>
					break;
 8003cf0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	22ff      	movs	r2, #255	; 0xff
 8003cf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003cfa:	f001 fc35 	bl	8005568 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003cfe:	f001 fc05 	bl	800550c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d0a:	e011      	b.n	8003d30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d012      	beq.n	8003d3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3310      	adds	r3, #16
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f000 fcf5 	bl	8004708 <xTaskRemoveFromEventList>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003d24:	f000 fdc8 	bl	80048b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003d28:	7bbb      	ldrb	r3, [r7, #14]
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	dce9      	bgt.n	8003d0c <prvUnlockQueue+0x60>
 8003d38:	e000      	b.n	8003d3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003d3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	22ff      	movs	r2, #255	; 0xff
 8003d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003d44:	f001 fc10 	bl	8005568 <vPortExitCritical>
}
 8003d48:	bf00      	nop
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d58:	f001 fbd8 	bl	800550c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d102      	bne.n	8003d6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003d64:	2301      	movs	r3, #1
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	e001      	b.n	8003d6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d6e:	f001 fbfb 	bl	8005568 <vPortExitCritical>

	return xReturn;
 8003d72:	68fb      	ldr	r3, [r7, #12]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d84:	f001 fbc2 	bl	800550c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d102      	bne.n	8003d9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003d94:	2301      	movs	r3, #1
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	e001      	b.n	8003d9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d9e:	f001 fbe3 	bl	8005568 <vPortExitCritical>

	return xReturn;
 8003da2:	68fb      	ldr	r3, [r7, #12]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003db6:	2300      	movs	r3, #0
 8003db8:	60fb      	str	r3, [r7, #12]
 8003dba:	e014      	b.n	8003de6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003dbc:	4a0e      	ldr	r2, [pc, #56]	; (8003df8 <vQueueAddToRegistry+0x4c>)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10b      	bne.n	8003de0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003dc8:	490b      	ldr	r1, [pc, #44]	; (8003df8 <vQueueAddToRegistry+0x4c>)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003dd2:	4a09      	ldr	r2, [pc, #36]	; (8003df8 <vQueueAddToRegistry+0x4c>)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	4413      	add	r3, r2
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003dde:	e005      	b.n	8003dec <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	3301      	adds	r3, #1
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2b07      	cmp	r3, #7
 8003dea:	d9e7      	bls.n	8003dbc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003dec:	bf00      	nop
 8003dee:	3714      	adds	r7, #20
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	20001a14 	.word	0x20001a14

08003dfc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003e0c:	f001 fb7e 	bl	800550c <vPortEnterCritical>
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e16:	b25b      	sxtb	r3, r3
 8003e18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e1c:	d103      	bne.n	8003e26 <vQueueWaitForMessageRestricted+0x2a>
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e2c:	b25b      	sxtb	r3, r3
 8003e2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e32:	d103      	bne.n	8003e3c <vQueueWaitForMessageRestricted+0x40>
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e3c:	f001 fb94 	bl	8005568 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d106      	bne.n	8003e56 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	3324      	adds	r3, #36	; 0x24
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	68b9      	ldr	r1, [r7, #8]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 fc2f 	bl	80046b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003e56:	6978      	ldr	r0, [r7, #20]
 8003e58:	f7ff ff28 	bl	8003cac <prvUnlockQueue>
	}
 8003e5c:	bf00      	nop
 8003e5e:	3718      	adds	r7, #24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b08e      	sub	sp, #56	; 0x38
 8003e68:	af04      	add	r7, sp, #16
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
 8003e70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d109      	bne.n	8003e8c <xTaskCreateStatic+0x28>
 8003e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7c:	f383 8811 	msr	BASEPRI, r3
 8003e80:	f3bf 8f6f 	isb	sy
 8003e84:	f3bf 8f4f 	dsb	sy
 8003e88:	623b      	str	r3, [r7, #32]
 8003e8a:	e7fe      	b.n	8003e8a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d109      	bne.n	8003ea6 <xTaskCreateStatic+0x42>
 8003e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e96:	f383 8811 	msr	BASEPRI, r3
 8003e9a:	f3bf 8f6f 	isb	sy
 8003e9e:	f3bf 8f4f 	dsb	sy
 8003ea2:	61fb      	str	r3, [r7, #28]
 8003ea4:	e7fe      	b.n	8003ea4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003ea6:	235c      	movs	r3, #92	; 0x5c
 8003ea8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	2b5c      	cmp	r3, #92	; 0x5c
 8003eae:	d009      	beq.n	8003ec4 <xTaskCreateStatic+0x60>
 8003eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb4:	f383 8811 	msr	BASEPRI, r3
 8003eb8:	f3bf 8f6f 	isb	sy
 8003ebc:	f3bf 8f4f 	dsb	sy
 8003ec0:	61bb      	str	r3, [r7, #24]
 8003ec2:	e7fe      	b.n	8003ec2 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003ec4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d01e      	beq.n	8003f0a <xTaskCreateStatic+0xa6>
 8003ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d01b      	beq.n	8003f0a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003eda:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	9303      	str	r3, [sp, #12]
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	9302      	str	r3, [sp, #8]
 8003eec:	f107 0314 	add.w	r3, r7, #20
 8003ef0:	9301      	str	r3, [sp, #4]
 8003ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	68b9      	ldr	r1, [r7, #8]
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 f850 	bl	8003fa2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f04:	f000 f8dc 	bl	80040c0 <prvAddNewTaskToReadyList>
 8003f08:	e001      	b.n	8003f0e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003f0e:	697b      	ldr	r3, [r7, #20]
	}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3728      	adds	r7, #40	; 0x28
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b08c      	sub	sp, #48	; 0x30
 8003f1c:	af04      	add	r7, sp, #16
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	603b      	str	r3, [r7, #0]
 8003f24:	4613      	mov	r3, r2
 8003f26:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003f28:	88fb      	ldrh	r3, [r7, #6]
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f001 fc07 	bl	8005740 <pvPortMalloc>
 8003f32:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00e      	beq.n	8003f58 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003f3a:	205c      	movs	r0, #92	; 0x5c
 8003f3c:	f001 fc00 	bl	8005740 <pvPortMalloc>
 8003f40:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d003      	beq.n	8003f50 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	631a      	str	r2, [r3, #48]	; 0x30
 8003f4e:	e005      	b.n	8003f5c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f50:	6978      	ldr	r0, [r7, #20]
 8003f52:	f001 fcb7 	bl	80058c4 <vPortFree>
 8003f56:	e001      	b.n	8003f5c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d017      	beq.n	8003f92 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f6a:	88fa      	ldrh	r2, [r7, #6]
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	9303      	str	r3, [sp, #12]
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	9302      	str	r3, [sp, #8]
 8003f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f76:	9301      	str	r3, [sp, #4]
 8003f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	68b9      	ldr	r1, [r7, #8]
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 f80e 	bl	8003fa2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f86:	69f8      	ldr	r0, [r7, #28]
 8003f88:	f000 f89a 	bl	80040c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	61bb      	str	r3, [r7, #24]
 8003f90:	e002      	b.n	8003f98 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f96:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f98:	69bb      	ldr	r3, [r7, #24]
	}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3720      	adds	r7, #32
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b088      	sub	sp, #32
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	60f8      	str	r0, [r7, #12]
 8003faa:	60b9      	str	r1, [r7, #8]
 8003fac:	607a      	str	r2, [r7, #4]
 8003fae:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	461a      	mov	r2, r3
 8003fba:	21a5      	movs	r1, #165	; 0xa5
 8003fbc:	f001 fdc5 	bl	8005b4a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4413      	add	r3, r2
 8003fd0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	f023 0307 	bic.w	r3, r3, #7
 8003fd8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d009      	beq.n	8003ff8 <prvInitialiseNewTask+0x56>
 8003fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe8:	f383 8811 	msr	BASEPRI, r3
 8003fec:	f3bf 8f6f 	isb	sy
 8003ff0:	f3bf 8f4f 	dsb	sy
 8003ff4:	617b      	str	r3, [r7, #20]
 8003ff6:	e7fe      	b.n	8003ff6 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d01f      	beq.n	800403e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ffe:	2300      	movs	r3, #0
 8004000:	61fb      	str	r3, [r7, #28]
 8004002:	e012      	b.n	800402a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	4413      	add	r3, r2
 800400a:	7819      	ldrb	r1, [r3, #0]
 800400c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	4413      	add	r3, r2
 8004012:	3334      	adds	r3, #52	; 0x34
 8004014:	460a      	mov	r2, r1
 8004016:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	4413      	add	r3, r2
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d006      	beq.n	8004032 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	3301      	adds	r3, #1
 8004028:	61fb      	str	r3, [r7, #28]
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	2b0f      	cmp	r3, #15
 800402e:	d9e9      	bls.n	8004004 <prvInitialiseNewTask+0x62>
 8004030:	e000      	b.n	8004034 <prvInitialiseNewTask+0x92>
			{
				break;
 8004032:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800403c:	e003      	b.n	8004046 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800403e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004048:	2b37      	cmp	r3, #55	; 0x37
 800404a:	d901      	bls.n	8004050 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800404c:	2337      	movs	r3, #55	; 0x37
 800404e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004052:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004054:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004058:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800405a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800405c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405e:	2200      	movs	r2, #0
 8004060:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004064:	3304      	adds	r3, #4
 8004066:	4618      	mov	r0, r3
 8004068:	f7ff f994 	bl	8003394 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800406c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406e:	3318      	adds	r3, #24
 8004070:	4618      	mov	r0, r3
 8004072:	f7ff f98f 	bl	8003394 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800407a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800407c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004084:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800408a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800408c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408e:	2200      	movs	r2, #0
 8004090:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	68f9      	ldr	r1, [r7, #12]
 800409e:	69b8      	ldr	r0, [r7, #24]
 80040a0:	f001 f90c 	bl	80052bc <pxPortInitialiseStack>
 80040a4:	4602      	mov	r2, r0
 80040a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80040aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d002      	beq.n	80040b6 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80040b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040b6:	bf00      	nop
 80040b8:	3720      	adds	r7, #32
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
	...

080040c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80040c8:	f001 fa20 	bl	800550c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80040cc:	4b2d      	ldr	r3, [pc, #180]	; (8004184 <prvAddNewTaskToReadyList+0xc4>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	3301      	adds	r3, #1
 80040d2:	4a2c      	ldr	r2, [pc, #176]	; (8004184 <prvAddNewTaskToReadyList+0xc4>)
 80040d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80040d6:	4b2c      	ldr	r3, [pc, #176]	; (8004188 <prvAddNewTaskToReadyList+0xc8>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d109      	bne.n	80040f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80040de:	4a2a      	ldr	r2, [pc, #168]	; (8004188 <prvAddNewTaskToReadyList+0xc8>)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80040e4:	4b27      	ldr	r3, [pc, #156]	; (8004184 <prvAddNewTaskToReadyList+0xc4>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d110      	bne.n	800410e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80040ec:	f000 fc08 	bl	8004900 <prvInitialiseTaskLists>
 80040f0:	e00d      	b.n	800410e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80040f2:	4b26      	ldr	r3, [pc, #152]	; (800418c <prvAddNewTaskToReadyList+0xcc>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d109      	bne.n	800410e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80040fa:	4b23      	ldr	r3, [pc, #140]	; (8004188 <prvAddNewTaskToReadyList+0xc8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004104:	429a      	cmp	r2, r3
 8004106:	d802      	bhi.n	800410e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004108:	4a1f      	ldr	r2, [pc, #124]	; (8004188 <prvAddNewTaskToReadyList+0xc8>)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800410e:	4b20      	ldr	r3, [pc, #128]	; (8004190 <prvAddNewTaskToReadyList+0xd0>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	3301      	adds	r3, #1
 8004114:	4a1e      	ldr	r2, [pc, #120]	; (8004190 <prvAddNewTaskToReadyList+0xd0>)
 8004116:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004118:	4b1d      	ldr	r3, [pc, #116]	; (8004190 <prvAddNewTaskToReadyList+0xd0>)
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004124:	4b1b      	ldr	r3, [pc, #108]	; (8004194 <prvAddNewTaskToReadyList+0xd4>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	429a      	cmp	r2, r3
 800412a:	d903      	bls.n	8004134 <prvAddNewTaskToReadyList+0x74>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004130:	4a18      	ldr	r2, [pc, #96]	; (8004194 <prvAddNewTaskToReadyList+0xd4>)
 8004132:	6013      	str	r3, [r2, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004138:	4613      	mov	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4413      	add	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4a15      	ldr	r2, [pc, #84]	; (8004198 <prvAddNewTaskToReadyList+0xd8>)
 8004142:	441a      	add	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	3304      	adds	r3, #4
 8004148:	4619      	mov	r1, r3
 800414a:	4610      	mov	r0, r2
 800414c:	f7ff f92f 	bl	80033ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004150:	f001 fa0a 	bl	8005568 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004154:	4b0d      	ldr	r3, [pc, #52]	; (800418c <prvAddNewTaskToReadyList+0xcc>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00e      	beq.n	800417a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800415c:	4b0a      	ldr	r3, [pc, #40]	; (8004188 <prvAddNewTaskToReadyList+0xc8>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004166:	429a      	cmp	r2, r3
 8004168:	d207      	bcs.n	800417a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800416a:	4b0c      	ldr	r3, [pc, #48]	; (800419c <prvAddNewTaskToReadyList+0xdc>)
 800416c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	f3bf 8f4f 	dsb	sy
 8004176:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800417a:	bf00      	nop
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	20000bbc 	.word	0x20000bbc
 8004188:	200006e8 	.word	0x200006e8
 800418c:	20000bc8 	.word	0x20000bc8
 8004190:	20000bd8 	.word	0x20000bd8
 8004194:	20000bc4 	.word	0x20000bc4
 8004198:	200006ec 	.word	0x200006ec
 800419c:	e000ed04 	.word	0xe000ed04

080041a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80041a8:	2300      	movs	r3, #0
 80041aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d016      	beq.n	80041e0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80041b2:	4b13      	ldr	r3, [pc, #76]	; (8004200 <vTaskDelay+0x60>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d009      	beq.n	80041ce <vTaskDelay+0x2e>
 80041ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041be:	f383 8811 	msr	BASEPRI, r3
 80041c2:	f3bf 8f6f 	isb	sy
 80041c6:	f3bf 8f4f 	dsb	sy
 80041ca:	60bb      	str	r3, [r7, #8]
 80041cc:	e7fe      	b.n	80041cc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80041ce:	f000 f87f 	bl	80042d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80041d2:	2100      	movs	r1, #0
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 fcd7 	bl	8004b88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80041da:	f000 f887 	bl	80042ec <xTaskResumeAll>
 80041de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d107      	bne.n	80041f6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80041e6:	4b07      	ldr	r3, [pc, #28]	; (8004204 <vTaskDelay+0x64>)
 80041e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	f3bf 8f4f 	dsb	sy
 80041f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80041f6:	bf00      	nop
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	20000be4 	.word	0x20000be4
 8004204:	e000ed04 	.word	0xe000ed04

08004208 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b08a      	sub	sp, #40	; 0x28
 800420c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800420e:	2300      	movs	r3, #0
 8004210:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004212:	2300      	movs	r3, #0
 8004214:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004216:	463a      	mov	r2, r7
 8004218:	1d39      	adds	r1, r7, #4
 800421a:	f107 0308 	add.w	r3, r7, #8
 800421e:	4618      	mov	r0, r3
 8004220:	f7ff f864 	bl	80032ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004224:	6839      	ldr	r1, [r7, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	9202      	str	r2, [sp, #8]
 800422c:	9301      	str	r3, [sp, #4]
 800422e:	2300      	movs	r3, #0
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	2300      	movs	r3, #0
 8004234:	460a      	mov	r2, r1
 8004236:	4920      	ldr	r1, [pc, #128]	; (80042b8 <vTaskStartScheduler+0xb0>)
 8004238:	4820      	ldr	r0, [pc, #128]	; (80042bc <vTaskStartScheduler+0xb4>)
 800423a:	f7ff fe13 	bl	8003e64 <xTaskCreateStatic>
 800423e:	4602      	mov	r2, r0
 8004240:	4b1f      	ldr	r3, [pc, #124]	; (80042c0 <vTaskStartScheduler+0xb8>)
 8004242:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004244:	4b1e      	ldr	r3, [pc, #120]	; (80042c0 <vTaskStartScheduler+0xb8>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d002      	beq.n	8004252 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800424c:	2301      	movs	r3, #1
 800424e:	617b      	str	r3, [r7, #20]
 8004250:	e001      	b.n	8004256 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004252:	2300      	movs	r3, #0
 8004254:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d102      	bne.n	8004262 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800425c:	f000 fce8 	bl	8004c30 <xTimerCreateTimerTask>
 8004260:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d115      	bne.n	8004294 <vTaskStartScheduler+0x8c>
 8004268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426c:	f383 8811 	msr	BASEPRI, r3
 8004270:	f3bf 8f6f 	isb	sy
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800427a:	4b12      	ldr	r3, [pc, #72]	; (80042c4 <vTaskStartScheduler+0xbc>)
 800427c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004280:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004282:	4b11      	ldr	r3, [pc, #68]	; (80042c8 <vTaskStartScheduler+0xc0>)
 8004284:	2201      	movs	r2, #1
 8004286:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004288:	4b10      	ldr	r3, [pc, #64]	; (80042cc <vTaskStartScheduler+0xc4>)
 800428a:	2200      	movs	r2, #0
 800428c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800428e:	f001 f89f 	bl	80053d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004292:	e00d      	b.n	80042b0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800429a:	d109      	bne.n	80042b0 <vTaskStartScheduler+0xa8>
 800429c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a0:	f383 8811 	msr	BASEPRI, r3
 80042a4:	f3bf 8f6f 	isb	sy
 80042a8:	f3bf 8f4f 	dsb	sy
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	e7fe      	b.n	80042ae <vTaskStartScheduler+0xa6>
}
 80042b0:	bf00      	nop
 80042b2:	3718      	adds	r7, #24
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	08005ba8 	.word	0x08005ba8
 80042bc:	080048d1 	.word	0x080048d1
 80042c0:	20000be0 	.word	0x20000be0
 80042c4:	20000bdc 	.word	0x20000bdc
 80042c8:	20000bc8 	.word	0x20000bc8
 80042cc:	20000bc0 	.word	0x20000bc0

080042d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80042d4:	4b04      	ldr	r3, [pc, #16]	; (80042e8 <vTaskSuspendAll+0x18>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	3301      	adds	r3, #1
 80042da:	4a03      	ldr	r2, [pc, #12]	; (80042e8 <vTaskSuspendAll+0x18>)
 80042dc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80042de:	bf00      	nop
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr
 80042e8:	20000be4 	.word	0x20000be4

080042ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80042f2:	2300      	movs	r3, #0
 80042f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80042f6:	2300      	movs	r3, #0
 80042f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80042fa:	4b41      	ldr	r3, [pc, #260]	; (8004400 <xTaskResumeAll+0x114>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d109      	bne.n	8004316 <xTaskResumeAll+0x2a>
 8004302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004306:	f383 8811 	msr	BASEPRI, r3
 800430a:	f3bf 8f6f 	isb	sy
 800430e:	f3bf 8f4f 	dsb	sy
 8004312:	603b      	str	r3, [r7, #0]
 8004314:	e7fe      	b.n	8004314 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004316:	f001 f8f9 	bl	800550c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800431a:	4b39      	ldr	r3, [pc, #228]	; (8004400 <xTaskResumeAll+0x114>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	3b01      	subs	r3, #1
 8004320:	4a37      	ldr	r2, [pc, #220]	; (8004400 <xTaskResumeAll+0x114>)
 8004322:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004324:	4b36      	ldr	r3, [pc, #216]	; (8004400 <xTaskResumeAll+0x114>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d162      	bne.n	80043f2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800432c:	4b35      	ldr	r3, [pc, #212]	; (8004404 <xTaskResumeAll+0x118>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d05e      	beq.n	80043f2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004334:	e02f      	b.n	8004396 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004336:	4b34      	ldr	r3, [pc, #208]	; (8004408 <xTaskResumeAll+0x11c>)
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	3318      	adds	r3, #24
 8004342:	4618      	mov	r0, r3
 8004344:	f7ff f890 	bl	8003468 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	3304      	adds	r3, #4
 800434c:	4618      	mov	r0, r3
 800434e:	f7ff f88b 	bl	8003468 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004356:	4b2d      	ldr	r3, [pc, #180]	; (800440c <xTaskResumeAll+0x120>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	429a      	cmp	r2, r3
 800435c:	d903      	bls.n	8004366 <xTaskResumeAll+0x7a>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004362:	4a2a      	ldr	r2, [pc, #168]	; (800440c <xTaskResumeAll+0x120>)
 8004364:	6013      	str	r3, [r2, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800436a:	4613      	mov	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	4413      	add	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4a27      	ldr	r2, [pc, #156]	; (8004410 <xTaskResumeAll+0x124>)
 8004374:	441a      	add	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	3304      	adds	r3, #4
 800437a:	4619      	mov	r1, r3
 800437c:	4610      	mov	r0, r2
 800437e:	f7ff f816 	bl	80033ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004386:	4b23      	ldr	r3, [pc, #140]	; (8004414 <xTaskResumeAll+0x128>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438c:	429a      	cmp	r2, r3
 800438e:	d302      	bcc.n	8004396 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004390:	4b21      	ldr	r3, [pc, #132]	; (8004418 <xTaskResumeAll+0x12c>)
 8004392:	2201      	movs	r2, #1
 8004394:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004396:	4b1c      	ldr	r3, [pc, #112]	; (8004408 <xTaskResumeAll+0x11c>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1cb      	bne.n	8004336 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d001      	beq.n	80043a8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80043a4:	f000 fb46 	bl	8004a34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80043a8:	4b1c      	ldr	r3, [pc, #112]	; (800441c <xTaskResumeAll+0x130>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d010      	beq.n	80043d6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80043b4:	f000 f846 	bl	8004444 <xTaskIncrementTick>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d002      	beq.n	80043c4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80043be:	4b16      	ldr	r3, [pc, #88]	; (8004418 <xTaskResumeAll+0x12c>)
 80043c0:	2201      	movs	r2, #1
 80043c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	3b01      	subs	r3, #1
 80043c8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1f1      	bne.n	80043b4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80043d0:	4b12      	ldr	r3, [pc, #72]	; (800441c <xTaskResumeAll+0x130>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80043d6:	4b10      	ldr	r3, [pc, #64]	; (8004418 <xTaskResumeAll+0x12c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d009      	beq.n	80043f2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80043de:	2301      	movs	r3, #1
 80043e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80043e2:	4b0f      	ldr	r3, [pc, #60]	; (8004420 <xTaskResumeAll+0x134>)
 80043e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	f3bf 8f4f 	dsb	sy
 80043ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80043f2:	f001 f8b9 	bl	8005568 <vPortExitCritical>

	return xAlreadyYielded;
 80043f6:	68bb      	ldr	r3, [r7, #8]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	20000be4 	.word	0x20000be4
 8004404:	20000bbc 	.word	0x20000bbc
 8004408:	20000b7c 	.word	0x20000b7c
 800440c:	20000bc4 	.word	0x20000bc4
 8004410:	200006ec 	.word	0x200006ec
 8004414:	200006e8 	.word	0x200006e8
 8004418:	20000bd0 	.word	0x20000bd0
 800441c:	20000bcc 	.word	0x20000bcc
 8004420:	e000ed04 	.word	0xe000ed04

08004424 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800442a:	4b05      	ldr	r3, [pc, #20]	; (8004440 <xTaskGetTickCount+0x1c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004430:	687b      	ldr	r3, [r7, #4]
}
 8004432:	4618      	mov	r0, r3
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	20000bc0 	.word	0x20000bc0

08004444 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800444a:	2300      	movs	r3, #0
 800444c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800444e:	4b4e      	ldr	r3, [pc, #312]	; (8004588 <xTaskIncrementTick+0x144>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	f040 8088 	bne.w	8004568 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004458:	4b4c      	ldr	r3, [pc, #304]	; (800458c <xTaskIncrementTick+0x148>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	3301      	adds	r3, #1
 800445e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004460:	4a4a      	ldr	r2, [pc, #296]	; (800458c <xTaskIncrementTick+0x148>)
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d11f      	bne.n	80044ac <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800446c:	4b48      	ldr	r3, [pc, #288]	; (8004590 <xTaskIncrementTick+0x14c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d009      	beq.n	800448a <xTaskIncrementTick+0x46>
 8004476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447a:	f383 8811 	msr	BASEPRI, r3
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	603b      	str	r3, [r7, #0]
 8004488:	e7fe      	b.n	8004488 <xTaskIncrementTick+0x44>
 800448a:	4b41      	ldr	r3, [pc, #260]	; (8004590 <xTaskIncrementTick+0x14c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	4b40      	ldr	r3, [pc, #256]	; (8004594 <xTaskIncrementTick+0x150>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a3e      	ldr	r2, [pc, #248]	; (8004590 <xTaskIncrementTick+0x14c>)
 8004496:	6013      	str	r3, [r2, #0]
 8004498:	4a3e      	ldr	r2, [pc, #248]	; (8004594 <xTaskIncrementTick+0x150>)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	4b3e      	ldr	r3, [pc, #248]	; (8004598 <xTaskIncrementTick+0x154>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	3301      	adds	r3, #1
 80044a4:	4a3c      	ldr	r2, [pc, #240]	; (8004598 <xTaskIncrementTick+0x154>)
 80044a6:	6013      	str	r3, [r2, #0]
 80044a8:	f000 fac4 	bl	8004a34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80044ac:	4b3b      	ldr	r3, [pc, #236]	; (800459c <xTaskIncrementTick+0x158>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d349      	bcc.n	800454a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044b6:	4b36      	ldr	r3, [pc, #216]	; (8004590 <xTaskIncrementTick+0x14c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d104      	bne.n	80044ca <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044c0:	4b36      	ldr	r3, [pc, #216]	; (800459c <xTaskIncrementTick+0x158>)
 80044c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044c6:	601a      	str	r2, [r3, #0]
					break;
 80044c8:	e03f      	b.n	800454a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044ca:	4b31      	ldr	r3, [pc, #196]	; (8004590 <xTaskIncrementTick+0x14c>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d203      	bcs.n	80044ea <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80044e2:	4a2e      	ldr	r2, [pc, #184]	; (800459c <xTaskIncrementTick+0x158>)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80044e8:	e02f      	b.n	800454a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	3304      	adds	r3, #4
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fe ffba 	bl	8003468 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d004      	beq.n	8004506 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	3318      	adds	r3, #24
 8004500:	4618      	mov	r0, r3
 8004502:	f7fe ffb1 	bl	8003468 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800450a:	4b25      	ldr	r3, [pc, #148]	; (80045a0 <xTaskIncrementTick+0x15c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	429a      	cmp	r2, r3
 8004510:	d903      	bls.n	800451a <xTaskIncrementTick+0xd6>
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004516:	4a22      	ldr	r2, [pc, #136]	; (80045a0 <xTaskIncrementTick+0x15c>)
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800451e:	4613      	mov	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4413      	add	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4a1f      	ldr	r2, [pc, #124]	; (80045a4 <xTaskIncrementTick+0x160>)
 8004528:	441a      	add	r2, r3
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	3304      	adds	r3, #4
 800452e:	4619      	mov	r1, r3
 8004530:	4610      	mov	r0, r2
 8004532:	f7fe ff3c 	bl	80033ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800453a:	4b1b      	ldr	r3, [pc, #108]	; (80045a8 <xTaskIncrementTick+0x164>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004540:	429a      	cmp	r2, r3
 8004542:	d3b8      	bcc.n	80044b6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004544:	2301      	movs	r3, #1
 8004546:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004548:	e7b5      	b.n	80044b6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800454a:	4b17      	ldr	r3, [pc, #92]	; (80045a8 <xTaskIncrementTick+0x164>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004550:	4914      	ldr	r1, [pc, #80]	; (80045a4 <xTaskIncrementTick+0x160>)
 8004552:	4613      	mov	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4413      	add	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	440b      	add	r3, r1
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d907      	bls.n	8004572 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8004562:	2301      	movs	r3, #1
 8004564:	617b      	str	r3, [r7, #20]
 8004566:	e004      	b.n	8004572 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004568:	4b10      	ldr	r3, [pc, #64]	; (80045ac <xTaskIncrementTick+0x168>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	3301      	adds	r3, #1
 800456e:	4a0f      	ldr	r2, [pc, #60]	; (80045ac <xTaskIncrementTick+0x168>)
 8004570:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004572:	4b0f      	ldr	r3, [pc, #60]	; (80045b0 <xTaskIncrementTick+0x16c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800457a:	2301      	movs	r3, #1
 800457c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800457e:	697b      	ldr	r3, [r7, #20]
}
 8004580:	4618      	mov	r0, r3
 8004582:	3718      	adds	r7, #24
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	20000be4 	.word	0x20000be4
 800458c:	20000bc0 	.word	0x20000bc0
 8004590:	20000b74 	.word	0x20000b74
 8004594:	20000b78 	.word	0x20000b78
 8004598:	20000bd4 	.word	0x20000bd4
 800459c:	20000bdc 	.word	0x20000bdc
 80045a0:	20000bc4 	.word	0x20000bc4
 80045a4:	200006ec 	.word	0x200006ec
 80045a8:	200006e8 	.word	0x200006e8
 80045ac:	20000bcc 	.word	0x20000bcc
 80045b0:	20000bd0 	.word	0x20000bd0

080045b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80045ba:	4b27      	ldr	r3, [pc, #156]	; (8004658 <vTaskSwitchContext+0xa4>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80045c2:	4b26      	ldr	r3, [pc, #152]	; (800465c <vTaskSwitchContext+0xa8>)
 80045c4:	2201      	movs	r2, #1
 80045c6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80045c8:	e040      	b.n	800464c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80045ca:	4b24      	ldr	r3, [pc, #144]	; (800465c <vTaskSwitchContext+0xa8>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045d0:	4b23      	ldr	r3, [pc, #140]	; (8004660 <vTaskSwitchContext+0xac>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	60fb      	str	r3, [r7, #12]
 80045d6:	e00f      	b.n	80045f8 <vTaskSwitchContext+0x44>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d109      	bne.n	80045f2 <vTaskSwitchContext+0x3e>
 80045de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	607b      	str	r3, [r7, #4]
 80045f0:	e7fe      	b.n	80045f0 <vTaskSwitchContext+0x3c>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	3b01      	subs	r3, #1
 80045f6:	60fb      	str	r3, [r7, #12]
 80045f8:	491a      	ldr	r1, [pc, #104]	; (8004664 <vTaskSwitchContext+0xb0>)
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	4613      	mov	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	440b      	add	r3, r1
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0e5      	beq.n	80045d8 <vTaskSwitchContext+0x24>
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	4613      	mov	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4413      	add	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4a13      	ldr	r2, [pc, #76]	; (8004664 <vTaskSwitchContext+0xb0>)
 8004618:	4413      	add	r3, r2
 800461a:	60bb      	str	r3, [r7, #8]
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	605a      	str	r2, [r3, #4]
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	3308      	adds	r3, #8
 800462e:	429a      	cmp	r2, r3
 8004630:	d104      	bne.n	800463c <vTaskSwitchContext+0x88>
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	605a      	str	r2, [r3, #4]
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	4a09      	ldr	r2, [pc, #36]	; (8004668 <vTaskSwitchContext+0xb4>)
 8004644:	6013      	str	r3, [r2, #0]
 8004646:	4a06      	ldr	r2, [pc, #24]	; (8004660 <vTaskSwitchContext+0xac>)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6013      	str	r3, [r2, #0]
}
 800464c:	bf00      	nop
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr
 8004658:	20000be4 	.word	0x20000be4
 800465c:	20000bd0 	.word	0x20000bd0
 8004660:	20000bc4 	.word	0x20000bc4
 8004664:	200006ec 	.word	0x200006ec
 8004668:	200006e8 	.word	0x200006e8

0800466c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d109      	bne.n	8004690 <vTaskPlaceOnEventList+0x24>
 800467c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004680:	f383 8811 	msr	BASEPRI, r3
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	60fb      	str	r3, [r7, #12]
 800468e:	e7fe      	b.n	800468e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004690:	4b07      	ldr	r3, [pc, #28]	; (80046b0 <vTaskPlaceOnEventList+0x44>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	3318      	adds	r3, #24
 8004696:	4619      	mov	r1, r3
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f7fe feac 	bl	80033f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800469e:	2101      	movs	r1, #1
 80046a0:	6838      	ldr	r0, [r7, #0]
 80046a2:	f000 fa71 	bl	8004b88 <prvAddCurrentTaskToDelayedList>
}
 80046a6:	bf00      	nop
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	200006e8 	.word	0x200006e8

080046b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d109      	bne.n	80046da <vTaskPlaceOnEventListRestricted+0x26>
 80046c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ca:	f383 8811 	msr	BASEPRI, r3
 80046ce:	f3bf 8f6f 	isb	sy
 80046d2:	f3bf 8f4f 	dsb	sy
 80046d6:	617b      	str	r3, [r7, #20]
 80046d8:	e7fe      	b.n	80046d8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046da:	4b0a      	ldr	r3, [pc, #40]	; (8004704 <vTaskPlaceOnEventListRestricted+0x50>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	3318      	adds	r3, #24
 80046e0:	4619      	mov	r1, r3
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f7fe fe63 	bl	80033ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d002      	beq.n	80046f4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80046ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046f2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80046f4:	6879      	ldr	r1, [r7, #4]
 80046f6:	68b8      	ldr	r0, [r7, #8]
 80046f8:	f000 fa46 	bl	8004b88 <prvAddCurrentTaskToDelayedList>
	}
 80046fc:	bf00      	nop
 80046fe:	3718      	adds	r7, #24
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	200006e8 	.word	0x200006e8

08004708 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d109      	bne.n	8004732 <xTaskRemoveFromEventList+0x2a>
 800471e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004722:	f383 8811 	msr	BASEPRI, r3
 8004726:	f3bf 8f6f 	isb	sy
 800472a:	f3bf 8f4f 	dsb	sy
 800472e:	60fb      	str	r3, [r7, #12]
 8004730:	e7fe      	b.n	8004730 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	3318      	adds	r3, #24
 8004736:	4618      	mov	r0, r3
 8004738:	f7fe fe96 	bl	8003468 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800473c:	4b1d      	ldr	r3, [pc, #116]	; (80047b4 <xTaskRemoveFromEventList+0xac>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d11d      	bne.n	8004780 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	3304      	adds	r3, #4
 8004748:	4618      	mov	r0, r3
 800474a:	f7fe fe8d 	bl	8003468 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004752:	4b19      	ldr	r3, [pc, #100]	; (80047b8 <xTaskRemoveFromEventList+0xb0>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	429a      	cmp	r2, r3
 8004758:	d903      	bls.n	8004762 <xTaskRemoveFromEventList+0x5a>
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475e:	4a16      	ldr	r2, [pc, #88]	; (80047b8 <xTaskRemoveFromEventList+0xb0>)
 8004760:	6013      	str	r3, [r2, #0]
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004766:	4613      	mov	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4413      	add	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4a13      	ldr	r2, [pc, #76]	; (80047bc <xTaskRemoveFromEventList+0xb4>)
 8004770:	441a      	add	r2, r3
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	3304      	adds	r3, #4
 8004776:	4619      	mov	r1, r3
 8004778:	4610      	mov	r0, r2
 800477a:	f7fe fe18 	bl	80033ae <vListInsertEnd>
 800477e:	e005      	b.n	800478c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	3318      	adds	r3, #24
 8004784:	4619      	mov	r1, r3
 8004786:	480e      	ldr	r0, [pc, #56]	; (80047c0 <xTaskRemoveFromEventList+0xb8>)
 8004788:	f7fe fe11 	bl	80033ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004790:	4b0c      	ldr	r3, [pc, #48]	; (80047c4 <xTaskRemoveFromEventList+0xbc>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004796:	429a      	cmp	r2, r3
 8004798:	d905      	bls.n	80047a6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800479a:	2301      	movs	r3, #1
 800479c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800479e:	4b0a      	ldr	r3, [pc, #40]	; (80047c8 <xTaskRemoveFromEventList+0xc0>)
 80047a0:	2201      	movs	r2, #1
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	e001      	b.n	80047aa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80047a6:	2300      	movs	r3, #0
 80047a8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80047aa:	697b      	ldr	r3, [r7, #20]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	20000be4 	.word	0x20000be4
 80047b8:	20000bc4 	.word	0x20000bc4
 80047bc:	200006ec 	.word	0x200006ec
 80047c0:	20000b7c 	.word	0x20000b7c
 80047c4:	200006e8 	.word	0x200006e8
 80047c8:	20000bd0 	.word	0x20000bd0

080047cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80047d4:	4b06      	ldr	r3, [pc, #24]	; (80047f0 <vTaskInternalSetTimeOutState+0x24>)
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80047dc:	4b05      	ldr	r3, [pc, #20]	; (80047f4 <vTaskInternalSetTimeOutState+0x28>)
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	605a      	str	r2, [r3, #4]
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	20000bd4 	.word	0x20000bd4
 80047f4:	20000bc0 	.word	0x20000bc0

080047f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b088      	sub	sp, #32
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d109      	bne.n	800481c <xTaskCheckForTimeOut+0x24>
 8004808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480c:	f383 8811 	msr	BASEPRI, r3
 8004810:	f3bf 8f6f 	isb	sy
 8004814:	f3bf 8f4f 	dsb	sy
 8004818:	613b      	str	r3, [r7, #16]
 800481a:	e7fe      	b.n	800481a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d109      	bne.n	8004836 <xTaskCheckForTimeOut+0x3e>
 8004822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004826:	f383 8811 	msr	BASEPRI, r3
 800482a:	f3bf 8f6f 	isb	sy
 800482e:	f3bf 8f4f 	dsb	sy
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	e7fe      	b.n	8004834 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004836:	f000 fe69 	bl	800550c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800483a:	4b1d      	ldr	r3, [pc, #116]	; (80048b0 <xTaskCheckForTimeOut+0xb8>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004852:	d102      	bne.n	800485a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004854:	2300      	movs	r3, #0
 8004856:	61fb      	str	r3, [r7, #28]
 8004858:	e023      	b.n	80048a2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	4b15      	ldr	r3, [pc, #84]	; (80048b4 <xTaskCheckForTimeOut+0xbc>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	429a      	cmp	r2, r3
 8004864:	d007      	beq.n	8004876 <xTaskCheckForTimeOut+0x7e>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	429a      	cmp	r2, r3
 800486e:	d302      	bcc.n	8004876 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004870:	2301      	movs	r3, #1
 8004872:	61fb      	str	r3, [r7, #28]
 8004874:	e015      	b.n	80048a2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	429a      	cmp	r2, r3
 800487e:	d20b      	bcs.n	8004898 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	1ad2      	subs	r2, r2, r3
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f7ff ff9d 	bl	80047cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004892:	2300      	movs	r3, #0
 8004894:	61fb      	str	r3, [r7, #28]
 8004896:	e004      	b.n	80048a2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	2200      	movs	r2, #0
 800489c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800489e:	2301      	movs	r3, #1
 80048a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80048a2:	f000 fe61 	bl	8005568 <vPortExitCritical>

	return xReturn;
 80048a6:	69fb      	ldr	r3, [r7, #28]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3720      	adds	r7, #32
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	20000bc0 	.word	0x20000bc0
 80048b4:	20000bd4 	.word	0x20000bd4

080048b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80048b8:	b480      	push	{r7}
 80048ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80048bc:	4b03      	ldr	r3, [pc, #12]	; (80048cc <vTaskMissedYield+0x14>)
 80048be:	2201      	movs	r2, #1
 80048c0:	601a      	str	r2, [r3, #0]
}
 80048c2:	bf00      	nop
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr
 80048cc:	20000bd0 	.word	0x20000bd0

080048d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80048d8:	f000 f852 	bl	8004980 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80048dc:	4b06      	ldr	r3, [pc, #24]	; (80048f8 <prvIdleTask+0x28>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d9f9      	bls.n	80048d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80048e4:	4b05      	ldr	r3, [pc, #20]	; (80048fc <prvIdleTask+0x2c>)
 80048e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80048f4:	e7f0      	b.n	80048d8 <prvIdleTask+0x8>
 80048f6:	bf00      	nop
 80048f8:	200006ec 	.word	0x200006ec
 80048fc:	e000ed04 	.word	0xe000ed04

08004900 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004906:	2300      	movs	r3, #0
 8004908:	607b      	str	r3, [r7, #4]
 800490a:	e00c      	b.n	8004926 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	4613      	mov	r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4413      	add	r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	4a12      	ldr	r2, [pc, #72]	; (8004960 <prvInitialiseTaskLists+0x60>)
 8004918:	4413      	add	r3, r2
 800491a:	4618      	mov	r0, r3
 800491c:	f7fe fd1a 	bl	8003354 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	3301      	adds	r3, #1
 8004924:	607b      	str	r3, [r7, #4]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b37      	cmp	r3, #55	; 0x37
 800492a:	d9ef      	bls.n	800490c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800492c:	480d      	ldr	r0, [pc, #52]	; (8004964 <prvInitialiseTaskLists+0x64>)
 800492e:	f7fe fd11 	bl	8003354 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004932:	480d      	ldr	r0, [pc, #52]	; (8004968 <prvInitialiseTaskLists+0x68>)
 8004934:	f7fe fd0e 	bl	8003354 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004938:	480c      	ldr	r0, [pc, #48]	; (800496c <prvInitialiseTaskLists+0x6c>)
 800493a:	f7fe fd0b 	bl	8003354 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800493e:	480c      	ldr	r0, [pc, #48]	; (8004970 <prvInitialiseTaskLists+0x70>)
 8004940:	f7fe fd08 	bl	8003354 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004944:	480b      	ldr	r0, [pc, #44]	; (8004974 <prvInitialiseTaskLists+0x74>)
 8004946:	f7fe fd05 	bl	8003354 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800494a:	4b0b      	ldr	r3, [pc, #44]	; (8004978 <prvInitialiseTaskLists+0x78>)
 800494c:	4a05      	ldr	r2, [pc, #20]	; (8004964 <prvInitialiseTaskLists+0x64>)
 800494e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004950:	4b0a      	ldr	r3, [pc, #40]	; (800497c <prvInitialiseTaskLists+0x7c>)
 8004952:	4a05      	ldr	r2, [pc, #20]	; (8004968 <prvInitialiseTaskLists+0x68>)
 8004954:	601a      	str	r2, [r3, #0]
}
 8004956:	bf00      	nop
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	200006ec 	.word	0x200006ec
 8004964:	20000b4c 	.word	0x20000b4c
 8004968:	20000b60 	.word	0x20000b60
 800496c:	20000b7c 	.word	0x20000b7c
 8004970:	20000b90 	.word	0x20000b90
 8004974:	20000ba8 	.word	0x20000ba8
 8004978:	20000b74 	.word	0x20000b74
 800497c:	20000b78 	.word	0x20000b78

08004980 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004986:	e019      	b.n	80049bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004988:	f000 fdc0 	bl	800550c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800498c:	4b0f      	ldr	r3, [pc, #60]	; (80049cc <prvCheckTasksWaitingTermination+0x4c>)
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	3304      	adds	r3, #4
 8004998:	4618      	mov	r0, r3
 800499a:	f7fe fd65 	bl	8003468 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800499e:	4b0c      	ldr	r3, [pc, #48]	; (80049d0 <prvCheckTasksWaitingTermination+0x50>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	3b01      	subs	r3, #1
 80049a4:	4a0a      	ldr	r2, [pc, #40]	; (80049d0 <prvCheckTasksWaitingTermination+0x50>)
 80049a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80049a8:	4b0a      	ldr	r3, [pc, #40]	; (80049d4 <prvCheckTasksWaitingTermination+0x54>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	3b01      	subs	r3, #1
 80049ae:	4a09      	ldr	r2, [pc, #36]	; (80049d4 <prvCheckTasksWaitingTermination+0x54>)
 80049b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80049b2:	f000 fdd9 	bl	8005568 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f80e 	bl	80049d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049bc:	4b05      	ldr	r3, [pc, #20]	; (80049d4 <prvCheckTasksWaitingTermination+0x54>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1e1      	bne.n	8004988 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80049c4:	bf00      	nop
 80049c6:	3708      	adds	r7, #8
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	20000b90 	.word	0x20000b90
 80049d0:	20000bbc 	.word	0x20000bbc
 80049d4:	20000ba4 	.word	0x20000ba4

080049d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d108      	bne.n	80049fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 ff68 	bl	80058c4 <vPortFree>
				vPortFree( pxTCB );
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 ff65 	bl	80058c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80049fa:	e017      	b.n	8004a2c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d103      	bne.n	8004a0e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 ff5c 	bl	80058c4 <vPortFree>
	}
 8004a0c:	e00e      	b.n	8004a2c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d009      	beq.n	8004a2c <prvDeleteTCB+0x54>
 8004a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1c:	f383 8811 	msr	BASEPRI, r3
 8004a20:	f3bf 8f6f 	isb	sy
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	60fb      	str	r3, [r7, #12]
 8004a2a:	e7fe      	b.n	8004a2a <prvDeleteTCB+0x52>
	}
 8004a2c:	bf00      	nop
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a3a:	4b0c      	ldr	r3, [pc, #48]	; (8004a6c <prvResetNextTaskUnblockTime+0x38>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d104      	bne.n	8004a4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a44:	4b0a      	ldr	r3, [pc, #40]	; (8004a70 <prvResetNextTaskUnblockTime+0x3c>)
 8004a46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a4c:	e008      	b.n	8004a60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a4e:	4b07      	ldr	r3, [pc, #28]	; (8004a6c <prvResetNextTaskUnblockTime+0x38>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	4a04      	ldr	r2, [pc, #16]	; (8004a70 <prvResetNextTaskUnblockTime+0x3c>)
 8004a5e:	6013      	str	r3, [r2, #0]
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	20000b74 	.word	0x20000b74
 8004a70:	20000bdc 	.word	0x20000bdc

08004a74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004a7a:	4b0b      	ldr	r3, [pc, #44]	; (8004aa8 <xTaskGetSchedulerState+0x34>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d102      	bne.n	8004a88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004a82:	2301      	movs	r3, #1
 8004a84:	607b      	str	r3, [r7, #4]
 8004a86:	e008      	b.n	8004a9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a88:	4b08      	ldr	r3, [pc, #32]	; (8004aac <xTaskGetSchedulerState+0x38>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d102      	bne.n	8004a96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004a90:	2302      	movs	r3, #2
 8004a92:	607b      	str	r3, [r7, #4]
 8004a94:	e001      	b.n	8004a9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004a96:	2300      	movs	r3, #0
 8004a98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004a9a:	687b      	ldr	r3, [r7, #4]
	}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	20000bc8 	.word	0x20000bc8
 8004aac:	20000be4 	.word	0x20000be4

08004ab0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004abc:	2300      	movs	r3, #0
 8004abe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d054      	beq.n	8004b70 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004ac6:	4b2d      	ldr	r3, [pc, #180]	; (8004b7c <xTaskPriorityDisinherit+0xcc>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d009      	beq.n	8004ae4 <xTaskPriorityDisinherit+0x34>
 8004ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad4:	f383 8811 	msr	BASEPRI, r3
 8004ad8:	f3bf 8f6f 	isb	sy
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	60fb      	str	r3, [r7, #12]
 8004ae2:	e7fe      	b.n	8004ae2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d109      	bne.n	8004b00 <xTaskPriorityDisinherit+0x50>
 8004aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	60bb      	str	r3, [r7, #8]
 8004afe:	e7fe      	b.n	8004afe <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b04:	1e5a      	subs	r2, r3, #1
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d02c      	beq.n	8004b70 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d128      	bne.n	8004b70 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	3304      	adds	r3, #4
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7fe fca0 	bl	8003468 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b40:	4b0f      	ldr	r3, [pc, #60]	; (8004b80 <xTaskPriorityDisinherit+0xd0>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d903      	bls.n	8004b50 <xTaskPriorityDisinherit+0xa0>
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4c:	4a0c      	ldr	r2, [pc, #48]	; (8004b80 <xTaskPriorityDisinherit+0xd0>)
 8004b4e:	6013      	str	r3, [r2, #0]
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b54:	4613      	mov	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4413      	add	r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4a09      	ldr	r2, [pc, #36]	; (8004b84 <xTaskPriorityDisinherit+0xd4>)
 8004b5e:	441a      	add	r2, r3
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	3304      	adds	r3, #4
 8004b64:	4619      	mov	r1, r3
 8004b66:	4610      	mov	r0, r2
 8004b68:	f7fe fc21 	bl	80033ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004b70:	697b      	ldr	r3, [r7, #20]
	}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3718      	adds	r7, #24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	200006e8 	.word	0x200006e8
 8004b80:	20000bc4 	.word	0x20000bc4
 8004b84:	200006ec 	.word	0x200006ec

08004b88 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004b92:	4b21      	ldr	r3, [pc, #132]	; (8004c18 <prvAddCurrentTaskToDelayedList+0x90>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b98:	4b20      	ldr	r3, [pc, #128]	; (8004c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7fe fc62 	bl	8003468 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004baa:	d10a      	bne.n	8004bc2 <prvAddCurrentTaskToDelayedList+0x3a>
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d007      	beq.n	8004bc2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bb2:	4b1a      	ldr	r3, [pc, #104]	; (8004c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	3304      	adds	r3, #4
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4819      	ldr	r0, [pc, #100]	; (8004c20 <prvAddCurrentTaskToDelayedList+0x98>)
 8004bbc:	f7fe fbf7 	bl	80033ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004bc0:	e026      	b.n	8004c10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004bca:	4b14      	ldr	r3, [pc, #80]	; (8004c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d209      	bcs.n	8004bee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bda:	4b12      	ldr	r3, [pc, #72]	; (8004c24 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	4b0f      	ldr	r3, [pc, #60]	; (8004c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	3304      	adds	r3, #4
 8004be4:	4619      	mov	r1, r3
 8004be6:	4610      	mov	r0, r2
 8004be8:	f7fe fc05 	bl	80033f6 <vListInsert>
}
 8004bec:	e010      	b.n	8004c10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bee:	4b0e      	ldr	r3, [pc, #56]	; (8004c28 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	4b0a      	ldr	r3, [pc, #40]	; (8004c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	4610      	mov	r0, r2
 8004bfc:	f7fe fbfb 	bl	80033f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004c00:	4b0a      	ldr	r3, [pc, #40]	; (8004c2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d202      	bcs.n	8004c10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004c0a:	4a08      	ldr	r2, [pc, #32]	; (8004c2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	6013      	str	r3, [r2, #0]
}
 8004c10:	bf00      	nop
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	20000bc0 	.word	0x20000bc0
 8004c1c:	200006e8 	.word	0x200006e8
 8004c20:	20000ba8 	.word	0x20000ba8
 8004c24:	20000b78 	.word	0x20000b78
 8004c28:	20000b74 	.word	0x20000b74
 8004c2c:	20000bdc 	.word	0x20000bdc

08004c30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b08a      	sub	sp, #40	; 0x28
 8004c34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004c36:	2300      	movs	r3, #0
 8004c38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004c3a:	f000 faff 	bl	800523c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004c3e:	4b1c      	ldr	r3, [pc, #112]	; (8004cb0 <xTimerCreateTimerTask+0x80>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d021      	beq.n	8004c8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004c46:	2300      	movs	r3, #0
 8004c48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004c4e:	1d3a      	adds	r2, r7, #4
 8004c50:	f107 0108 	add.w	r1, r7, #8
 8004c54:	f107 030c 	add.w	r3, r7, #12
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7fe fb61 	bl	8003320 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004c5e:	6879      	ldr	r1, [r7, #4]
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	9202      	str	r2, [sp, #8]
 8004c66:	9301      	str	r3, [sp, #4]
 8004c68:	2302      	movs	r3, #2
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	460a      	mov	r2, r1
 8004c70:	4910      	ldr	r1, [pc, #64]	; (8004cb4 <xTimerCreateTimerTask+0x84>)
 8004c72:	4811      	ldr	r0, [pc, #68]	; (8004cb8 <xTimerCreateTimerTask+0x88>)
 8004c74:	f7ff f8f6 	bl	8003e64 <xTaskCreateStatic>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	4b10      	ldr	r3, [pc, #64]	; (8004cbc <xTimerCreateTimerTask+0x8c>)
 8004c7c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004c7e:	4b0f      	ldr	r3, [pc, #60]	; (8004cbc <xTimerCreateTimerTask+0x8c>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004c86:	2301      	movs	r3, #1
 8004c88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d109      	bne.n	8004ca4 <xTimerCreateTimerTask+0x74>
 8004c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c94:	f383 8811 	msr	BASEPRI, r3
 8004c98:	f3bf 8f6f 	isb	sy
 8004c9c:	f3bf 8f4f 	dsb	sy
 8004ca0:	613b      	str	r3, [r7, #16]
 8004ca2:	e7fe      	b.n	8004ca2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004ca4:	697b      	ldr	r3, [r7, #20]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3718      	adds	r7, #24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	20000c18 	.word	0x20000c18
 8004cb4:	08005bb0 	.word	0x08005bb0
 8004cb8:	08004df1 	.word	0x08004df1
 8004cbc:	20000c1c 	.word	0x20000c1c

08004cc0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b08a      	sub	sp, #40	; 0x28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
 8004ccc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d109      	bne.n	8004cec <xTimerGenericCommand+0x2c>
 8004cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cdc:	f383 8811 	msr	BASEPRI, r3
 8004ce0:	f3bf 8f6f 	isb	sy
 8004ce4:	f3bf 8f4f 	dsb	sy
 8004ce8:	623b      	str	r3, [r7, #32]
 8004cea:	e7fe      	b.n	8004cea <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004cec:	4b19      	ldr	r3, [pc, #100]	; (8004d54 <xTimerGenericCommand+0x94>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d02a      	beq.n	8004d4a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	2b05      	cmp	r3, #5
 8004d04:	dc18      	bgt.n	8004d38 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004d06:	f7ff feb5 	bl	8004a74 <xTaskGetSchedulerState>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d109      	bne.n	8004d24 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004d10:	4b10      	ldr	r3, [pc, #64]	; (8004d54 <xTimerGenericCommand+0x94>)
 8004d12:	6818      	ldr	r0, [r3, #0]
 8004d14:	f107 0110 	add.w	r1, r7, #16
 8004d18:	2300      	movs	r3, #0
 8004d1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d1c:	f7fe fccc 	bl	80036b8 <xQueueGenericSend>
 8004d20:	6278      	str	r0, [r7, #36]	; 0x24
 8004d22:	e012      	b.n	8004d4a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004d24:	4b0b      	ldr	r3, [pc, #44]	; (8004d54 <xTimerGenericCommand+0x94>)
 8004d26:	6818      	ldr	r0, [r3, #0]
 8004d28:	f107 0110 	add.w	r1, r7, #16
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f7fe fcc2 	bl	80036b8 <xQueueGenericSend>
 8004d34:	6278      	str	r0, [r7, #36]	; 0x24
 8004d36:	e008      	b.n	8004d4a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004d38:	4b06      	ldr	r3, [pc, #24]	; (8004d54 <xTimerGenericCommand+0x94>)
 8004d3a:	6818      	ldr	r0, [r3, #0]
 8004d3c:	f107 0110 	add.w	r1, r7, #16
 8004d40:	2300      	movs	r3, #0
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	f7fe fdb2 	bl	80038ac <xQueueGenericSendFromISR>
 8004d48:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3728      	adds	r7, #40	; 0x28
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	20000c18 	.word	0x20000c18

08004d58 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b088      	sub	sp, #32
 8004d5c:	af02      	add	r7, sp, #8
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d62:	4b22      	ldr	r3, [pc, #136]	; (8004dec <prvProcessExpiredTimer+0x94>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	3304      	adds	r3, #4
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7fe fb79 	bl	8003468 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d7c:	f003 0304 	and.w	r3, r3, #4
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d021      	beq.n	8004dc8 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	699a      	ldr	r2, [r3, #24]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	18d1      	adds	r1, r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	683a      	ldr	r2, [r7, #0]
 8004d90:	6978      	ldr	r0, [r7, #20]
 8004d92:	f000 f8d1 	bl	8004f38 <prvInsertTimerInActiveList>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d01e      	beq.n	8004dda <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	2300      	movs	r3, #0
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	2100      	movs	r1, #0
 8004da6:	6978      	ldr	r0, [r7, #20]
 8004da8:	f7ff ff8a 	bl	8004cc0 <xTimerGenericCommand>
 8004dac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d112      	bne.n	8004dda <prvProcessExpiredTimer+0x82>
 8004db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db8:	f383 8811 	msr	BASEPRI, r3
 8004dbc:	f3bf 8f6f 	isb	sy
 8004dc0:	f3bf 8f4f 	dsb	sy
 8004dc4:	60fb      	str	r3, [r7, #12]
 8004dc6:	e7fe      	b.n	8004dc6 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dce:	f023 0301 	bic.w	r3, r3, #1
 8004dd2:	b2da      	uxtb	r2, r3
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	6978      	ldr	r0, [r7, #20]
 8004de0:	4798      	blx	r3
}
 8004de2:	bf00      	nop
 8004de4:	3718      	adds	r7, #24
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	20000c10 	.word	0x20000c10

08004df0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004df8:	f107 0308 	add.w	r3, r7, #8
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 f857 	bl	8004eb0 <prvGetNextExpireTime>
 8004e02:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	4619      	mov	r1, r3
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 f803 	bl	8004e14 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004e0e:	f000 f8d5 	bl	8004fbc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e12:	e7f1      	b.n	8004df8 <prvTimerTask+0x8>

08004e14 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004e1e:	f7ff fa57 	bl	80042d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e22:	f107 0308 	add.w	r3, r7, #8
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 f866 	bl	8004ef8 <prvSampleTimeNow>
 8004e2c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d130      	bne.n	8004e96 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10a      	bne.n	8004e50 <prvProcessTimerOrBlockTask+0x3c>
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d806      	bhi.n	8004e50 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004e42:	f7ff fa53 	bl	80042ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004e46:	68f9      	ldr	r1, [r7, #12]
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f7ff ff85 	bl	8004d58 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004e4e:	e024      	b.n	8004e9a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d008      	beq.n	8004e68 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004e56:	4b13      	ldr	r3, [pc, #76]	; (8004ea4 <prvProcessTimerOrBlockTask+0x90>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <prvProcessTimerOrBlockTask+0x50>
 8004e60:	2301      	movs	r3, #1
 8004e62:	e000      	b.n	8004e66 <prvProcessTimerOrBlockTask+0x52>
 8004e64:	2300      	movs	r3, #0
 8004e66:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004e68:	4b0f      	ldr	r3, [pc, #60]	; (8004ea8 <prvProcessTimerOrBlockTask+0x94>)
 8004e6a:	6818      	ldr	r0, [r3, #0]
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	4619      	mov	r1, r3
 8004e76:	f7fe ffc1 	bl	8003dfc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004e7a:	f7ff fa37 	bl	80042ec <xTaskResumeAll>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d10a      	bne.n	8004e9a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004e84:	4b09      	ldr	r3, [pc, #36]	; (8004eac <prvProcessTimerOrBlockTask+0x98>)
 8004e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	f3bf 8f6f 	isb	sy
}
 8004e94:	e001      	b.n	8004e9a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004e96:	f7ff fa29 	bl	80042ec <xTaskResumeAll>
}
 8004e9a:	bf00      	nop
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	20000c14 	.word	0x20000c14
 8004ea8:	20000c18 	.word	0x20000c18
 8004eac:	e000ed04 	.word	0xe000ed04

08004eb0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004eb8:	4b0e      	ldr	r3, [pc, #56]	; (8004ef4 <prvGetNextExpireTime+0x44>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <prvGetNextExpireTime+0x16>
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	e000      	b.n	8004ec8 <prvGetNextExpireTime+0x18>
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d105      	bne.n	8004ee0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ed4:	4b07      	ldr	r3, [pc, #28]	; (8004ef4 <prvGetNextExpireTime+0x44>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	60fb      	str	r3, [r7, #12]
 8004ede:	e001      	b.n	8004ee4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3714      	adds	r7, #20
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	20000c10 	.word	0x20000c10

08004ef8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004f00:	f7ff fa90 	bl	8004424 <xTaskGetTickCount>
 8004f04:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004f06:	4b0b      	ldr	r3, [pc, #44]	; (8004f34 <prvSampleTimeNow+0x3c>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d205      	bcs.n	8004f1c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004f10:	f000 f930 	bl	8005174 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	e002      	b.n	8004f22 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004f22:	4a04      	ldr	r2, [pc, #16]	; (8004f34 <prvSampleTimeNow+0x3c>)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004f28:	68fb      	ldr	r3, [r7, #12]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	20000c20 	.word	0x20000c20

08004f38 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
 8004f44:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004f46:	2300      	movs	r3, #0
 8004f48:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d812      	bhi.n	8004f84 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	1ad2      	subs	r2, r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d302      	bcc.n	8004f72 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	617b      	str	r3, [r7, #20]
 8004f70:	e01b      	b.n	8004faa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004f72:	4b10      	ldr	r3, [pc, #64]	; (8004fb4 <prvInsertTimerInActiveList+0x7c>)
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	3304      	adds	r3, #4
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	f7fe fa3a 	bl	80033f6 <vListInsert>
 8004f82:	e012      	b.n	8004faa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d206      	bcs.n	8004f9a <prvInsertTimerInActiveList+0x62>
 8004f8c:	68ba      	ldr	r2, [r7, #8]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d302      	bcc.n	8004f9a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004f94:	2301      	movs	r3, #1
 8004f96:	617b      	str	r3, [r7, #20]
 8004f98:	e007      	b.n	8004faa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f9a:	4b07      	ldr	r3, [pc, #28]	; (8004fb8 <prvInsertTimerInActiveList+0x80>)
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	3304      	adds	r3, #4
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	4610      	mov	r0, r2
 8004fa6:	f7fe fa26 	bl	80033f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004faa:	697b      	ldr	r3, [r7, #20]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3718      	adds	r7, #24
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	20000c14 	.word	0x20000c14
 8004fb8:	20000c10 	.word	0x20000c10

08004fbc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b08e      	sub	sp, #56	; 0x38
 8004fc0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004fc2:	e0c6      	b.n	8005152 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	da17      	bge.n	8004ffa <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004fca:	1d3b      	adds	r3, r7, #4
 8004fcc:	3304      	adds	r3, #4
 8004fce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d109      	bne.n	8004fea <prvProcessReceivedCommands+0x2e>
 8004fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fda:	f383 8811 	msr	BASEPRI, r3
 8004fde:	f3bf 8f6f 	isb	sy
 8004fe2:	f3bf 8f4f 	dsb	sy
 8004fe6:	61fb      	str	r3, [r7, #28]
 8004fe8:	e7fe      	b.n	8004fe8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ff0:	6850      	ldr	r0, [r2, #4]
 8004ff2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ff4:	6892      	ldr	r2, [r2, #8]
 8004ff6:	4611      	mov	r1, r2
 8004ff8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f2c0 80a7 	blt.w	8005150 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d004      	beq.n	8005018 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800500e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005010:	3304      	adds	r3, #4
 8005012:	4618      	mov	r0, r3
 8005014:	f7fe fa28 	bl	8003468 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005018:	463b      	mov	r3, r7
 800501a:	4618      	mov	r0, r3
 800501c:	f7ff ff6c 	bl	8004ef8 <prvSampleTimeNow>
 8005020:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b09      	cmp	r3, #9
 8005026:	f200 8094 	bhi.w	8005152 <prvProcessReceivedCommands+0x196>
 800502a:	a201      	add	r2, pc, #4	; (adr r2, 8005030 <prvProcessReceivedCommands+0x74>)
 800502c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005030:	08005059 	.word	0x08005059
 8005034:	08005059 	.word	0x08005059
 8005038:	08005059 	.word	0x08005059
 800503c:	080050cb 	.word	0x080050cb
 8005040:	080050df 	.word	0x080050df
 8005044:	08005127 	.word	0x08005127
 8005048:	08005059 	.word	0x08005059
 800504c:	08005059 	.word	0x08005059
 8005050:	080050cb 	.word	0x080050cb
 8005054:	080050df 	.word	0x080050df
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800505e:	f043 0301 	orr.w	r3, r3, #1
 8005062:	b2da      	uxtb	r2, r3
 8005064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005066:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	18d1      	adds	r1, r2, r3
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005076:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005078:	f7ff ff5e 	bl	8004f38 <prvInsertTimerInActiveList>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d067      	beq.n	8005152 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005088:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800508a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	2b00      	cmp	r3, #0
 8005096:	d05c      	beq.n	8005152 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	441a      	add	r2, r3
 80050a0:	2300      	movs	r3, #0
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	2300      	movs	r3, #0
 80050a6:	2100      	movs	r1, #0
 80050a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050aa:	f7ff fe09 	bl	8004cc0 <xTimerGenericCommand>
 80050ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80050b0:	6a3b      	ldr	r3, [r7, #32]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d14d      	bne.n	8005152 <prvProcessReceivedCommands+0x196>
 80050b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ba:	f383 8811 	msr	BASEPRI, r3
 80050be:	f3bf 8f6f 	isb	sy
 80050c2:	f3bf 8f4f 	dsb	sy
 80050c6:	61bb      	str	r3, [r7, #24]
 80050c8:	e7fe      	b.n	80050c8 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80050ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050d0:	f023 0301 	bic.w	r3, r3, #1
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80050dc:	e039      	b.n	8005152 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80050de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050e4:	f043 0301 	orr.w	r3, r3, #1
 80050e8:	b2da      	uxtb	r2, r3
 80050ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80050f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d109      	bne.n	8005112 <prvProcessReceivedCommands+0x156>
 80050fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005102:	f383 8811 	msr	BASEPRI, r3
 8005106:	f3bf 8f6f 	isb	sy
 800510a:	f3bf 8f4f 	dsb	sy
 800510e:	617b      	str	r3, [r7, #20]
 8005110:	e7fe      	b.n	8005110 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005114:	699a      	ldr	r2, [r3, #24]
 8005116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005118:	18d1      	adds	r1, r2, r3
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800511e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005120:	f7ff ff0a 	bl	8004f38 <prvInsertTimerInActiveList>
					break;
 8005124:	e015      	b.n	8005152 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005128:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	2b00      	cmp	r3, #0
 8005132:	d103      	bne.n	800513c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8005134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005136:	f000 fbc5 	bl	80058c4 <vPortFree>
 800513a:	e00a      	b.n	8005152 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800513c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005142:	f023 0301 	bic.w	r3, r3, #1
 8005146:	b2da      	uxtb	r2, r3
 8005148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800514e:	e000      	b.n	8005152 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005150:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005152:	4b07      	ldr	r3, [pc, #28]	; (8005170 <prvProcessReceivedCommands+0x1b4>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	1d39      	adds	r1, r7, #4
 8005158:	2200      	movs	r2, #0
 800515a:	4618      	mov	r0, r3
 800515c:	f7fe fc3a 	bl	80039d4 <xQueueReceive>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	f47f af2e 	bne.w	8004fc4 <prvProcessReceivedCommands+0x8>
	}
}
 8005168:	bf00      	nop
 800516a:	3730      	adds	r7, #48	; 0x30
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	20000c18 	.word	0x20000c18

08005174 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b088      	sub	sp, #32
 8005178:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800517a:	e047      	b.n	800520c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800517c:	4b2d      	ldr	r3, [pc, #180]	; (8005234 <prvSwitchTimerLists+0xc0>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005186:	4b2b      	ldr	r3, [pc, #172]	; (8005234 <prvSwitchTimerLists+0xc0>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	3304      	adds	r3, #4
 8005194:	4618      	mov	r0, r3
 8005196:	f7fe f967 	bl	8003468 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051a8:	f003 0304 	and.w	r3, r3, #4
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d02d      	beq.n	800520c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	4413      	add	r3, r2
 80051b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80051ba:	68ba      	ldr	r2, [r7, #8]
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d90e      	bls.n	80051e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80051ce:	4b19      	ldr	r3, [pc, #100]	; (8005234 <prvSwitchTimerLists+0xc0>)
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	3304      	adds	r3, #4
 80051d6:	4619      	mov	r1, r3
 80051d8:	4610      	mov	r0, r2
 80051da:	f7fe f90c 	bl	80033f6 <vListInsert>
 80051de:	e015      	b.n	800520c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80051e0:	2300      	movs	r3, #0
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	2300      	movs	r3, #0
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	2100      	movs	r1, #0
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f7ff fd68 	bl	8004cc0 <xTimerGenericCommand>
 80051f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d109      	bne.n	800520c <prvSwitchTimerLists+0x98>
 80051f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fc:	f383 8811 	msr	BASEPRI, r3
 8005200:	f3bf 8f6f 	isb	sy
 8005204:	f3bf 8f4f 	dsb	sy
 8005208:	603b      	str	r3, [r7, #0]
 800520a:	e7fe      	b.n	800520a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800520c:	4b09      	ldr	r3, [pc, #36]	; (8005234 <prvSwitchTimerLists+0xc0>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1b2      	bne.n	800517c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005216:	4b07      	ldr	r3, [pc, #28]	; (8005234 <prvSwitchTimerLists+0xc0>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800521c:	4b06      	ldr	r3, [pc, #24]	; (8005238 <prvSwitchTimerLists+0xc4>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a04      	ldr	r2, [pc, #16]	; (8005234 <prvSwitchTimerLists+0xc0>)
 8005222:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005224:	4a04      	ldr	r2, [pc, #16]	; (8005238 <prvSwitchTimerLists+0xc4>)
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	6013      	str	r3, [r2, #0]
}
 800522a:	bf00      	nop
 800522c:	3718      	adds	r7, #24
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	20000c10 	.word	0x20000c10
 8005238:	20000c14 	.word	0x20000c14

0800523c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005242:	f000 f963 	bl	800550c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005246:	4b15      	ldr	r3, [pc, #84]	; (800529c <prvCheckForValidListAndQueue+0x60>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d120      	bne.n	8005290 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800524e:	4814      	ldr	r0, [pc, #80]	; (80052a0 <prvCheckForValidListAndQueue+0x64>)
 8005250:	f7fe f880 	bl	8003354 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005254:	4813      	ldr	r0, [pc, #76]	; (80052a4 <prvCheckForValidListAndQueue+0x68>)
 8005256:	f7fe f87d 	bl	8003354 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800525a:	4b13      	ldr	r3, [pc, #76]	; (80052a8 <prvCheckForValidListAndQueue+0x6c>)
 800525c:	4a10      	ldr	r2, [pc, #64]	; (80052a0 <prvCheckForValidListAndQueue+0x64>)
 800525e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005260:	4b12      	ldr	r3, [pc, #72]	; (80052ac <prvCheckForValidListAndQueue+0x70>)
 8005262:	4a10      	ldr	r2, [pc, #64]	; (80052a4 <prvCheckForValidListAndQueue+0x68>)
 8005264:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005266:	2300      	movs	r3, #0
 8005268:	9300      	str	r3, [sp, #0]
 800526a:	4b11      	ldr	r3, [pc, #68]	; (80052b0 <prvCheckForValidListAndQueue+0x74>)
 800526c:	4a11      	ldr	r2, [pc, #68]	; (80052b4 <prvCheckForValidListAndQueue+0x78>)
 800526e:	2110      	movs	r1, #16
 8005270:	200a      	movs	r0, #10
 8005272:	f7fe f98b 	bl	800358c <xQueueGenericCreateStatic>
 8005276:	4602      	mov	r2, r0
 8005278:	4b08      	ldr	r3, [pc, #32]	; (800529c <prvCheckForValidListAndQueue+0x60>)
 800527a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800527c:	4b07      	ldr	r3, [pc, #28]	; (800529c <prvCheckForValidListAndQueue+0x60>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d005      	beq.n	8005290 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005284:	4b05      	ldr	r3, [pc, #20]	; (800529c <prvCheckForValidListAndQueue+0x60>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	490b      	ldr	r1, [pc, #44]	; (80052b8 <prvCheckForValidListAndQueue+0x7c>)
 800528a:	4618      	mov	r0, r3
 800528c:	f7fe fd8e 	bl	8003dac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005290:	f000 f96a 	bl	8005568 <vPortExitCritical>
}
 8005294:	bf00      	nop
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	20000c18 	.word	0x20000c18
 80052a0:	20000be8 	.word	0x20000be8
 80052a4:	20000bfc 	.word	0x20000bfc
 80052a8:	20000c10 	.word	0x20000c10
 80052ac:	20000c14 	.word	0x20000c14
 80052b0:	20000cc4 	.word	0x20000cc4
 80052b4:	20000c24 	.word	0x20000c24
 80052b8:	08005bb8 	.word	0x08005bb8

080052bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	3b04      	subs	r3, #4
 80052cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80052d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	3b04      	subs	r3, #4
 80052da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f023 0201 	bic.w	r2, r3, #1
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	3b04      	subs	r3, #4
 80052ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80052ec:	4a0c      	ldr	r2, [pc, #48]	; (8005320 <pxPortInitialiseStack+0x64>)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	3b14      	subs	r3, #20
 80052f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	3b04      	subs	r3, #4
 8005302:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f06f 0202 	mvn.w	r2, #2
 800530a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	3b20      	subs	r3, #32
 8005310:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005312:	68fb      	ldr	r3, [r7, #12]
}
 8005314:	4618      	mov	r0, r3
 8005316:	3714      	adds	r7, #20
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr
 8005320:	08005325 	.word	0x08005325

08005324 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800532a:	2300      	movs	r3, #0
 800532c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800532e:	4b11      	ldr	r3, [pc, #68]	; (8005374 <prvTaskExitError+0x50>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005336:	d009      	beq.n	800534c <prvTaskExitError+0x28>
 8005338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533c:	f383 8811 	msr	BASEPRI, r3
 8005340:	f3bf 8f6f 	isb	sy
 8005344:	f3bf 8f4f 	dsb	sy
 8005348:	60fb      	str	r3, [r7, #12]
 800534a:	e7fe      	b.n	800534a <prvTaskExitError+0x26>
 800534c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005350:	f383 8811 	msr	BASEPRI, r3
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800535e:	bf00      	nop
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d0fc      	beq.n	8005360 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005366:	bf00      	nop
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	2000000c 	.word	0x2000000c
	...

08005380 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005380:	4b07      	ldr	r3, [pc, #28]	; (80053a0 <pxCurrentTCBConst2>)
 8005382:	6819      	ldr	r1, [r3, #0]
 8005384:	6808      	ldr	r0, [r1, #0]
 8005386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800538a:	f380 8809 	msr	PSP, r0
 800538e:	f3bf 8f6f 	isb	sy
 8005392:	f04f 0000 	mov.w	r0, #0
 8005396:	f380 8811 	msr	BASEPRI, r0
 800539a:	4770      	bx	lr
 800539c:	f3af 8000 	nop.w

080053a0 <pxCurrentTCBConst2>:
 80053a0:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80053a4:	bf00      	nop
 80053a6:	bf00      	nop

080053a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80053a8:	4808      	ldr	r0, [pc, #32]	; (80053cc <prvPortStartFirstTask+0x24>)
 80053aa:	6800      	ldr	r0, [r0, #0]
 80053ac:	6800      	ldr	r0, [r0, #0]
 80053ae:	f380 8808 	msr	MSP, r0
 80053b2:	f04f 0000 	mov.w	r0, #0
 80053b6:	f380 8814 	msr	CONTROL, r0
 80053ba:	b662      	cpsie	i
 80053bc:	b661      	cpsie	f
 80053be:	f3bf 8f4f 	dsb	sy
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	df00      	svc	0
 80053c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80053ca:	bf00      	nop
 80053cc:	e000ed08 	.word	0xe000ed08

080053d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80053d6:	4b44      	ldr	r3, [pc, #272]	; (80054e8 <xPortStartScheduler+0x118>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a44      	ldr	r2, [pc, #272]	; (80054ec <xPortStartScheduler+0x11c>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d109      	bne.n	80053f4 <xPortStartScheduler+0x24>
 80053e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e4:	f383 8811 	msr	BASEPRI, r3
 80053e8:	f3bf 8f6f 	isb	sy
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	613b      	str	r3, [r7, #16]
 80053f2:	e7fe      	b.n	80053f2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80053f4:	4b3c      	ldr	r3, [pc, #240]	; (80054e8 <xPortStartScheduler+0x118>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a3d      	ldr	r2, [pc, #244]	; (80054f0 <xPortStartScheduler+0x120>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d109      	bne.n	8005412 <xPortStartScheduler+0x42>
 80053fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005402:	f383 8811 	msr	BASEPRI, r3
 8005406:	f3bf 8f6f 	isb	sy
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	60fb      	str	r3, [r7, #12]
 8005410:	e7fe      	b.n	8005410 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005412:	4b38      	ldr	r3, [pc, #224]	; (80054f4 <xPortStartScheduler+0x124>)
 8005414:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	b2db      	uxtb	r3, r3
 800541c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	22ff      	movs	r2, #255	; 0xff
 8005422:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	b2db      	uxtb	r3, r3
 800542a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800542c:	78fb      	ldrb	r3, [r7, #3]
 800542e:	b2db      	uxtb	r3, r3
 8005430:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005434:	b2da      	uxtb	r2, r3
 8005436:	4b30      	ldr	r3, [pc, #192]	; (80054f8 <xPortStartScheduler+0x128>)
 8005438:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800543a:	4b30      	ldr	r3, [pc, #192]	; (80054fc <xPortStartScheduler+0x12c>)
 800543c:	2207      	movs	r2, #7
 800543e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005440:	e009      	b.n	8005456 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005442:	4b2e      	ldr	r3, [pc, #184]	; (80054fc <xPortStartScheduler+0x12c>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	3b01      	subs	r3, #1
 8005448:	4a2c      	ldr	r2, [pc, #176]	; (80054fc <xPortStartScheduler+0x12c>)
 800544a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800544c:	78fb      	ldrb	r3, [r7, #3]
 800544e:	b2db      	uxtb	r3, r3
 8005450:	005b      	lsls	r3, r3, #1
 8005452:	b2db      	uxtb	r3, r3
 8005454:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005456:	78fb      	ldrb	r3, [r7, #3]
 8005458:	b2db      	uxtb	r3, r3
 800545a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800545e:	2b80      	cmp	r3, #128	; 0x80
 8005460:	d0ef      	beq.n	8005442 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005462:	4b26      	ldr	r3, [pc, #152]	; (80054fc <xPortStartScheduler+0x12c>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f1c3 0307 	rsb	r3, r3, #7
 800546a:	2b04      	cmp	r3, #4
 800546c:	d009      	beq.n	8005482 <xPortStartScheduler+0xb2>
 800546e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	60bb      	str	r3, [r7, #8]
 8005480:	e7fe      	b.n	8005480 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005482:	4b1e      	ldr	r3, [pc, #120]	; (80054fc <xPortStartScheduler+0x12c>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	021b      	lsls	r3, r3, #8
 8005488:	4a1c      	ldr	r2, [pc, #112]	; (80054fc <xPortStartScheduler+0x12c>)
 800548a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800548c:	4b1b      	ldr	r3, [pc, #108]	; (80054fc <xPortStartScheduler+0x12c>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005494:	4a19      	ldr	r2, [pc, #100]	; (80054fc <xPortStartScheduler+0x12c>)
 8005496:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	b2da      	uxtb	r2, r3
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80054a0:	4b17      	ldr	r3, [pc, #92]	; (8005500 <xPortStartScheduler+0x130>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a16      	ldr	r2, [pc, #88]	; (8005500 <xPortStartScheduler+0x130>)
 80054a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80054aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80054ac:	4b14      	ldr	r3, [pc, #80]	; (8005500 <xPortStartScheduler+0x130>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a13      	ldr	r2, [pc, #76]	; (8005500 <xPortStartScheduler+0x130>)
 80054b2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80054b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80054b8:	f000 f8d6 	bl	8005668 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80054bc:	4b11      	ldr	r3, [pc, #68]	; (8005504 <xPortStartScheduler+0x134>)
 80054be:	2200      	movs	r2, #0
 80054c0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80054c2:	f000 f8f5 	bl	80056b0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80054c6:	4b10      	ldr	r3, [pc, #64]	; (8005508 <xPortStartScheduler+0x138>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a0f      	ldr	r2, [pc, #60]	; (8005508 <xPortStartScheduler+0x138>)
 80054cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80054d0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80054d2:	f7ff ff69 	bl	80053a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80054d6:	f7ff f86d 	bl	80045b4 <vTaskSwitchContext>
	prvTaskExitError();
 80054da:	f7ff ff23 	bl	8005324 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3718      	adds	r7, #24
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	e000ed00 	.word	0xe000ed00
 80054ec:	410fc271 	.word	0x410fc271
 80054f0:	410fc270 	.word	0x410fc270
 80054f4:	e000e400 	.word	0xe000e400
 80054f8:	20000d14 	.word	0x20000d14
 80054fc:	20000d18 	.word	0x20000d18
 8005500:	e000ed20 	.word	0xe000ed20
 8005504:	2000000c 	.word	0x2000000c
 8005508:	e000ef34 	.word	0xe000ef34

0800550c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005516:	f383 8811 	msr	BASEPRI, r3
 800551a:	f3bf 8f6f 	isb	sy
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005524:	4b0e      	ldr	r3, [pc, #56]	; (8005560 <vPortEnterCritical+0x54>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	3301      	adds	r3, #1
 800552a:	4a0d      	ldr	r2, [pc, #52]	; (8005560 <vPortEnterCritical+0x54>)
 800552c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800552e:	4b0c      	ldr	r3, [pc, #48]	; (8005560 <vPortEnterCritical+0x54>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2b01      	cmp	r3, #1
 8005534:	d10e      	bne.n	8005554 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005536:	4b0b      	ldr	r3, [pc, #44]	; (8005564 <vPortEnterCritical+0x58>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b00      	cmp	r3, #0
 800553e:	d009      	beq.n	8005554 <vPortEnterCritical+0x48>
 8005540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005544:	f383 8811 	msr	BASEPRI, r3
 8005548:	f3bf 8f6f 	isb	sy
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	603b      	str	r3, [r7, #0]
 8005552:	e7fe      	b.n	8005552 <vPortEnterCritical+0x46>
	}
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr
 8005560:	2000000c 	.word	0x2000000c
 8005564:	e000ed04 	.word	0xe000ed04

08005568 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800556e:	4b11      	ldr	r3, [pc, #68]	; (80055b4 <vPortExitCritical+0x4c>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d109      	bne.n	800558a <vPortExitCritical+0x22>
 8005576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557a:	f383 8811 	msr	BASEPRI, r3
 800557e:	f3bf 8f6f 	isb	sy
 8005582:	f3bf 8f4f 	dsb	sy
 8005586:	607b      	str	r3, [r7, #4]
 8005588:	e7fe      	b.n	8005588 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800558a:	4b0a      	ldr	r3, [pc, #40]	; (80055b4 <vPortExitCritical+0x4c>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	3b01      	subs	r3, #1
 8005590:	4a08      	ldr	r2, [pc, #32]	; (80055b4 <vPortExitCritical+0x4c>)
 8005592:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005594:	4b07      	ldr	r3, [pc, #28]	; (80055b4 <vPortExitCritical+0x4c>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d104      	bne.n	80055a6 <vPortExitCritical+0x3e>
 800559c:	2300      	movs	r3, #0
 800559e:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80055a6:	bf00      	nop
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	2000000c 	.word	0x2000000c
	...

080055c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80055c0:	f3ef 8009 	mrs	r0, PSP
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	4b15      	ldr	r3, [pc, #84]	; (8005620 <pxCurrentTCBConst>)
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	f01e 0f10 	tst.w	lr, #16
 80055d0:	bf08      	it	eq
 80055d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80055d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055da:	6010      	str	r0, [r2, #0]
 80055dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80055e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80055e4:	f380 8811 	msr	BASEPRI, r0
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	f3bf 8f6f 	isb	sy
 80055f0:	f7fe ffe0 	bl	80045b4 <vTaskSwitchContext>
 80055f4:	f04f 0000 	mov.w	r0, #0
 80055f8:	f380 8811 	msr	BASEPRI, r0
 80055fc:	bc09      	pop	{r0, r3}
 80055fe:	6819      	ldr	r1, [r3, #0]
 8005600:	6808      	ldr	r0, [r1, #0]
 8005602:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005606:	f01e 0f10 	tst.w	lr, #16
 800560a:	bf08      	it	eq
 800560c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005610:	f380 8809 	msr	PSP, r0
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	f3af 8000 	nop.w

08005620 <pxCurrentTCBConst>:
 8005620:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005624:	bf00      	nop
 8005626:	bf00      	nop

08005628 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
	__asm volatile
 800562e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005632:	f383 8811 	msr	BASEPRI, r3
 8005636:	f3bf 8f6f 	isb	sy
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005640:	f7fe ff00 	bl	8004444 <xTaskIncrementTick>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800564a:	4b06      	ldr	r3, [pc, #24]	; (8005664 <xPortSysTickHandler+0x3c>)
 800564c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005650:	601a      	str	r2, [r3, #0]
 8005652:	2300      	movs	r3, #0
 8005654:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800565c:	bf00      	nop
 800565e:	3708      	adds	r7, #8
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	e000ed04 	.word	0xe000ed04

08005668 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005668:	b480      	push	{r7}
 800566a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800566c:	4b0b      	ldr	r3, [pc, #44]	; (800569c <vPortSetupTimerInterrupt+0x34>)
 800566e:	2200      	movs	r2, #0
 8005670:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005672:	4b0b      	ldr	r3, [pc, #44]	; (80056a0 <vPortSetupTimerInterrupt+0x38>)
 8005674:	2200      	movs	r2, #0
 8005676:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005678:	4b0a      	ldr	r3, [pc, #40]	; (80056a4 <vPortSetupTimerInterrupt+0x3c>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a0a      	ldr	r2, [pc, #40]	; (80056a8 <vPortSetupTimerInterrupt+0x40>)
 800567e:	fba2 2303 	umull	r2, r3, r2, r3
 8005682:	099b      	lsrs	r3, r3, #6
 8005684:	4a09      	ldr	r2, [pc, #36]	; (80056ac <vPortSetupTimerInterrupt+0x44>)
 8005686:	3b01      	subs	r3, #1
 8005688:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800568a:	4b04      	ldr	r3, [pc, #16]	; (800569c <vPortSetupTimerInterrupt+0x34>)
 800568c:	2207      	movs	r2, #7
 800568e:	601a      	str	r2, [r3, #0]
}
 8005690:	bf00      	nop
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	e000e010 	.word	0xe000e010
 80056a0:	e000e018 	.word	0xe000e018
 80056a4:	20000000 	.word	0x20000000
 80056a8:	10624dd3 	.word	0x10624dd3
 80056ac:	e000e014 	.word	0xe000e014

080056b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80056b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80056c0 <vPortEnableVFP+0x10>
 80056b4:	6801      	ldr	r1, [r0, #0]
 80056b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80056ba:	6001      	str	r1, [r0, #0]
 80056bc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80056be:	bf00      	nop
 80056c0:	e000ed88 	.word	0xe000ed88

080056c4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80056ca:	f3ef 8305 	mrs	r3, IPSR
 80056ce:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2b0f      	cmp	r3, #15
 80056d4:	d913      	bls.n	80056fe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80056d6:	4a16      	ldr	r2, [pc, #88]	; (8005730 <vPortValidateInterruptPriority+0x6c>)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4413      	add	r3, r2
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80056e0:	4b14      	ldr	r3, [pc, #80]	; (8005734 <vPortValidateInterruptPriority+0x70>)
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	7afa      	ldrb	r2, [r7, #11]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d209      	bcs.n	80056fe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80056ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ee:	f383 8811 	msr	BASEPRI, r3
 80056f2:	f3bf 8f6f 	isb	sy
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	607b      	str	r3, [r7, #4]
 80056fc:	e7fe      	b.n	80056fc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80056fe:	4b0e      	ldr	r3, [pc, #56]	; (8005738 <vPortValidateInterruptPriority+0x74>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005706:	4b0d      	ldr	r3, [pc, #52]	; (800573c <vPortValidateInterruptPriority+0x78>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	429a      	cmp	r2, r3
 800570c:	d909      	bls.n	8005722 <vPortValidateInterruptPriority+0x5e>
 800570e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005712:	f383 8811 	msr	BASEPRI, r3
 8005716:	f3bf 8f6f 	isb	sy
 800571a:	f3bf 8f4f 	dsb	sy
 800571e:	603b      	str	r3, [r7, #0]
 8005720:	e7fe      	b.n	8005720 <vPortValidateInterruptPriority+0x5c>
	}
 8005722:	bf00      	nop
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	e000e3f0 	.word	0xe000e3f0
 8005734:	20000d14 	.word	0x20000d14
 8005738:	e000ed0c 	.word	0xe000ed0c
 800573c:	20000d18 	.word	0x20000d18

08005740 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b08a      	sub	sp, #40	; 0x28
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005748:	2300      	movs	r3, #0
 800574a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800574c:	f7fe fdc0 	bl	80042d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005750:	4b57      	ldr	r3, [pc, #348]	; (80058b0 <pvPortMalloc+0x170>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d101      	bne.n	800575c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005758:	f000 f90c 	bl	8005974 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800575c:	4b55      	ldr	r3, [pc, #340]	; (80058b4 <pvPortMalloc+0x174>)
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4013      	ands	r3, r2
 8005764:	2b00      	cmp	r3, #0
 8005766:	f040 808c 	bne.w	8005882 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d01c      	beq.n	80057aa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005770:	2208      	movs	r2, #8
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4413      	add	r3, r2
 8005776:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f003 0307 	and.w	r3, r3, #7
 800577e:	2b00      	cmp	r3, #0
 8005780:	d013      	beq.n	80057aa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f023 0307 	bic.w	r3, r3, #7
 8005788:	3308      	adds	r3, #8
 800578a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f003 0307 	and.w	r3, r3, #7
 8005792:	2b00      	cmp	r3, #0
 8005794:	d009      	beq.n	80057aa <pvPortMalloc+0x6a>
 8005796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579a:	f383 8811 	msr	BASEPRI, r3
 800579e:	f3bf 8f6f 	isb	sy
 80057a2:	f3bf 8f4f 	dsb	sy
 80057a6:	617b      	str	r3, [r7, #20]
 80057a8:	e7fe      	b.n	80057a8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d068      	beq.n	8005882 <pvPortMalloc+0x142>
 80057b0:	4b41      	ldr	r3, [pc, #260]	; (80058b8 <pvPortMalloc+0x178>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d863      	bhi.n	8005882 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80057ba:	4b40      	ldr	r3, [pc, #256]	; (80058bc <pvPortMalloc+0x17c>)
 80057bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80057be:	4b3f      	ldr	r3, [pc, #252]	; (80058bc <pvPortMalloc+0x17c>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057c4:	e004      	b.n	80057d0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80057c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80057ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d903      	bls.n	80057e2 <pvPortMalloc+0xa2>
 80057da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1f1      	bne.n	80057c6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80057e2:	4b33      	ldr	r3, [pc, #204]	; (80058b0 <pvPortMalloc+0x170>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d04a      	beq.n	8005882 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80057ec:	6a3b      	ldr	r3, [r7, #32]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2208      	movs	r2, #8
 80057f2:	4413      	add	r3, r2
 80057f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	6a3b      	ldr	r3, [r7, #32]
 80057fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80057fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	1ad2      	subs	r2, r2, r3
 8005806:	2308      	movs	r3, #8
 8005808:	005b      	lsls	r3, r3, #1
 800580a:	429a      	cmp	r2, r3
 800580c:	d91e      	bls.n	800584c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800580e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4413      	add	r3, r2
 8005814:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	f003 0307 	and.w	r3, r3, #7
 800581c:	2b00      	cmp	r3, #0
 800581e:	d009      	beq.n	8005834 <pvPortMalloc+0xf4>
 8005820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005824:	f383 8811 	msr	BASEPRI, r3
 8005828:	f3bf 8f6f 	isb	sy
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	613b      	str	r3, [r7, #16]
 8005832:	e7fe      	b.n	8005832 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	1ad2      	subs	r2, r2, r3
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005846:	69b8      	ldr	r0, [r7, #24]
 8005848:	f000 f8f6 	bl	8005a38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800584c:	4b1a      	ldr	r3, [pc, #104]	; (80058b8 <pvPortMalloc+0x178>)
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	4a18      	ldr	r2, [pc, #96]	; (80058b8 <pvPortMalloc+0x178>)
 8005858:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800585a:	4b17      	ldr	r3, [pc, #92]	; (80058b8 <pvPortMalloc+0x178>)
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	4b18      	ldr	r3, [pc, #96]	; (80058c0 <pvPortMalloc+0x180>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	429a      	cmp	r2, r3
 8005864:	d203      	bcs.n	800586e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005866:	4b14      	ldr	r3, [pc, #80]	; (80058b8 <pvPortMalloc+0x178>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a15      	ldr	r2, [pc, #84]	; (80058c0 <pvPortMalloc+0x180>)
 800586c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800586e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	4b10      	ldr	r3, [pc, #64]	; (80058b4 <pvPortMalloc+0x174>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	431a      	orrs	r2, r3
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800587c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587e:	2200      	movs	r2, #0
 8005880:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005882:	f7fe fd33 	bl	80042ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	f003 0307 	and.w	r3, r3, #7
 800588c:	2b00      	cmp	r3, #0
 800588e:	d009      	beq.n	80058a4 <pvPortMalloc+0x164>
 8005890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005894:	f383 8811 	msr	BASEPRI, r3
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	60fb      	str	r3, [r7, #12]
 80058a2:	e7fe      	b.n	80058a2 <pvPortMalloc+0x162>
	return pvReturn;
 80058a4:	69fb      	ldr	r3, [r7, #28]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3728      	adds	r7, #40	; 0x28
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	20001924 	.word	0x20001924
 80058b4:	20001930 	.word	0x20001930
 80058b8:	20001928 	.word	0x20001928
 80058bc:	2000191c 	.word	0x2000191c
 80058c0:	2000192c 	.word	0x2000192c

080058c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b086      	sub	sp, #24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d046      	beq.n	8005964 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80058d6:	2308      	movs	r3, #8
 80058d8:	425b      	negs	r3, r3
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	4413      	add	r3, r2
 80058de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	685a      	ldr	r2, [r3, #4]
 80058e8:	4b20      	ldr	r3, [pc, #128]	; (800596c <vPortFree+0xa8>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4013      	ands	r3, r2
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d109      	bne.n	8005906 <vPortFree+0x42>
 80058f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f6:	f383 8811 	msr	BASEPRI, r3
 80058fa:	f3bf 8f6f 	isb	sy
 80058fe:	f3bf 8f4f 	dsb	sy
 8005902:	60fb      	str	r3, [r7, #12]
 8005904:	e7fe      	b.n	8005904 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d009      	beq.n	8005922 <vPortFree+0x5e>
 800590e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005912:	f383 8811 	msr	BASEPRI, r3
 8005916:	f3bf 8f6f 	isb	sy
 800591a:	f3bf 8f4f 	dsb	sy
 800591e:	60bb      	str	r3, [r7, #8]
 8005920:	e7fe      	b.n	8005920 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	4b11      	ldr	r3, [pc, #68]	; (800596c <vPortFree+0xa8>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4013      	ands	r3, r2
 800592c:	2b00      	cmp	r3, #0
 800592e:	d019      	beq.n	8005964 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d115      	bne.n	8005964 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	4b0b      	ldr	r3, [pc, #44]	; (800596c <vPortFree+0xa8>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	43db      	mvns	r3, r3
 8005942:	401a      	ands	r2, r3
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005948:	f7fe fcc2 	bl	80042d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	685a      	ldr	r2, [r3, #4]
 8005950:	4b07      	ldr	r3, [pc, #28]	; (8005970 <vPortFree+0xac>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4413      	add	r3, r2
 8005956:	4a06      	ldr	r2, [pc, #24]	; (8005970 <vPortFree+0xac>)
 8005958:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800595a:	6938      	ldr	r0, [r7, #16]
 800595c:	f000 f86c 	bl	8005a38 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005960:	f7fe fcc4 	bl	80042ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005964:	bf00      	nop
 8005966:	3718      	adds	r7, #24
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	20001930 	.word	0x20001930
 8005970:	20001928 	.word	0x20001928

08005974 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800597a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800597e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005980:	4b27      	ldr	r3, [pc, #156]	; (8005a20 <prvHeapInit+0xac>)
 8005982:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f003 0307 	and.w	r3, r3, #7
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00c      	beq.n	80059a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	3307      	adds	r3, #7
 8005992:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f023 0307 	bic.w	r3, r3, #7
 800599a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	4a1f      	ldr	r2, [pc, #124]	; (8005a20 <prvHeapInit+0xac>)
 80059a4:	4413      	add	r3, r2
 80059a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80059ac:	4a1d      	ldr	r2, [pc, #116]	; (8005a24 <prvHeapInit+0xb0>)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80059b2:	4b1c      	ldr	r3, [pc, #112]	; (8005a24 <prvHeapInit+0xb0>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68ba      	ldr	r2, [r7, #8]
 80059bc:	4413      	add	r3, r2
 80059be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80059c0:	2208      	movs	r2, #8
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	1a9b      	subs	r3, r3, r2
 80059c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f023 0307 	bic.w	r3, r3, #7
 80059ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4a15      	ldr	r2, [pc, #84]	; (8005a28 <prvHeapInit+0xb4>)
 80059d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80059d6:	4b14      	ldr	r3, [pc, #80]	; (8005a28 <prvHeapInit+0xb4>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2200      	movs	r2, #0
 80059dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80059de:	4b12      	ldr	r3, [pc, #72]	; (8005a28 <prvHeapInit+0xb4>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2200      	movs	r2, #0
 80059e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	1ad2      	subs	r2, r2, r3
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80059f4:	4b0c      	ldr	r3, [pc, #48]	; (8005a28 <prvHeapInit+0xb4>)
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	4a0a      	ldr	r2, [pc, #40]	; (8005a2c <prvHeapInit+0xb8>)
 8005a02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	4a09      	ldr	r2, [pc, #36]	; (8005a30 <prvHeapInit+0xbc>)
 8005a0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a0c:	4b09      	ldr	r3, [pc, #36]	; (8005a34 <prvHeapInit+0xc0>)
 8005a0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a12:	601a      	str	r2, [r3, #0]
}
 8005a14:	bf00      	nop
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	20000d1c 	.word	0x20000d1c
 8005a24:	2000191c 	.word	0x2000191c
 8005a28:	20001924 	.word	0x20001924
 8005a2c:	2000192c 	.word	0x2000192c
 8005a30:	20001928 	.word	0x20001928
 8005a34:	20001930 	.word	0x20001930

08005a38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a40:	4b28      	ldr	r3, [pc, #160]	; (8005ae4 <prvInsertBlockIntoFreeList+0xac>)
 8005a42:	60fb      	str	r3, [r7, #12]
 8005a44:	e002      	b.n	8005a4c <prvInsertBlockIntoFreeList+0x14>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	60fb      	str	r3, [r7, #12]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d8f7      	bhi.n	8005a46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	4413      	add	r3, r2
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d108      	bne.n	8005a7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	441a      	add	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	441a      	add	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d118      	bne.n	8005ac0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	4b15      	ldr	r3, [pc, #84]	; (8005ae8 <prvInsertBlockIntoFreeList+0xb0>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d00d      	beq.n	8005ab6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	441a      	add	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	601a      	str	r2, [r3, #0]
 8005ab4:	e008      	b.n	8005ac8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ab6:	4b0c      	ldr	r3, [pc, #48]	; (8005ae8 <prvInsertBlockIntoFreeList+0xb0>)
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	601a      	str	r2, [r3, #0]
 8005abe:	e003      	b.n	8005ac8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d002      	beq.n	8005ad6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ad6:	bf00      	nop
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	2000191c 	.word	0x2000191c
 8005ae8:	20001924 	.word	0x20001924

08005aec <__libc_init_array>:
 8005aec:	b570      	push	{r4, r5, r6, lr}
 8005aee:	4e0d      	ldr	r6, [pc, #52]	; (8005b24 <__libc_init_array+0x38>)
 8005af0:	4c0d      	ldr	r4, [pc, #52]	; (8005b28 <__libc_init_array+0x3c>)
 8005af2:	1ba4      	subs	r4, r4, r6
 8005af4:	10a4      	asrs	r4, r4, #2
 8005af6:	2500      	movs	r5, #0
 8005af8:	42a5      	cmp	r5, r4
 8005afa:	d109      	bne.n	8005b10 <__libc_init_array+0x24>
 8005afc:	4e0b      	ldr	r6, [pc, #44]	; (8005b2c <__libc_init_array+0x40>)
 8005afe:	4c0c      	ldr	r4, [pc, #48]	; (8005b30 <__libc_init_array+0x44>)
 8005b00:	f000 f82c 	bl	8005b5c <_init>
 8005b04:	1ba4      	subs	r4, r4, r6
 8005b06:	10a4      	asrs	r4, r4, #2
 8005b08:	2500      	movs	r5, #0
 8005b0a:	42a5      	cmp	r5, r4
 8005b0c:	d105      	bne.n	8005b1a <__libc_init_array+0x2e>
 8005b0e:	bd70      	pop	{r4, r5, r6, pc}
 8005b10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b14:	4798      	blx	r3
 8005b16:	3501      	adds	r5, #1
 8005b18:	e7ee      	b.n	8005af8 <__libc_init_array+0xc>
 8005b1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b1e:	4798      	blx	r3
 8005b20:	3501      	adds	r5, #1
 8005b22:	e7f2      	b.n	8005b0a <__libc_init_array+0x1e>
 8005b24:	08005c1c 	.word	0x08005c1c
 8005b28:	08005c1c 	.word	0x08005c1c
 8005b2c:	08005c1c 	.word	0x08005c1c
 8005b30:	08005c20 	.word	0x08005c20

08005b34 <memcpy>:
 8005b34:	b510      	push	{r4, lr}
 8005b36:	1e43      	subs	r3, r0, #1
 8005b38:	440a      	add	r2, r1
 8005b3a:	4291      	cmp	r1, r2
 8005b3c:	d100      	bne.n	8005b40 <memcpy+0xc>
 8005b3e:	bd10      	pop	{r4, pc}
 8005b40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b48:	e7f7      	b.n	8005b3a <memcpy+0x6>

08005b4a <memset>:
 8005b4a:	4402      	add	r2, r0
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d100      	bne.n	8005b54 <memset+0xa>
 8005b52:	4770      	bx	lr
 8005b54:	f803 1b01 	strb.w	r1, [r3], #1
 8005b58:	e7f9      	b.n	8005b4e <memset+0x4>
	...

08005b5c <_init>:
 8005b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b5e:	bf00      	nop
 8005b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b62:	bc08      	pop	{r3}
 8005b64:	469e      	mov	lr, r3
 8005b66:	4770      	bx	lr

08005b68 <_fini>:
 8005b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b6a:	bf00      	nop
 8005b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b6e:	bc08      	pop	{r3}
 8005b70:	469e      	mov	lr, r3
 8005b72:	4770      	bx	lr
